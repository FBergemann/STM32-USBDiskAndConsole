
FatFs_USBDisk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800740c  0800740c  0000840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079e0  080079e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079e8  080079e8  000089e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080079ec  080079ec  000089ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  080079f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003944  20000098  08007a88  00009098  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200039dc  08007a88  000099dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY
 10 .debug_line   00022be5  00000000  00000000  000090c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000b1  00000000  00000000  0002bcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00024fe4  00000000  00000000  0002bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000591b  00000000  00000000  00050d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00056660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f8c1a  00000000  00000000  00057828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129d  00000000  00000000  00150442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000dc02  00000000  00000000  001516df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c0d9  00000000  00000000  0015f2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b3ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  0018b400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000098 	.word	0x20000098
 800021c:	00000000 	.word	0x00000000
 8000220:	080073f4 	.word	0x080073f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000009c 	.word	0x2000009c
 800023c:	080073f4 	.word	0x080073f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005e6:	e003      	b.n	80005f0 <LoopCopyDataInit>

080005e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ee:	3104      	adds	r1, #4

080005f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f0:	480b      	ldr	r0, [pc, #44]	@ (8000620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005f8:	d3f6      	bcc.n	80005e8 <CopyDataInit>
  ldr  r2, =_sbss
 80005fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005fc:	e002      	b.n	8000604 <LoopFillZerobss>

080005fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000600:	f842 3b04 	str.w	r3, [r2], #4

08000604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000608:	d3f9      	bcc.n	80005fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800060a:	f000 fc45 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f006 fb3d 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000612:	f000 f911 	bl	8000838 <main>
  bx  lr    
 8000616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000618:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800061c:	080079f0 	.word	0x080079f0
  ldr  r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000624:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8000628:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800062c:	200039dc 	.word	0x200039dc

08000630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000634:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <_sbrk+0x2c>)
 8000636:	6811      	ldr	r1, [r2, #0]
{
 8000638:	b508      	push	{r3, lr}
 800063a:	4603      	mov	r3, r0
	if (heap_end == 0)
 800063c:	b909      	cbnz	r1, 8000642 <_sbrk+0xe>
		heap_end = &end;
 800063e:	4909      	ldr	r1, [pc, #36]	@ (8000664 <_sbrk+0x30>)
 8000640:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8000642:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000644:	4669      	mov	r1, sp
 8000646:	4403      	add	r3, r0
 8000648:	428b      	cmp	r3, r1
 800064a:	d906      	bls.n	800065a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800064c:	f006 fb18 	bl	8006c80 <__errno>
 8000650:	230c      	movs	r3, #12
 8000652:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000658:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800065a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800065c:	e7fc      	b.n	8000658 <_sbrk+0x24>
 800065e:	bf00      	nop
 8000660:	200000b4 	.word	0x200000b4
 8000664:	200039e0 	.word	0x200039e0

08000668 <Log>:
	TaskConsole_WaitReady();
}

void Log(const LogClient_t logClient, const char* str)
{
	if (sSingleClient == LC_EOL_c || sSingleClient == logClient) {
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <Log+0x14>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b08      	cmp	r3, #8
 800066e:	d001      	beq.n	8000674 <Log+0xc>
 8000670:	4283      	cmp	r3, r0
 8000672:	d101      	bne.n	8000678 <Log+0x10>
		TaskConsole_AddLog(logClient, str);
 8000674:	f000 b8a2 	b.w	80007bc <TaskConsole_AddLog>
	}
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000

08000680 <LogClientID2String>:
	}
}

char* LogClientID2String(const LogClient_t logClient)
{
	switch (logClient) {
 8000680:	2808      	cmp	r0, #8
 8000682:	bf9a      	itte	ls
 8000684:	4b02      	ldrls	r3, [pc, #8]	@ (8000690 <LogClientID2String+0x10>)
 8000686:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 800068a:	4802      	ldrhi	r0, [pc, #8]	@ (8000694 <LogClientID2String+0x14>)
	case LC_ADC_c:		return "ADC"; break;
	case LC_PWM_c:		return "PWM"; break;
	case LC_EOL_c:		return "EOL"; break;
	}
	return "?  ";
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	0800740c 	.word	0x0800740c
 8000694:	080078c6 	.word	0x080078c6

08000698 <LogMakePrefix>:

 char* LogMakePrefix(const LogClient_t logClient, size_t* prefixLen)
{
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4604      	mov	r4, r0
 800069c:	b085      	sub	sp, #20
	if (prefixLen != NULL) *prefixLen = sizeof(prefixPrototype);
 800069e:	b109      	cbz	r1, 80006a4 <LogMakePrefix+0xc>
 80006a0:	231d      	movs	r3, #29
 80006a2:	600b      	str	r3, [r1, #0]
//	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
	uint32_t ticks = HAL_GetTick();
 80006a4:	f000 fc64 	bl	8000f70 <HAL_GetTick>
	sprintf(	logPrefix[logClient],
 80006a8:	4d16      	ldr	r5, [pc, #88]	@ (8000704 <LogMakePrefix+0x6c>)
 80006aa:	231d      	movs	r3, #29
	uint32_t ticks = HAL_GetTick();
 80006ac:	4601      	mov	r1, r0
	sprintf(	logPrefix[logClient],
 80006ae:	4620      	mov	r0, r4
				"2021-05-01 %02lu:%02lu:%02lu.%03lu:%s:",
				(ticks / (1000 * 60 * 60)) % 24,	// hours
 80006b0:	4e15      	ldr	r6, [pc, #84]	@ (8000708 <LogMakePrefix+0x70>)
	sprintf(	logPrefix[logClient],
 80006b2:	fb03 5504 	mla	r5, r3, r4, r5
 80006b6:	f7ff ffe3 	bl	8000680 <LogClientID2String>
 80006ba:	9002      	str	r0, [sp, #8]
 80006bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
				(ticks / (1000 * 60)) % 60, 		// minutes
 80006c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
	sprintf(	logPrefix[logClient],
 80006c4:	273c      	movs	r7, #60	@ 0x3c
 80006c6:	2218      	movs	r2, #24
 80006c8:	fbb1 f4f0 	udiv	r4, r1, r0
				(ticks / (1000 * 60 * 60)) % 24,	// hours
 80006cc:	fbb1 f6f6 	udiv	r6, r1, r6
				(ticks / (1000 * 60)) % 60, 		// minutes
 80006d0:	fbb1 f3f3 	udiv	r3, r1, r3
	sprintf(	logPrefix[logClient],
 80006d4:	fb00 1114 	mls	r1, r0, r4, r1
 80006d8:	4628      	mov	r0, r5
 80006da:	9101      	str	r1, [sp, #4]
 80006dc:	fbb4 f1f7 	udiv	r1, r4, r7
 80006e0:	fbb3 fef7 	udiv	lr, r3, r7
 80006e4:	fbb6 fcf2 	udiv	ip, r6, r2
 80006e8:	fb07 4411 	mls	r4, r7, r1, r4
 80006ec:	4907      	ldr	r1, [pc, #28]	@ (800070c <LogMakePrefix+0x74>)
 80006ee:	fb07 331e 	mls	r3, r7, lr, r3
 80006f2:	fb02 621c 	mls	r2, r2, ip, r6
 80006f6:	9400      	str	r4, [sp, #0]
 80006f8:	f006 fa8a 	bl	8006c10 <siprintf>
				(ticks / 1000) % 60, 				// seconds
				(ticks % 1000), 					// milliseconds
				LogClientID2String(logClient));

	return logPrefix[logClient];
}
 80006fc:	4628      	mov	r0, r5
 80006fe:	b005      	add	sp, #20
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	bf00      	nop
 8000704:	200000bc 	.word	0x200000bc
 8000708:	0036ee80 	.word	0x0036ee80
 800070c:	080078ca 	.word	0x080078ca

08000710 <AddLogCore>:
 *  TODO:
 *  1) currently, this just overwrites not yet flushed data
 *     there should be at least an overwrite indicator in the output
 */
static void AddLogCore(const char* str, const size_t len)
{
 8000710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t noWrapLen = endPtr - writePtr + 1;
 8000714:	4f12      	ldr	r7, [pc, #72]	@ (8000760 <AddLogCore+0x50>)
{
 8000716:	4606      	mov	r6, r0
	size_t noWrapLen = endPtr - writePtr + 1;
 8000718:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8000768 <AddLogCore+0x58>
{
 800071c:	460c      	mov	r4, r1
	size_t noWrapLen = endPtr - writePtr + 1;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	eba8 0503 	sub.w	r5, r8, r3
 8000724:	3501      	adds	r5, #1
	if (noWrapLen >= len) {
 8000726:	428d      	cmp	r5, r1
 8000728:	d30c      	bcc.n	8000744 <AddLogCore+0x34>
		memcpy(writePtr, str, len);
 800072a:	460a      	mov	r2, r1
 800072c:	4601      	mov	r1, r0
 800072e:	4618      	mov	r0, r3
 8000730:	f006 fad2 	bl	8006cd8 <memcpy>
		char *writePtrCopy = writePtr + len;
		if (writePtrCopy > endPtr) writePtrCopy = logBuffer;
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <AddLogCore+0x54>)
		char *writePtrCopy = writePtr + len;
 8000736:	4404      	add	r4, r0
		if (writePtrCopy > endPtr) writePtrCopy = logBuffer;
 8000738:	4544      	cmp	r4, r8
 800073a:	bf88      	it	hi
 800073c:	461c      	movhi	r4, r3
		writePtr = writePtrCopy; // atomic
 800073e:	603c      	str	r4, [r7, #0]
		size_t restLen = len - noWrapLen;
		memcpy(logBuffer, str + noWrapLen, restLen);
		char *writePtrCopy = logBuffer + restLen;
		writePtr = writePtrCopy; // atomic
	}
}
 8000740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(writePtr, str, noWrapLen);
 8000744:	4601      	mov	r1, r0
 8000746:	462a      	mov	r2, r5
 8000748:	4618      	mov	r0, r3
		size_t restLen = len - noWrapLen;
 800074a:	1b64      	subs	r4, r4, r5
		memcpy(writePtr, str, noWrapLen);
 800074c:	f006 fac4 	bl	8006cd8 <memcpy>
		memcpy(logBuffer, str + noWrapLen, restLen);
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <AddLogCore+0x54>)
 8000752:	4622      	mov	r2, r4
 8000754:	1971      	adds	r1, r6, r5
 8000756:	4618      	mov	r0, r3
 8000758:	f006 fabe 	bl	8006cd8 <memcpy>
		char *writePtrCopy = logBuffer + restLen;
 800075c:	4404      	add	r4, r0
		writePtr = writePtrCopy; // atomic
 800075e:	e7ee      	b.n	800073e <AddLogCore+0x2e>
 8000760:	20000004 	.word	0x20000004
 8000764:	200001c4 	.word	0x200001c4
 8000768:	200029c3 	.word	0x200029c3

0800076c <TaskConsole_Run>:
	ready = true;
 800076c:	2201      	movs	r2, #1
 800076e:	490e      	ldr	r1, [pc, #56]	@ (80007a8 <TaskConsole_Run+0x3c>)
		HAL_StatusTypeDef keyPress = HAL_UART_Receive(&huart3, &rcvByte, 1, 10);
 8000770:	480e      	ldr	r0, [pc, #56]	@ (80007ac <TaskConsole_Run+0x40>)
{
 8000772:	b538      	push	{r3, r4, r5, lr}
		char *writePtrCopy = writePtr;
 8000774:	4d0e      	ldr	r5, [pc, #56]	@ (80007b0 <TaskConsole_Run+0x44>)
		HAL_StatusTypeDef keyPress = HAL_UART_Receive(&huart3, &rcvByte, 1, 10);
 8000776:	230a      	movs	r3, #10
	ready = true;
 8000778:	708a      	strb	r2, [r1, #2]
		HAL_StatusTypeDef keyPress = HAL_UART_Receive(&huart3, &rcvByte, 1, 10);
 800077a:	4411      	add	r1, r2
 800077c:	f002 fc23 	bl	8002fc6 <HAL_UART_Receive>
		if (writePtrCopy != readPtr) {
 8000780:	e9d5 4100 	ldrd	r4, r1, [r5]
 8000784:	42a1      	cmp	r1, r4
 8000786:	d006      	beq.n	8000796 <TaskConsole_Run+0x2a>
			if (writePtrCopy > readPtr) {
 8000788:	d206      	bcs.n	8000798 <TaskConsole_Run+0x2c>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t*)logBuffer, writePtrCopy - logBuffer);
 800078a:	1a62      	subs	r2, r4, r1
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <TaskConsole_Run+0x40>)
 800078e:	b292      	uxth	r2, r2
 8000790:	f002 f9ca 	bl	8002b28 <HAL_UART_Transmit_DMA>
			readPtr = writePtrCopy;
 8000794:	606c      	str	r4, [r5, #4]
}
 8000796:	bd38      	pop	{r3, r4, r5, pc}
				HAL_UART_Transmit_DMA(&huart3, (uint8_t*)readPtr, endPtr - readPtr + 1);
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <TaskConsole_Run+0x48>)
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <TaskConsole_Run+0x40>)
 800079c:	1a52      	subs	r2, r2, r1
 800079e:	b292      	uxth	r2, r2
 80007a0:	f002 f9c2 	bl	8002b28 <HAL_UART_Transmit_DMA>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t*)logBuffer, writePtrCopy - logBuffer);
 80007a4:	4904      	ldr	r1, [pc, #16]	@ (80007b8 <TaskConsole_Run+0x4c>)
 80007a6:	e7f0      	b.n	800078a <TaskConsole_Run+0x1e>
 80007a8:	200001c1 	.word	0x200001c1
 80007ac:	200029c8 	.word	0x200029c8
 80007b0:	20000004 	.word	0x20000004
 80007b4:	200029c4 	.word	0x200029c4
 80007b8:	200001c4 	.word	0x200001c4

080007bc <TaskConsole_AddLog>:

void TaskConsole_AddLog(const LogClient_t logClient, const char* str)
{
 80007bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80007be:	4606      	mov	r6, r0
	if (str == NULL) return;
 80007c0:	460c      	mov	r4, r1
 80007c2:	b199      	cbz	r1, 80007ec <TaskConsole_AddLog+0x30>
	size_t lenStr = strlen(str);
 80007c4:	4608      	mov	r0, r1
 80007c6:	f7ff fd3b 	bl	8000240 <strlen>

	size_t lenPrefix;
	char* prefix = LogMakePrefix(logClient, &lenPrefix);
 80007ca:	a901      	add	r1, sp, #4
	size_t lenStr = strlen(str);
 80007cc:	4605      	mov	r5, r0
	char* prefix = LogMakePrefix(logClient, &lenPrefix);
 80007ce:	4630      	mov	r0, r6
 80007d0:	f7ff ff62 	bl	8000698 <LogMakePrefix>

	size_t len = lenPrefix + lenStr + 1;
 80007d4:	9901      	ldr	r1, [sp, #4]
 80007d6:	1c4b      	adds	r3, r1, #1
 80007d8:	442b      	add	r3, r5
	if (len > LOG_BUFF_SIZE) return;
 80007da:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80007de:	d805      	bhi.n	80007ec <TaskConsole_AddLog+0x30>

	// osSemaphoreAcquire(LogSemInstance, 0);
		AddLogCore(prefix, lenPrefix);
 80007e0:	f7ff ff96 	bl	8000710 <AddLogCore>
		AddLogCore(str, lenStr + 1);
 80007e4:	1c69      	adds	r1, r5, #1
 80007e6:	4620      	mov	r0, r4
 80007e8:	f7ff ff92 	bl	8000710 <AddLogCore>
	// osSemaphoreRelease(LogSemInstance);
}
 80007ec:	b002      	add	sp, #8
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{  
  switch(id)
 80007f0:	2902      	cmp	r1, #2
{  
 80007f2:	b510      	push	{r4, lr}
  switch(id)
 80007f4:	d011      	beq.n	800081a <USBH_UserProcess+0x2a>
 80007f6:	2905      	cmp	r1, #5
 80007f8:	d112      	bne.n	8000820 <USBH_UserProcess+0x30>
  { 
  case HOST_USER_SELECT_CONFIGURATION:
    break;
    
  case HOST_USER_DISCONNECTION:
    AppliState = APPLICATION_IDLE;
 80007fa:	2400      	movs	r4, #0
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <USBH_UserProcess+0x34>)
    BSP_LED_Off(LED_GREEN); 
 80007fe:	4620      	mov	r0, r4
    AppliState = APPLICATION_IDLE;
 8000800:	701c      	strb	r4, [r3, #0]
    BSP_LED_Off(LED_GREEN); 
 8000802:	f000 fb3b 	bl	8000e7c <BSP_LED_Off>
    BSP_LED_Off(LED_RED);      
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fb38 	bl	8000e7c <BSP_LED_Off>
    f_mount(NULL, (TCHAR const*)"", 0);      
 800080c:	4622      	mov	r2, r4
 800080e:	4620      	mov	r0, r4
 8000810:	4905      	ldr	r1, [pc, #20]	@ (8000828 <USBH_UserProcess+0x38>)
    break;
    
  default:
    break;
  }
}
 8000812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f_mount(NULL, (TCHAR const*)"", 0);      
 8000816:	f004 b9ed 	b.w	8004bf4 <f_mount>
    AppliState = APPLICATION_START;
 800081a:	4b02      	ldr	r3, [pc, #8]	@ (8000824 <USBH_UserProcess+0x34>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
}
 8000820:	bd10      	pop	{r4, pc}
 8000822:	bf00      	nop
 8000824:	200029c4 	.word	0x200029c4
 8000828:	0800791f 	.word	0x0800791f

0800082c <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* Turn LED_RED on */
  BSP_LED_On(LED_RED);
 800082c:	2002      	movs	r0, #2
{
 800082e:	b508      	push	{r3, lr}
  BSP_LED_On(LED_RED);
 8000830:	f000 fb16 	bl	8000e60 <BSP_LED_On>
  while(1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <main>:
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0b8      	sub	sp, #224	@ 0xe0
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800083c:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 800083e:	f000 fc15 	bl	800106c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000842:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a814      	add	r0, sp, #80	@ 0x50
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000846:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800084a:	f248 731f 	movw	r3, #34591	@ 0x871f
 800084e:	e9cd 4315 	strd	r4, r3, [sp, #84]	@ 0x54
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000852:	f240 1301 	movw	r3, #257	@ 0x101
 8000856:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	f000 fc26 	bl	80010a8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800085c:	2004      	movs	r0, #4
 800085e:	f000 fc13 	bl	8001088 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000866:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800086a:	4a93      	ldr	r2, [pc, #588]	@ (8000ab8 <main+0x280>)
 800086c:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000874:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000878:	6953      	ldr	r3, [r2, #20]
 800087a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000888:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000890:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000894:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000898:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800089c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008a0:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008a6:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008ac:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ae:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008b2:	d2f9      	bcs.n	80008a8 <main+0x70>
    } while(sets-- != 0U);
 80008b4:	3b20      	subs	r3, #32
 80008b6:	f113 0f20 	cmn.w	r3, #32
 80008ba:	d1f2      	bne.n	80008a2 <main+0x6a>
 80008bc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c0:	6953      	ldr	r3, [r2, #20]
 80008c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008c6:	6153      	str	r3, [r2, #20]
 80008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80008d0:	f000 fb2c 	bl	8000f2c <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d4:	2601      	movs	r6, #1
 80008d6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80008da:	2708      	movs	r7, #8
  RCC_OscInitStruct.PLL.PLLR = 7;
 80008dc:	2407      	movs	r4, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e0:	e9cd 6307 	strd	r6, r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008e4:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008e8:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ee:	9611      	str	r6, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	e9cd 630d 	strd	r6, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80008f4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80008f8:	e9cd 730f 	strd	r7, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80008fc:	2309      	movs	r3, #9
 80008fe:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f001 fb8b 	bl	800201c <HAL_RCC_OscConfig>
 8000906:	b100      	cbz	r0, 800090a <main+0xd2>
    while(1) {};
 8000908:	e7fe      	b.n	8000908 <main+0xd0>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800090a:	f001 fb4f 	bl	8001fac <HAL_PWREx_EnableOverDrive>
 800090e:	b100      	cbz	r0, 8000912 <main+0xda>
    while(1) {};
 8000910:	e7fe      	b.n	8000910 <main+0xd8>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000912:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 8000916:	a814      	add	r0, sp, #80	@ 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000918:	9314      	str	r3, [sp, #80]	@ 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800091a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800091e:	9333      	str	r3, [sp, #204]	@ 0xcc
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000920:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 7; 
 8000924:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000928:	2303      	movs	r3, #3
 800092a:	931c      	str	r3, [sp, #112]	@ 0x70
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800092c:	f001 fe26 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000930:	b100      	cbz	r0, 8000934 <main+0xfc>
    while(1) {};
 8000932:	e7fe      	b.n	8000932 <main+0xfa>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000934:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000936:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800093c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	e9cd 3602 	strd	r3, r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000946:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800094a:	4621      	mov	r1, r4
 800094c:	f001 fd58 	bl	8002400 <HAL_RCC_ClockConfig>
 8000950:	4605      	mov	r5, r0
 8000952:	b100      	cbz	r0, 8000956 <main+0x11e>
    while(1) {};
 8000954:	e7fe      	b.n	8000954 <main+0x11c>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	4b59      	ldr	r3, [pc, #356]	@ (8000abc <main+0x284>)
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000958:	2105      	movs	r1, #5
  huart3.Instance = USART3;
 800095a:	4c59      	ldr	r4, [pc, #356]	@ (8000ac0 <main+0x288>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800095e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000962:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000964:	4602      	mov	r2, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000968:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000972:	f000 fb27 	bl	8000fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000976:	200e      	movs	r0, #14
 8000978:	f000 fb56 	bl	8001028 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 800097c:	4a51      	ldr	r2, [pc, #324]	@ (8000ac4 <main+0x28c>)
 800097e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	1d20      	adds	r0, r4, #4
  huart3.Init.Parity = UART_PARITY_NONE;
 8000984:	6165      	str	r5, [r4, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	62a5      	str	r5, [r4, #40]	@ 0x28
  huart3.Init.BaudRate = 115200;
 8000988:	e9c4 2301 	strd	r2, r3, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098e:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	e9c4 3506 	strd	r3, r5, [r4, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	f002 fbd9 	bl	8003150 <HAL_UART_Init>
 800099e:	4605      	mov	r5, r0
 80009a0:	b108      	cbz	r0, 80009a6 <main+0x16e>
    Error_Handler();
 80009a2:	f7ff ff43 	bl	800082c <Error_Handler>
  Log(LC_Main_c, "start...\r\n");
 80009a6:	4948      	ldr	r1, [pc, #288]	@ (8000ac8 <main+0x290>)
 80009a8:	f7ff fe5e 	bl	8000668 <Log>
  BSP_LED_Init(LED_GREEN);
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 fa27 	bl	8000e00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);  
 80009b2:	4630      	mov	r0, r6
 80009b4:	f000 fa24 	bl	8000e00 <BSP_LED_Init>
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80009b8:	f104 018c 	add.w	r1, r4, #140	@ 0x8c
 80009bc:	4843      	ldr	r0, [pc, #268]	@ (8000acc <main+0x294>)
 80009be:	f004 fc53 	bl	8005268 <FATFS_LinkDriver>
 80009c2:	4602      	mov	r2, r0
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d175      	bne.n	8000ab4 <main+0x27c>
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80009c8:	4941      	ldr	r1, [pc, #260]	@ (8000ad0 <main+0x298>)
 80009ca:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80009ce:	f005 faa8 	bl	8005f22 <USBH_Init>
      sprintf(sMsg, "message %d\r\n", ctr++);
 80009d2:	4f40      	ldr	r7, [pc, #256]	@ (8000ad4 <main+0x29c>)
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80009d4:	4940      	ldr	r1, [pc, #256]	@ (8000ad8 <main+0x2a0>)
 80009d6:	f104 0090 	add.w	r0, r4, #144	@ 0x90
      sprintf(sMsg, "message %d\r\n", ctr++);
 80009da:	f204 566c 	addw	r6, r4, #1388	@ 0x56c
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80009de:	f005 fabf 	bl	8005f60 <USBH_RegisterClass>
    USBH_Start(&hUSBHost);
 80009e2:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80009e6:	f005 faed 	bl	8005fc4 <USBH_Start>
      sprintf(sMsg, "message %d\r\n", ctr++);
 80009ea:	f8d4 2568 	ldr.w	r2, [r4, #1384]	@ 0x568
 80009ee:	4639      	mov	r1, r7
 80009f0:	4630      	mov	r0, r6
 80009f2:	1c53      	adds	r3, r2, #1
 80009f4:	f8c4 3568 	str.w	r3, [r4, #1384]	@ 0x568
 80009f8:	f006 f90a 	bl	8006c10 <siprintf>
      Log(LC_Main_c, sMsg);
 80009fc:	4631      	mov	r1, r6
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe32 	bl	8000668 <Log>
	  TaskConsole_Run(0L);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff feb1 	bl	800076c <TaskConsole_Run>
      USBH_Process(&hUSBHost);
 8000a0a:	4834      	ldr	r0, [pc, #208]	@ (8000adc <main+0x2a4>)
 8000a0c:	f005 fae4 	bl	8005fd8 <USBH_Process>
      switch(AppliState)
 8000a10:	7823      	ldrb	r3, [r4, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d1e9      	bne.n	80009ea <main+0x1b2>
  uint8_t wtext[] = "This is STM32 working with FatFs (modified)"; /* File write buffer */
 8000a16:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <main+0x2a8>)
 8000a18:	aa07      	add	r2, sp, #28
 8000a1a:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	3308      	adds	r3, #8
 8000a22:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000a26:	4615      	mov	r5, r2
 8000a28:	4563      	cmp	r3, ip
 8000a2a:	c503      	stmia	r5!, {r0, r1}
 8000a2c:	462a      	mov	r2, r5
 8000a2e:	d1f6      	bne.n	8000a1e <main+0x1e6>
 8000a30:	6818      	ldr	r0, [r3, #0]
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000a32:	2200      	movs	r2, #0
 8000a34:	492b      	ldr	r1, [pc, #172]	@ (8000ae4 <main+0x2ac>)
  uint8_t wtext[] = "This is STM32 working with FatFs (modified)"; /* File write buffer */
 8000a36:	6028      	str	r0, [r5, #0]
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000a38:	f501 60ac 	add.w	r0, r1, #1376	@ 0x560
 8000a3c:	f004 f8da 	bl	8004bf4 <f_mount>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d1ae      	bne.n	80009a2 <main+0x16a>
    if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) 
 8000a44:	220a      	movs	r2, #10
 8000a46:	4928      	ldr	r1, [pc, #160]	@ (8000ae8 <main+0x2b0>)
 8000a48:	4828      	ldr	r0, [pc, #160]	@ (8000aec <main+0x2b4>)
 8000a4a:	f004 f8ff 	bl	8004c4c <f_open>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1a7      	bne.n	80009a2 <main+0x16a>
      res = f_write(&MyFile, wtext, sizeof(wtext)-1, (void *)&byteswritten);
 8000a52:	ab01      	add	r3, sp, #4
 8000a54:	222b      	movs	r2, #43	@ 0x2b
 8000a56:	a907      	add	r1, sp, #28
 8000a58:	4824      	ldr	r0, [pc, #144]	@ (8000aec <main+0x2b4>)
 8000a5a:	f004 fabd 	bl	8004fd8 <f_write>
      if((byteswritten == 0) || (res != FR_OK))
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d09e      	beq.n	80009a2 <main+0x16a>
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d19c      	bne.n	80009a2 <main+0x16a>
        f_close(&MyFile);
 8000a68:	4820      	ldr	r0, [pc, #128]	@ (8000aec <main+0x2b4>)
 8000a6a:	f004 fbca 	bl	8005202 <f_close>
        if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	491d      	ldr	r1, [pc, #116]	@ (8000ae8 <main+0x2b0>)
 8000a72:	481e      	ldr	r0, [pc, #120]	@ (8000aec <main+0x2b4>)
 8000a74:	f004 f8ea 	bl	8004c4c <f_open>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d192      	bne.n	80009a2 <main+0x16a>
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000a7c:	ab02      	add	r3, sp, #8
 8000a7e:	2264      	movs	r2, #100	@ 0x64
 8000a80:	a914      	add	r1, sp, #80	@ 0x50
 8000a82:	481a      	ldr	r0, [pc, #104]	@ (8000aec <main+0x2b4>)
 8000a84:	f004 f9f2 	bl	8004e6c <f_read>
          if((bytesread == 0) || (res != FR_OK))
 8000a88:	9b02      	ldr	r3, [sp, #8]
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000a8a:	4605      	mov	r5, r0
          if((bytesread == 0) || (res != FR_OK))
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d088      	beq.n	80009a2 <main+0x16a>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d186      	bne.n	80009a2 <main+0x16a>
            f_close(&MyFile);
 8000a94:	4815      	ldr	r0, [pc, #84]	@ (8000aec <main+0x2b4>)
 8000a96:	f004 fbb4 	bl	8005202 <f_close>
            if((bytesread != byteswritten))
 8000a9a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	f47f af7f 	bne.w	80009a2 <main+0x16a>
              BSP_LED_On(LED_GREEN);
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 f9db 	bl	8000e60 <BSP_LED_On>
  FATFS_UnLinkDriver(USBDISKPath);
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <main+0x2ac>)
 8000aac:	f004 fbf8 	bl	80052a0 <FATFS_UnLinkDriver>
        AppliState = APPLICATION_IDLE;
 8000ab0:	7025      	strb	r5, [r4, #0]
        break;
 8000ab2:	e79a      	b.n	80009ea <main+0x1b2>
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <main+0x27c>
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	200029c4 	.word	0x200029c4
 8000ac4:	40004800 	.word	0x40004800
 8000ac8:	08007915 	.word	0x08007915
 8000acc:	08007504 	.word	0x08007504
 8000ad0:	080007f1 	.word	0x080007f1
 8000ad4:	08007920 	.word	0x08007920
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	20002a54 	.word	0x20002a54
 8000ae0:	08007937 	.word	0x08007937
 8000ae4:	20002a50 	.word	0x20002a50
 8000ae8:	0800792d 	.word	0x0800792d
 8000aec:	200031e4 	.word	0x200031e4

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b530      	push	{r4, r5, lr}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	2214      	movs	r2, #20
 8000af8:	2100      	movs	r1, #0
 8000afa:	a803      	add	r0, sp, #12
 8000afc:	f006 f8a8 	bl	8006c50 <memset>
  if(huart->Instance==USART3)
 8000b00:	682a      	ldr	r2, [r5, #0]
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <HAL_UART_MspInit+0xa4>)
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d143      	bne.n	8000b90 <HAL_UART_MspInit+0xa0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b08:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b0c:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	4822      	ldr	r0, [pc, #136]	@ (8000b98 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000b12:	4c22      	ldr	r4, [pc, #136]	@ (8000b9c <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b26:	f042 0208 	orr.w	r2, r2, #8
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	a903      	add	r1, sp, #12
 8000b48:	f000 fbac 	bl	80012a4 <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <HAL_UART_MspInit+0xb0>)
 8000b4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b52:	f04f 0c40 	mov.w	ip, #64	@ 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000b5a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000b60:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b62:	e9c4 c302 	strd	ip, r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b66:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000b6a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6e:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000b72:	f000 fadb 	bl	800112c <HAL_DMA_Init>
 8000b76:	b108      	cbz	r0, 8000b7c <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8000b78:	f7ff fe58 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b7c:	2027      	movs	r0, #39	@ 0x27
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000b82:	672c      	str	r4, [r5, #112]	@ 0x70
 8000b84:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b86:	f000 fa1d 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b8a:	2027      	movs	r0, #39	@ 0x27
 8000b8c:	f000 fa4c 	bl	8001028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b90:	b009      	add	sp, #36	@ 0x24
 8000b92:	bd30      	pop	{r4, r5, pc}
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	20003414 	.word	0x20003414
 8000ba0:	40026058 	.word	0x40026058

08000ba4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000ba4:	4770      	bx	lr

08000ba6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler>

08000ba8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler>

08000baa <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler>

08000bac <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler>

08000bae <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000bb4:	f000 b9d0 	b.w	8000f58 <HAL_IncTick>

08000bb8 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_HCD_IRQHandler(&hhcd);
 8000bb8:	4801      	ldr	r0, [pc, #4]	@ (8000bc0 <OTG_FS_IRQHandler+0x8>)
 8000bba:	f000 bd13 	b.w	80015e4 <HAL_HCD_IRQHandler>
 8000bbe:	bf00      	nop
 8000bc0:	20003474 	.word	0x20003474

08000bc4 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 8000bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4c2b      	ldr	r4, [pc, #172]	@ (8000c78 <HAL_HCD_MspInit+0xb4>)
{
 8000bca:	b08a      	sub	sp, #40	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
  
  /*USB DM and DP */    
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000bd0:	4f2a      	ldr	r7, [pc, #168]	@ (8000c7c <HAL_HCD_MspInit+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000bd4:	2500      	movs	r5, #0
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd6:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000bda:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000be0:	4638      	mov	r0, r7
  
  /*USB ID */    
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000be6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf6:	6323      	str	r3, [r4, #48]	@ 0x30
 8000bf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bfa:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e9cd 5307 	strd	r5, r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000c12:	f000 fb47 	bl	80012a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000c1c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c20:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000c28:	a905      	add	r1, sp, #20
 8000c2a:	f000 fb3b 	bl	80012a4 <HAL_GPIO_Init>
  
  /* Configure POWER_SWITCH IO pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c2e:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct); 
 8000c30:	a905      	add	r1, sp, #20
 8000c32:	4813      	ldr	r0, [pc, #76]	@ (8000c80 <HAL_HCD_MspInit+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	e9cd 3605 	strd	r3, r6, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct); 
 8000c3a:	f000 fb33 	bl	80012a4 <HAL_GPIO_Init>
  
  /* Enable USB FS Clocks */ 
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  
  /* Set USBFS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000c40:	462a      	mov	r2, r5
 8000c42:	2106      	movs	r1, #6
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000c48:	2043      	movs	r0, #67	@ 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c52:	9303      	str	r3, [sp, #12]
 8000c54:	9b03      	ldr	r3, [sp, #12]
 8000c56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6463      	str	r3, [r4, #68]	@ 0x44
 8000c5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c64:	9304      	str	r3, [sp, #16]
 8000c66:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000c68:	f000 f9ac 	bl	8000fc4 <HAL_NVIC_SetPriority>
  
  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000c6c:	2043      	movs	r0, #67	@ 0x43
 8000c6e:	f000 f9db 	bl	8001028 <HAL_NVIC_EnableIRQ>
}
 8000c72:	b00a      	add	sp, #40	@ 0x28
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40021800 	.word	0x40021800

08000c84 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 8000c84:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8000c88:	f005 bb8d 	b.w	80063a6 <USBH_LL_IncTimer>

08000c8c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8000c8c:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8000c90:	f005 bb9f 	b.w	80063d2 <USBH_LL_Connect>

08000c94 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8000c94:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8000c98:	f005 bba5 	b.w	80063e6 <USBH_LL_Disconnect>

08000c9c <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8000c9c:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8000ca0:	f005 bb8f 	b.w	80063c2 <USBH_LL_PortEnabled>

08000ca4 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8000ca4:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8000ca8:	f005 bb8f 	b.w	80063ca <USBH_LL_PortDisabled>

08000cac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */  
}
 8000cac:	4770      	bx	lr
	...

08000cb0 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{ 
 8000cb0:	b570      	push	{r4, r5, r6, lr}
  /* Set the LL Driver parameters */
  hhcd.Instance = USB_OTG_FS;
 8000cb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000cb6:	4c0f      	ldr	r4, [pc, #60]	@ (8000cf4 <USBH_LL_Init+0x44>)
  hhcd.Init.dma_enable = 0;
  hhcd.Init.low_power_enable = 0;
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
 8000cb8:	2600      	movs	r6, #0
{ 
 8000cba:	4605      	mov	r5, r0
  hhcd.Instance = USB_OTG_FS;
 8000cbc:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
 8000cbe:	230b      	movs	r3, #11
  hhcd.Init.lpm_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
 8000cc0:	f8c4 03dc 	str.w	r0, [r4, #988]	@ 0x3dc
  hhcd.Init.Host_channels = 11; 
 8000cc4:	7163      	strb	r3, [r4, #5]
  hhcd.Init.dma_enable = 0;
 8000cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  phost->pData = &hhcd;
 8000cca:	f8c0 44d0 	str.w	r4, [r0, #1232]	@ 0x4d0
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
 8000cce:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
 8000cd0:	80e3      	strh	r3, [r4, #6]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8000cd2:	2302      	movs	r3, #2
  hhcd.Init.vbus_sensing_enable = 0;
 8000cd4:	73a6      	strb	r6, [r4, #14]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8000cd6:	7263      	strb	r3, [r4, #9]
  hhcd.Init.Sof_enable = 0;
 8000cd8:	8166      	strh	r6, [r4, #10]
  hhcd.Init.lpm_enable = 0;
 8000cda:	7326      	strb	r6, [r4, #12]
  HAL_HCD_Init(&hhcd);
 8000cdc:	f000 fbdd 	bl	800149a <HAL_HCD_Init>
  
  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd));
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	f001 f90a 	bl	8001efa <HAL_HCD_GetCurrentFrame>
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f005 fb59 	bl	80063a0 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 8000cee:	4630      	mov	r0, r6
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20003474 	.word	0x20003474

08000cf8 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8000cf8:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 8000cfa:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000cfe:	f001 f8c7 	bl	8001e90 <HAL_HCD_Start>
  return USBH_OK; 
}
 8000d02:	2000      	movs	r0, #0
 8000d04:	bd08      	pop	{r3, pc}

08000d06 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8000d06:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8000d08:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d0c:	f001 f8d5 	bl	8001eba <HAL_HCD_Stop>
  return USBH_OK; 
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	bd08      	pop	{r3, pc}

08000d14 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8000d14:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8000d16:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d1a:	f001 f8f1 	bl	8001f00 <HAL_HCD_GetCurrentSpeed>
 8000d1e:	b118      	cbz	r0, 8000d28 <USBH_LL_GetSpeed+0x14>
 8000d20:	2802      	cmp	r0, #2
 8000d22:	bf0c      	ite	eq
 8000d24:	2002      	moveq	r0, #2
 8000d26:	2001      	movne	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
 8000d28:	bd08      	pop	{r3, pc}

08000d2a <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 8000d2a:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 8000d2c:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d30:	f001 f8d5 	bl	8001ede <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	bd08      	pop	{r3, pc}

08000d38 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8000d38:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d3c:	f001 b8d8 	b.w	8001ef0 <HAL_HCD_HC_GetXferCount>

08000d40 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8000d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 8000d42:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000d46:	9402      	str	r4, [sp, #8]
 8000d48:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8000d4c:	9401      	str	r4, [sp, #4]
 8000d4e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000d52:	9400      	str	r4, [sp, #0]
 8000d54:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d58:	f001 f8dc 	bl	8001f14 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd10      	pop	{r4, pc}

08000d62 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8000d62:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
 8000d64:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d68:	f000 fb85 	bl	8001476 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	bd08      	pop	{r3, pc}

08000d70 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
 8000d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
 8000d72:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8000d76:	9403      	str	r4, [sp, #12]
 8000d78:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000d7c:	9402      	str	r4, [sp, #8]
 8000d7e:	9c07      	ldr	r4, [sp, #28]
 8000d80:	9401      	str	r4, [sp, #4]
 8000d82:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000d86:	9400      	str	r4, [sp, #0]
 8000d88:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d8c:	f000 fbc2 	bl	8001514 <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
 8000d90:	2000      	movs	r0, #0
 8000d92:	b004      	add	sp, #16
 8000d94:	bd10      	pop	{r4, pc}

08000d96 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8000d96:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	@ 0x4d0
 8000d9a:	f001 b8a3 	b.w	8001ee4 <HAL_HCD_HC_GetURBState>
	...

08000da0 <USBH_LL_DriverVBUS>:
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
  if(state == 0)
 8000da0:	460a      	mov	r2, r1
{
 8000da2:	b508      	push	{r3, lr}
  if(state == 0)
 8000da4:	b941      	cbnz	r1, 8000db8 <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
  }
  else
  {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <USBH_LL_DriverVBUS+0x1c>)
 8000daa:	f000 fb5f 	bl	800146c <HAL_GPIO_WritePin>
  }
  HAL_Delay(200);
 8000dae:	20c8      	movs	r0, #200	@ 0xc8
 8000db0:	f000 f8e4 	bl	8000f7c <HAL_Delay>
  return USBH_OK;  
}
 8000db4:	2000      	movs	r0, #0
 8000db6:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	e7f4      	b.n	8000da6 <USBH_LL_DriverVBUS+0x6>
 8000dbc:	40021800 	.word	0x40021800

08000dc0 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <USBH_LL_SetToggle+0x1c>)
 8000dc2:	203c      	movs	r0, #60	@ 0x3c
 8000dc4:	fb00 3101 	mla	r1, r0, r1, r3
 8000dc8:	7dcb      	ldrb	r3, [r1, #23]
 8000dca:	b11b      	cbz	r3, 8000dd4 <USBH_LL_SetToggle+0x14>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 8000dcc:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
 8000dd4:	f881 203d 	strb.w	r2, [r1, #61]	@ 0x3d
 8000dd8:	e7fa      	b.n	8000dd0 <USBH_LL_SetToggle+0x10>
 8000dda:	bf00      	nop
 8000ddc:	20003474 	.word	0x20003474

08000de0 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <USBH_LL_GetToggle+0x18>)
 8000de2:	223c      	movs	r2, #60	@ 0x3c
 8000de4:	fb02 3101 	mla	r1, r2, r1, r3
 8000de8:	7dcb      	ldrb	r3, [r1, #23]
 8000dea:	b113      	cbz	r3, 8000df2 <USBH_LL_GetToggle+0x12>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 8000dec:	f891 003c 	ldrb.w	r0, [r1, #60]	@ 0x3c
 8000df0:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 8000df2:	f891 003d 	ldrb.w	r0, [r1, #61]	@ 0x3d
  }
  return toggle; 
}
 8000df6:	4770      	bx	lr
 8000df8:	20003474 	.word	0x20003474

08000dfc <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
 8000dfc:	f000 b8be 	b.w	8000f7c <HAL_Delay>

08000e00 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <BSP_LED_Init+0x54>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e04:	f042 0202 	orr.w	r2, r2, #2
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e0a:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8000e0c:	b089      	sub	sp, #36	@ 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	4604      	mov	r4, r0
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	b9c8      	cbnz	r0, 8000e4c <BSP_LED_Init+0x4c>
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e20:	4d0e      	ldr	r5, [pc, #56]	@ (8000e5c <BSP_LED_Init+0x5c>)
 8000e22:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e24:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e2a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e2e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e38:	f000 fa34 	bl	80012a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e3c:	463a      	mov	r2, r7
 8000e3e:	4631      	mov	r1, r6
 8000e40:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000e44:	f000 fb12 	bl	800146c <HAL_GPIO_WritePin>
}
 8000e48:	b009      	add	sp, #36	@ 0x24
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
 8000e50:	e7e4      	b.n	8000e1c <BSP_LED_Init+0x1c>
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	08007430 	.word	0x08007430
 8000e5c:	2000000c 	.word	0x2000000c

08000e60 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <BSP_LED_On+0x14>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <BSP_LED_On+0x18>)
 8000e6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000e6e:	f000 bafd 	b.w	800146c <HAL_GPIO_WritePin>
 8000e72:	bf00      	nop
 8000e74:	08007430 	.word	0x08007430
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <BSP_LED_Off+0x14>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <BSP_LED_Off+0x18>)
 8000e86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000e8a:	f000 baef 	b.w	800146c <HAL_GPIO_WritePin>
 8000e8e:	bf00      	nop
 8000e90:	08007430 	.word	0x08007430
 8000e94:	2000000c 	.word	0x2000000c

08000e98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	490f      	ldr	r1, [pc, #60]	@ (8000ed8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e9a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <SystemInit+0x44>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000eb2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000eba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ebe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <SystemInit+0x48>)
 8000ec2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000eca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ecc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ece:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ed2:	608b      	str	r3, [r1, #8]
#endif
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	24003010 	.word	0x24003010

08000ee4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eea:	4e0e      	ldr	r6, [pc, #56]	@ (8000f24 <HAL_InitTick+0x3c>)
 8000eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8000ef0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef2:	7832      	ldrb	r2, [r6, #0]
 8000ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <HAL_InitTick+0x40>)
 8000efa:	6810      	ldr	r0, [r2, #0]
 8000efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f00:	f000 f8a0 	bl	8001044 <HAL_SYSTICK_Config>
 8000f04:	4604      	mov	r4, r0
 8000f06:	b950      	cbnz	r0, 8000f1e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	2d0f      	cmp	r5, #15
 8000f0a:	d808      	bhi.n	8000f1e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4629      	mov	r1, r5
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f14:	f000 f856 	bl	8000fc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4620      	mov	r0, r4
 8000f1a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000f1e:	2001      	movs	r0, #1
 8000f20:	e7fc      	b.n	8000f1c <HAL_InitTick+0x34>
 8000f22:	bf00      	nop
 8000f24:	20000020 	.word	0x20000020
 8000f28:	2000001c 	.word	0x2000001c

08000f2c <HAL_Init>:
{
 8000f2c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f38:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f40:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	f000 f82d 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f7ff ffce 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f4c:	f7ff ffca 	bl	8000ee4 <HAL_MspInit>
}
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f58:	4a03      	ldr	r2, [pc, #12]	@ (8000f68 <HAL_IncTick+0x10>)
 8000f5a:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <HAL_IncTick+0x14>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	440b      	add	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20003854 	.word	0x20003854
 8000f6c:	20000020 	.word	0x20000020

08000f70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f70:	4b01      	ldr	r3, [pc, #4]	@ (8000f78 <HAL_GetTick+0x8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20003854 	.word	0x20003854

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff6 	bl	8000f70 <HAL_GetTick>
 8000f84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f88:	bf1e      	ittt	ne
 8000f8a:	4b04      	ldrne	r3, [pc, #16]	@ (8000f9c <HAL_Delay+0x20>)
 8000f8c:	781b      	ldrbne	r3, [r3, #0]
 8000f8e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	1b43      	subs	r3, r0, r5
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d3fa      	bcc.n	8000f90 <HAL_Delay+0x14>
  {
  }
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000020 	.word	0x20000020

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000fae:	0412      	lsls	r2, r2, #16
 8000fb0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000fbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b530      	push	{r4, r5, lr}
 8000fc8:	68dc      	ldr	r4, [r3, #12]
 8000fca:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	bf28      	it	cs
 8000fd8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe0:	bf8c      	ite	hi
 8000fe2:	3c03      	subhi	r4, #3
 8000fe4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000fea:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	fa03 f304 	lsl.w	r3, r3, r4
 8000ffc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001004:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001006:	db06      	blt.n	8001016 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800100c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001010:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001014:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	f000 000f 	and.w	r0, r0, #15
 800101a:	4a02      	ldr	r2, [pc, #8]	@ (8001024 <HAL_NVIC_SetPriority+0x60>)
 800101c:	5413      	strb	r3, [r2, r0]
 800101e:	e7f9      	b.n	8001014 <HAL_NVIC_SetPriority+0x50>
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	e000ed14 	.word	0xe000ed14

08001028 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001028:	2800      	cmp	r0, #0
 800102a:	db07      	blt.n	800103c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102c:	0941      	lsrs	r1, r0, #5
 800102e:	2301      	movs	r3, #1
 8001030:	f000 001f 	and.w	r0, r0, #31
 8001034:	4a02      	ldr	r2, [pc, #8]	@ (8001040 <HAL_NVIC_EnableIRQ+0x18>)
 8001036:	4083      	lsls	r3, r0
 8001038:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	3801      	subs	r0, #1
 8001046:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800104a:	d20b      	bcs.n	8001064 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <HAL_SYSTICK_Config+0x24>)
 8001052:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001054:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001056:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001060:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001062:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001064:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800106c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <HAL_MPU_Disable+0x18>)
 8001072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001074:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800107a:	2200      	movs	r2, #0
 800107c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MPU_Enable+0x1c>)
 800108a:	f040 0001 	orr.w	r0, r0, #1
 800108e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001094:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800109e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010a8:	7843      	ldrb	r3, [r0, #1]
 80010aa:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <HAL_MPU_ConfigRegion+0x54>)
 80010ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010b0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010bc:	6843      	ldr	r3, [r0, #4]
 80010be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010c2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010cc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ce:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010d0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010d2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010d6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010d8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010dc:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010e2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010e8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010ee:	7a01      	ldrb	r1, [r0, #8]
 80010f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010f4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001100:	6803      	ldr	r3, [r0, #0]
{
 8001102:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001104:	2018      	movs	r0, #24
 8001106:	b2d9      	uxtb	r1, r3
 8001108:	3910      	subs	r1, #16
 800110a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 800110e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001110:	4c05      	ldr	r4, [pc, #20]	@ (8001128 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001112:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001114:	5c20      	ldrb	r0, [r4, r0]
 8001116:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001118:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800111c:	f020 0003 	bic.w	r0, r0, #3
 8001120:	bf88      	it	hi
 8001122:	3004      	addhi	r0, #4
 8001124:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001126:	bd10      	pop	{r4, pc}
 8001128:	08007452 	.word	0x08007452

0800112c <HAL_DMA_Init>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ff1e 	bl	8000f70 <HAL_GetTick>
 8001134:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001136:	2c00      	cmp	r4, #0
 8001138:	d060      	beq.n	80011fc <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 800113a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800113c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800113e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001142:	2300      	movs	r3, #0
 8001144:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	07d8      	lsls	r0, r3, #31
 8001156:	d42e      	bmi.n	80011b6 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8001158:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800115a:	4832      	ldr	r0, [pc, #200]	@ (8001224 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800115e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001160:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001164:	432b      	orrs	r3, r5
 8001166:	68e5      	ldr	r5, [r4, #12]
 8001168:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	6925      	ldr	r5, [r4, #16]
 800116c:	432b      	orrs	r3, r5
 800116e:	6965      	ldr	r5, [r4, #20]
 8001170:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	69e5      	ldr	r5, [r4, #28]
 8001174:	430b      	orrs	r3, r1
 8001176:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	6a25      	ldr	r5, [r4, #32]
 800117a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800117e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001180:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001182:	bf02      	ittt	eq
 8001184:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8001188:	4335      	orreq	r5, r6
 800118a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800118e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001190:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001192:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001196:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800119a:	d135      	bne.n	8001208 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800119c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800119e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80011a0:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011a2:	b38d      	cbz	r5, 8001208 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011a4:	b991      	cbnz	r1, 80011cc <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 80011a6:	2801      	cmp	r0, #1
 80011a8:	d020      	beq.n	80011ec <HAL_DMA_Init+0xc0>
 80011aa:	f030 0102 	bics.w	r1, r0, #2
 80011ae:	d12b      	bne.n	8001208 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011b0:	01e9      	lsls	r1, r5, #7
 80011b2:	d529      	bpl.n	8001208 <HAL_DMA_Init+0xdc>
 80011b4:	e01d      	b.n	80011f2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b6:	f7ff fedb 	bl	8000f70 <HAL_GetTick>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	2805      	cmp	r0, #5
 80011be:	d9c7      	bls.n	8001150 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c4:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011cc:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80011d0:	d116      	bne.n	8001200 <HAL_DMA_Init+0xd4>
    switch (tmp)
 80011d2:	2803      	cmp	r0, #3
 80011d4:	d818      	bhi.n	8001208 <HAL_DMA_Init+0xdc>
 80011d6:	a101      	add	r1, pc, #4	@ (adr r1, 80011dc <HAL_DMA_Init+0xb0>)
 80011d8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80011dc:	080011f3 	.word	0x080011f3
 80011e0:	080011b1 	.word	0x080011b1
 80011e4:	080011f3 	.word	0x080011f3
 80011e8:	080011ed 	.word	0x080011ed
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011ec:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80011f0:	d10a      	bne.n	8001208 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011f2:	2340      	movs	r3, #64	@ 0x40
 80011f4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
 80011fe:	e7e4      	b.n	80011ca <HAL_DMA_Init+0x9e>
    switch (tmp)
 8001200:	2802      	cmp	r0, #2
 8001202:	d9f6      	bls.n	80011f2 <HAL_DMA_Init+0xc6>
 8001204:	2803      	cmp	r0, #3
 8001206:	d0d3      	beq.n	80011b0 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8001208:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff ff78 	bl	8001100 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001212:	233f      	movs	r3, #63	@ 0x3f
 8001214:	4093      	lsls	r3, r2
 8001216:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001218:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800121a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800121e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001222:	e7d2      	b.n	80011ca <HAL_DMA_Init+0x9e>
 8001224:	e010803f 	.word	0xe010803f

08001228 <HAL_DMA_Start_IT>:
{
 8001228:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800122a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800122e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001230:	2c01      	cmp	r4, #1
 8001232:	d034      	beq.n	800129e <HAL_DMA_Start_IT+0x76>
 8001234:	2401      	movs	r4, #1
 8001236:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800123a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800123e:	2c01      	cmp	r4, #1
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	d129      	bne.n	800129a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001246:	2502      	movs	r5, #2
 8001248:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124c:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800124e:	6804      	ldr	r4, [r0, #0]
 8001250:	6825      	ldr	r5, [r4, #0]
 8001252:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001256:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001258:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800125a:	6883      	ldr	r3, [r0, #8]
 800125c:	2b40      	cmp	r3, #64	@ 0x40
 800125e:	d119      	bne.n	8001294 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001260:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001262:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001264:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001266:	233f      	movs	r3, #63	@ 0x3f
 8001268:	4093      	lsls	r3, r2
 800126a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f043 0316 	orr.w	r3, r3, #22
 8001272:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001274:	6963      	ldr	r3, [r4, #20]
 8001276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800127c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800127e:	b11b      	cbz	r3, 8001288 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001288:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6023      	str	r3, [r4, #0]
}
 8001292:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001294:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001296:	60e2      	str	r2, [r4, #12]
 8001298:	e7e4      	b.n	8001264 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800129a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 800129e:	2002      	movs	r0, #2
 80012a0:	e7f7      	b.n	8001292 <HAL_DMA_Start_IT+0x6a>
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80012a8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8001468 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001460 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80012b0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80012b4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 80012ba:	43ac      	bics	r4, r5
 80012bc:	f040 80b7 	bne.w	800142e <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012c2:	2703      	movs	r7, #3
 80012c4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012cc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d2:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d6:	2f01      	cmp	r7, #1
 80012d8:	d834      	bhi.n	8001344 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 80012da:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012dc:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80012e0:	68cf      	ldr	r7, [r1, #12]
 80012e2:	fa07 f70e 	lsl.w	r7, r7, lr
 80012e6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80012ea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012ec:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ee:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80012f6:	409f      	lsls	r7, r3
 80012f8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80012fc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80012fe:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001300:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001302:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001306:	688f      	ldr	r7, [r1, #8]
 8001308:	fa07 f70e 	lsl.w	r7, r7, lr
 800130c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001310:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	d119      	bne.n	8001348 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001314:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001318:	f003 0a07 	and.w	sl, r3, #7
 800131c:	f04f 0b0f 	mov.w	fp, #15
 8001320:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001324:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001328:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800132c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001330:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001334:	690f      	ldr	r7, [r1, #16]
 8001336:	fa07 f70a 	lsl.w	r7, r7, sl
 800133a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800133e:	f8c8 7020 	str.w	r7, [r8, #32]
 8001342:	e001      	b.n	8001348 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	2c03      	cmp	r4, #3
 8001346:	d1da      	bne.n	80012fe <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001348:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800134a:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001352:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001356:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800135a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135c:	d067      	beq.n	800142e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001362:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001366:	f003 0c03 	and.w	ip, r3, #3
 800136a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001372:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001376:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800137e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001382:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001386:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800138e:	9401      	str	r4, [sp, #4]
 8001390:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001392:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001394:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001398:	4c32      	ldr	r4, [pc, #200]	@ (8001464 <HAL_GPIO_Init+0x1c0>)
 800139a:	42a0      	cmp	r0, r4
 800139c:	d04e      	beq.n	800143c <HAL_GPIO_Init+0x198>
 800139e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013a2:	42a0      	cmp	r0, r4
 80013a4:	d04c      	beq.n	8001440 <HAL_GPIO_Init+0x19c>
 80013a6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013aa:	42a0      	cmp	r0, r4
 80013ac:	d04a      	beq.n	8001444 <HAL_GPIO_Init+0x1a0>
 80013ae:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013b2:	42a0      	cmp	r0, r4
 80013b4:	d048      	beq.n	8001448 <HAL_GPIO_Init+0x1a4>
 80013b6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013ba:	42a0      	cmp	r0, r4
 80013bc:	d046      	beq.n	800144c <HAL_GPIO_Init+0x1a8>
 80013be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013c2:	42a0      	cmp	r0, r4
 80013c4:	d044      	beq.n	8001450 <HAL_GPIO_Init+0x1ac>
 80013c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	d042      	beq.n	8001454 <HAL_GPIO_Init+0x1b0>
 80013ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013d2:	42a0      	cmp	r0, r4
 80013d4:	d040      	beq.n	8001458 <HAL_GPIO_Init+0x1b4>
 80013d6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013da:	42a0      	cmp	r0, r4
 80013dc:	d03e      	beq.n	800145c <HAL_GPIO_Init+0x1b8>
 80013de:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013e2:	42a0      	cmp	r0, r4
 80013e4:	bf14      	ite	ne
 80013e6:	240a      	movne	r4, #10
 80013e8:	2409      	moveq	r4, #9
 80013ea:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ee:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013f2:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80013f6:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80013fc:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	bf0c      	ite	eq
 8001400:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001402:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001404:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001408:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800140a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800140c:	bf0c      	ite	eq
 800140e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001410:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001412:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001416:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001418:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800141a:	bf0c      	ite	eq
 800141c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800141e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001420:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001422:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001424:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001426:	bf54      	ite	pl
 8001428:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800142a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800142c:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800142e:	3301      	adds	r3, #1
 8001430:	2b10      	cmp	r3, #16
 8001432:	f47f af3d 	bne.w	80012b0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001436:	b003      	add	sp, #12
 8001438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800143c:	2400      	movs	r4, #0
 800143e:	e7d4      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001440:	2401      	movs	r4, #1
 8001442:	e7d2      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001444:	2402      	movs	r4, #2
 8001446:	e7d0      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001448:	2403      	movs	r4, #3
 800144a:	e7ce      	b.n	80013ea <HAL_GPIO_Init+0x146>
 800144c:	2404      	movs	r4, #4
 800144e:	e7cc      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001450:	2405      	movs	r4, #5
 8001452:	e7ca      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001454:	2406      	movs	r4, #6
 8001456:	e7c8      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001458:	2407      	movs	r4, #7
 800145a:	e7c6      	b.n	80013ea <HAL_GPIO_Init+0x146>
 800145c:	2408      	movs	r4, #8
 800145e:	e7c4      	b.n	80013ea <HAL_GPIO_Init+0x146>
 8001460:	40013c00 	.word	0x40013c00
 8001464:	40020000 	.word	0x40020000
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	b10a      	cbz	r2, 8001472 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800146e:	6181      	str	r1, [r0, #24]
  }
}
 8001470:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001472:	0409      	lsls	r1, r1, #16
 8001474:	e7fb      	b.n	800146e <HAL_GPIO_WritePin+0x2>

08001476 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001476:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001478:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
{
 800147c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800147e:	2b01      	cmp	r3, #1
 8001480:	d009      	beq.n	8001496 <HAL_HCD_HC_Halt+0x20>
 8001482:	2301      	movs	r3, #1
 8001484:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001488:	6800      	ldr	r0, [r0, #0]
 800148a:	f002 f916 	bl	80036ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800148e:	2000      	movs	r0, #0
 8001490:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4

  return status;
}
 8001494:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001496:	2002      	movs	r0, #2
 8001498:	e7fc      	b.n	8001494 <HAL_HCD_HC_Halt+0x1e>

0800149a <HAL_HCD_Init>:
{
 800149a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hhcd == NULL)
 800149c:	4604      	mov	r4, r0
 800149e:	b310      	cbz	r0, 80014e6 <HAL_HCD_Init+0x4c>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a0:	f890 33d5 	ldrb.w	r3, [r0, #981]	@ 0x3d5
  USBx = hhcd->Instance;
 80014a4:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80014aa:	b91b      	cbnz	r3, 80014b4 <HAL_HCD_Init+0x1a>
    hhcd->Lock = HAL_UNLOCKED;
 80014ac:	f880 23d4 	strb.w	r2, [r0, #980]	@ 0x3d4
    HAL_HCD_MspInit(hhcd);
 80014b0:	f7ff fb88 	bl	8000bc4 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014b4:	2303      	movs	r3, #3
  if (USBx == USB_OTG_FS)
 80014b6:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  __HAL_HCD_DISABLE(hhcd);
 80014ba:	6820      	ldr	r0, [r4, #0]
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014bc:	f104 0504 	add.w	r5, r4, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014c0:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    hhcd->Init.dma_enable = 0U;
 80014c4:	bf04      	itt	eq
 80014c6:	2300      	moveq	r3, #0
 80014c8:	71a3      	strbeq	r3, [r4, #6]
  __HAL_HCD_DISABLE(hhcd);
 80014ca:	f001 fed6 	bl	800327a <USB_DisableGlobalInt>
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014ce:	7c23      	ldrb	r3, [r4, #16]
 80014d0:	f88d 3000 	strb.w	r3, [sp]
 80014d4:	6820      	ldr	r0, [r4, #0]
 80014d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014da:	f001 fe8a 	bl	80031f2 <USB_CoreInit>
 80014de:	b128      	cbz	r0, 80014ec <HAL_HCD_Init+0x52>
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
}
 80014e8:	b003      	add	sp, #12
 80014ea:	bd30      	pop	{r4, r5, pc}
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014ec:	2101      	movs	r1, #1
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	f001 fec9 	bl	8003286 <USB_SetCurrentMode>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d1f3      	bne.n	80014e0 <HAL_HCD_Init+0x46>
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014f8:	7c23      	ldrb	r3, [r4, #16]
 80014fa:	f88d 3000 	strb.w	r3, [sp]
 80014fe:	6820      	ldr	r0, [r4, #0]
 8001500:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001504:	f001 ff76 	bl	80033f4 <USB_HostInit>
 8001508:	2800      	cmp	r0, #0
 800150a:	d1e9      	bne.n	80014e0 <HAL_HCD_Init+0x46>
  hhcd->State = HAL_HCD_STATE_READY;
 800150c:	2301      	movs	r3, #1
 800150e:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  return HAL_OK;
 8001512:	e7e9      	b.n	80014e8 <HAL_HCD_Init+0x4e>

08001514 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001514:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8001516:	263c      	movs	r6, #60	@ 0x3c
{
 8001518:	f89d 7010 	ldrb.w	r7, [sp, #16]
 800151c:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 800151e:	fb06 0601 	mla	r6, r6, r1, r0
{
 8001522:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8001526:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800152a:	75f2      	strb	r2, [r6, #23]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800152c:	f886 3026 	strb.w	r3, [r6, #38]	@ 0x26

  if (token == 0U)
 8001530:	b97f      	cbnz	r7, 8001552 <HAL_HCD_HC_SubmitRequest+0x3e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001532:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001534:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 8001536:	f886 c019 	strb.w	ip, [r6, #25]
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800153a:	f886 702a 	strb.w	r7, [r6, #42]	@ 0x2a
  switch (ep_type)
 800153e:	d042      	beq.n	80015c6 <HAL_HCD_HC_SubmitRequest+0xb2>
 8001540:	42bb      	cmp	r3, r7
 8001542:	d040      	beq.n	80015c6 <HAL_HCD_HC_SubmitRequest+0xb2>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d11e      	bne.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001548:	233c      	movs	r3, #60	@ 0x3c
 800154a:	2200      	movs	r2, #0
 800154c:	fb03 0301 	mla	r3, r3, r1, r0
 8001550:	e02e      	b.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x9c>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001552:	f04f 0c02 	mov.w	ip, #2
 8001556:	f886 c02a 	strb.w	ip, [r6, #42]	@ 0x2a
  switch (ep_type)
 800155a:	2b03      	cmp	r3, #3
 800155c:	d813      	bhi.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
 800155e:	a601      	add	r6, pc, #4	@ (adr r6, 8001564 <HAL_HCD_HC_SubmitRequest+0x50>)
 8001560:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8001564:	08001575 	.word	0x08001575
 8001568:	08001549 	.word	0x08001549
 800156c:	080015c7 	.word	0x080015c7
 8001570:	080015c7 	.word	0x080015c7
      if (token == 1U) /* send data */
 8001574:	2f01      	cmp	r7, #1
 8001576:	d106      	bne.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
        if (direction == 0U)
 8001578:	233c      	movs	r3, #60	@ 0x3c
            hhcd->hc[ch_num].toggle_out = 1U;
 800157a:	fb03 0301 	mla	r3, r3, r1, r0
        if (direction == 0U)
 800157e:	b9d2      	cbnz	r2, 80015b6 <HAL_HCD_HC_SubmitRequest+0xa2>
          if (length == 0U)
 8001580:	b994      	cbnz	r4, 80015a8 <HAL_HCD_HC_SubmitRequest+0x94>
            hhcd->hc[ch_num].toggle_out = 1U;
 8001582:	f883 703d 	strb.w	r7, [r3, #61]	@ 0x3d

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001586:	223c      	movs	r2, #60	@ 0x3c
 8001588:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800158c:	7559      	strb	r1, [r3, #21]
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800158e:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 8001590:	635c      	str	r4, [r3, #52]	@ 0x34
  hhcd->hc[ch_num].xfer_count = 0U;
 8001592:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001594:	62dd      	str	r5, [r3, #44]	@ 0x2c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001596:	3114      	adds	r1, #20
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001598:	f8a3 404c 	strh.w	r4, [r3, #76]	@ 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 800159c:	639c      	str	r4, [r3, #56]	@ 0x38
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800159e:	7982      	ldrb	r2, [r0, #6]
 80015a0:	6800      	ldr	r0, [r0, #0]
}
 80015a2:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015a4:	f002 b904 	b.w	80037b0 <USB_HC_StartXfer>
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80015a8:	f893 603d 	ldrb.w	r6, [r3, #61]	@ 0x3d
 80015ac:	2e00      	cmp	r6, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015b0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      break;
 80015b4:	e7e7      	b.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80015b6:	7e9a      	ldrb	r2, [r3, #26]
 80015b8:	2a01      	cmp	r2, #1
 80015ba:	d1e4      	bne.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80015bc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d1e0      	bne.n	8001586 <HAL_HCD_HC_SubmitRequest+0x72>
 80015c4:	e7f4      	b.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x9c>
      if (direction == 0U)
 80015c6:	233c      	movs	r3, #60	@ 0x3c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015c8:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80015cc:	b92a      	cbnz	r2, 80015da <HAL_HCD_HC_SubmitRequest+0xc6>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015ce:	f893 603d 	ldrb.w	r6, [r3, #61]	@ 0x3d
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	d0ec      	beq.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x9c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015d6:	2202      	movs	r2, #2
 80015d8:	e7ea      	b.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x9c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015da:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_HCD_HC_SubmitRequest+0xc2>
 80015e2:	e7e5      	b.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x9c>

080015e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e8:	6804      	ldr	r4, [r0, #0]
{
 80015ea:	b085      	sub	sp, #20
 80015ec:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f001 fefb 	bl	80033ea <USB_GetMode>
 80015f4:	2801      	cmp	r0, #1
 80015f6:	f040 80f4 	bne.w	80017e2 <HAL_HCD_IRQHandler+0x1fe>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015fa:	6828      	ldr	r0, [r5, #0]
 80015fc:	f001 fee8 	bl	80033d0 <USB_ReadInterrupts>
 8001600:	2800      	cmp	r0, #0
 8001602:	f000 80ee 	beq.w	80017e2 <HAL_HCD_IRQHandler+0x1fe>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001606:	6828      	ldr	r0, [r5, #0]
 8001608:	f001 fee2 	bl	80033d0 <USB_ReadInterrupts>
 800160c:	0286      	lsls	r6, r0, #10
 800160e:	d503      	bpl.n	8001618 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001616:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001618:	6828      	ldr	r0, [r5, #0]
 800161a:	f001 fed9 	bl	80033d0 <USB_ReadInterrupts>
 800161e:	02c0      	lsls	r0, r0, #11
 8001620:	d503      	bpl.n	800162a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800162a:	6828      	ldr	r0, [r5, #0]
 800162c:	f001 fed0 	bl	80033d0 <USB_ReadInterrupts>
 8001630:	0141      	lsls	r1, r0, #5
 8001632:	d503      	bpl.n	800163c <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800163a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800163c:	6828      	ldr	r0, [r5, #0]
 800163e:	f001 fec7 	bl	80033d0 <USB_ReadInterrupts>
 8001642:	0782      	lsls	r2, r0, #30
 8001644:	d502      	bpl.n	800164c <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	2202      	movs	r2, #2
 800164a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800164c:	6828      	ldr	r0, [r5, #0]
 800164e:	f001 febf 	bl	80033d0 <USB_ReadInterrupts>
 8001652:	0083      	lsls	r3, r0, #2
 8001654:	d518      	bpl.n	8001688 <HAL_HCD_IRQHandler+0xa4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800165c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800165e:	f8d4 3440 	ldr.w	r3, [r4, #1088]	@ 0x440
 8001662:	07df      	lsls	r7, r3, #31
 8001664:	d410      	bmi.n	8001688 <HAL_HCD_IRQHandler+0xa4>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001666:	2110      	movs	r1, #16
 8001668:	4620      	mov	r0, r4
 800166a:	f001 fe3a 	bl	80032e2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800166e:	4620      	mov	r0, r4
 8001670:	f001 fe5a 	bl	8003328 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001674:	7a6b      	ldrb	r3, [r5, #9]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d103      	bne.n	8001682 <HAL_HCD_IRQHandler+0x9e>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800167a:	2101      	movs	r1, #1
 800167c:	6828      	ldr	r0, [r5, #0]
 800167e:	f001 ff21 	bl	80034c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001682:	4628      	mov	r0, r5
 8001684:	f7ff fb06 	bl	8000c94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001688:	6828      	ldr	r0, [r5, #0]
 800168a:	f001 fea1 	bl	80033d0 <USB_ReadInterrupts>
 800168e:	01c6      	lsls	r6, r0, #7
 8001690:	d53d      	bpl.n	800170e <HAL_HCD_IRQHandler+0x12a>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001692:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001694:	f8d6 3440 	ldr.w	r3, [r6, #1088]	@ 0x440
 8001698:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800169a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	@ 0x440
 800169e:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80016a0:	9b03      	ldr	r3, [sp, #12]
 80016a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80016a6:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80016a8:	9b02      	ldr	r3, [sp, #8]
 80016aa:	0798      	lsls	r0, r3, #30
 80016ac:	d509      	bpl.n	80016c2 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80016ae:	9b02      	ldr	r3, [sp, #8]
 80016b0:	07d9      	lsls	r1, r3, #31
 80016b2:	d502      	bpl.n	80016ba <HAL_HCD_IRQHandler+0xd6>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fae9 	bl	8000c8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80016ba:	9b03      	ldr	r3, [sp, #12]
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80016c2:	9b02      	ldr	r3, [sp, #8]
 80016c4:	071a      	lsls	r2, r3, #28
 80016c6:	d518      	bpl.n	80016fa <HAL_HCD_IRQHandler+0x116>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80016c8:	9b03      	ldr	r3, [sp, #12]
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80016d0:	9b02      	ldr	r3, [sp, #8]
 80016d2:	075b      	lsls	r3, r3, #29
 80016d4:	f140 8090 	bpl.w	80017f8 <HAL_HCD_IRQHandler+0x214>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80016d8:	7a69      	ldrb	r1, [r5, #9]
 80016da:	2902      	cmp	r1, #2
 80016dc:	f040 8084 	bne.w	80017e8 <HAL_HCD_IRQHandler+0x204>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80016e0:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80016e2:	6828      	ldr	r0, [r5, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80016e4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80016e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016ec:	bf18      	it	ne
 80016ee:	2101      	movne	r1, #1
 80016f0:	f001 fee8 	bl	80034c4 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80016f4:	4628      	mov	r0, r5
 80016f6:	f7ff fad1 	bl	8000c9c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80016fa:	9b02      	ldr	r3, [sp, #8]
 80016fc:	069f      	lsls	r7, r3, #26
 80016fe:	d503      	bpl.n	8001708 <HAL_HCD_IRQHandler+0x124>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001708:	9b03      	ldr	r3, [sp, #12]
 800170a:	f8c6 3440 	str.w	r3, [r6, #1088]	@ 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800170e:	6828      	ldr	r0, [r5, #0]
 8001710:	f001 fe5e 	bl	80033d0 <USB_ReadInterrupts>
 8001714:	0700      	lsls	r0, r0, #28
 8001716:	d505      	bpl.n	8001724 <HAL_HCD_IRQHandler+0x140>
      HAL_HCD_SOF_Callback(hhcd);
 8001718:	4628      	mov	r0, r5
 800171a:	f7ff fab3 	bl	8000c84 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001724:	6828      	ldr	r0, [r5, #0]
 8001726:	f001 fe53 	bl	80033d0 <USB_ReadInterrupts>
 800172a:	0181      	lsls	r1, r0, #6
 800172c:	d511      	bpl.n	8001752 <HAL_HCD_IRQHandler+0x16e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800172e:	46aa      	mov	sl, r5
 8001730:	f504 68a0 	add.w	r8, r4, #1280	@ 0x500
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001734:	f04f 0900 	mov.w	r9, #0
    hhcd->hc[chnum].state = HC_XACTERR;
 8001738:	f04f 0b07 	mov.w	fp, #7
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800173c:	6828      	ldr	r0, [r5, #0]
 800173e:	f001 ffb7 	bl	80036b0 <USB_HC_ReadInterrupt>
 8001742:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001744:	796a      	ldrb	r2, [r5, #5]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001746:	682c      	ldr	r4, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001748:	454a      	cmp	r2, r9
 800174a:	d859      	bhi.n	8001800 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800174c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001750:	6163      	str	r3, [r4, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001752:	6828      	ldr	r0, [r5, #0]
 8001754:	f001 fe3c 	bl	80033d0 <USB_ReadInterrupts>
 8001758:	06c3      	lsls	r3, r0, #27
 800175a:	d542      	bpl.n	80017e2 <HAL_HCD_IRQHandler+0x1fe>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800175c:	682e      	ldr	r6, [r5, #0]
 800175e:	69b3      	ldr	r3, [r6, #24]
 8001760:	f023 0310 	bic.w	r3, r3, #16
 8001764:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001766:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001768:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 800176c:	2b02      	cmp	r3, #2
 800176e:	d133      	bne.n	80017d8 <HAL_HCD_IRQHandler+0x1f4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001770:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8001774:	f1b8 0f00 	cmp.w	r8, #0
 8001778:	d02e      	beq.n	80017d8 <HAL_HCD_IRQHandler+0x1f4>
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800177a:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800177e:	243c      	movs	r4, #60	@ 0x3c
 8001780:	fb04 5407 	mla	r4, r4, r7, r5
 8001784:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001786:	b339      	cbz	r1, 80017d8 <HAL_HCD_IRQHandler+0x1f4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8001788:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800178a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800178c:	4443      	add	r3, r8
 800178e:	4293      	cmp	r3, r2
 8001790:	f200 837a 	bhi.w	8001e88 <HAL_HCD_IRQHandler+0x8a4>
          (void)USB_ReadPacket(hhcd->Instance,
 8001794:	4642      	mov	r2, r8
 8001796:	4630      	mov	r0, r6
 8001798:	f001 fdfa 	bl	8003390 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800179c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800179e:	f506 66a0 	add.w	r6, r6, #1280	@ 0x500
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80017a2:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80017a4:	4443      	add	r3, r8
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80017a6:	017a      	lsls	r2, r7, #5
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80017a8:	4588      	cmp	r8, r1
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80017aa:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80017ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
          hhcd->hc[chnum].xfer_count += pktcnt;
 80017b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80017b2:	4443      	add	r3, r8
 80017b4:	63a3      	str	r3, [r4, #56]	@ 0x38
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80017b6:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80017b8:	d10e      	bne.n	80017d8 <HAL_HCD_IRQHandler+0x1f4>
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80017ba:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80017be:	b15b      	cbz	r3, 80017d8 <HAL_HCD_IRQHandler+0x1f4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80017c0:	58b3      	ldr	r3, [r6, r2]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80017ca:	50b3      	str	r3, [r6, r2]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80017cc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d8:	682a      	ldr	r2, [r5, #0]
 80017da:	6993      	ldr	r3, [r2, #24]
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6193      	str	r3, [r2, #24]
}
 80017e2:	b005      	add	sp, #20
 80017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80017e8:	79eb      	ldrb	r3, [r5, #7]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d182      	bne.n	80016f4 <HAL_HCD_IRQHandler+0x110>
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80017ee:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80017f2:	f8c6 2404 	str.w	r2, [r6, #1028]	@ 0x404
 80017f6:	e77d      	b.n	80016f4 <HAL_HCD_IRQHandler+0x110>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80017f8:	4628      	mov	r0, r5
 80017fa:	f7ff fa53 	bl	8000ca4 <HAL_HCD_PortDisabled_Callback>
 80017fe:	e77c      	b.n	80016fa <HAL_HCD_IRQHandler+0x116>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001800:	f009 020f 	and.w	r2, r9, #15
 8001804:	9b00      	ldr	r3, [sp, #0]
 8001806:	fa23 f202 	lsr.w	r2, r3, r2
 800180a:	07d2      	lsls	r2, r2, #31
 800180c:	d52a      	bpl.n	8001864 <HAL_HCD_IRQHandler+0x280>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800180e:	f8d8 2000 	ldr.w	r2, [r8]
 8001812:	fa5f f689 	uxtb.w	r6, r9
 8001816:	ea4f 1749 	mov.w	r7, r9, lsl #5
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800181a:	4620      	mov	r0, r4
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800181c:	0413      	lsls	r3, r2, #16
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800181e:	4631      	mov	r1, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001820:	f140 81ba 	bpl.w	8001b98 <HAL_HCD_IRQHandler+0x5b4>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001824:	f001 fdd8 	bl	80033d8 <USB_ReadChInterrupts>
 8001828:	0740      	lsls	r0, r0, #29
 800182a:	d522      	bpl.n	8001872 <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800182c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8001830:	2304      	movs	r3, #4
 8001832:	443a      	add	r2, r7
 8001834:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001836:	f88a b04d 	strb.w	fp, [sl, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800183a:	4631      	mov	r1, r6
 800183c:	6828      	ldr	r0, [r5, #0]
 800183e:	f001 ff3c 	bl	80036ba <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001842:	4631      	mov	r1, r6
 8001844:	6828      	ldr	r0, [r5, #0]
 8001846:	f001 fdc7 	bl	80033d8 <USB_ReadChInterrupts>
 800184a:	f410 7200 	ands.w	r2, r0, #512	@ 0x200
 800184e:	d048      	beq.n	80018e2 <HAL_HCD_IRQHandler+0x2fe>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001850:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001854:	4631      	mov	r1, r6
 8001856:	6828      	ldr	r0, [r5, #0]
 8001858:	f001 ff2f 	bl	80036ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800185c:	443c      	add	r4, r7
 800185e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001862:	60a3      	str	r3, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001864:	f109 0901 	add.w	r9, r9, #1
 8001868:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800186c:	f108 0820 	add.w	r8, r8, #32
 8001870:	e768      	b.n	8001744 <HAL_HCD_IRQHandler+0x160>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001872:	4631      	mov	r1, r6
 8001874:	6828      	ldr	r0, [r5, #0]
 8001876:	f001 fdaf 	bl	80033d8 <USB_ReadChInterrupts>
 800187a:	05c1      	lsls	r1, r0, #23
 800187c:	d509      	bpl.n	8001892 <HAL_HCD_IRQHandler+0x2ae>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800187e:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8001882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001886:	443a      	add	r2, r7
 8001888:	6091      	str	r1, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800188a:	2208      	movs	r2, #8
    hhcd->hc[chnum].state = HC_XACTERR;
 800188c:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
 8001890:	e7d3      	b.n	800183a <HAL_HCD_IRQHandler+0x256>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001892:	4631      	mov	r1, r6
 8001894:	6828      	ldr	r0, [r5, #0]
 8001896:	f001 fd9f 	bl	80033d8 <USB_ReadChInterrupts>
 800189a:	0702      	lsls	r2, r0, #28
 800189c:	d506      	bpl.n	80018ac <HAL_HCD_IRQHandler+0x2c8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800189e:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80018a2:	2108      	movs	r1, #8
 80018a4:	443a      	add	r2, r7
 80018a6:	6091      	str	r1, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80018a8:	2206      	movs	r2, #6
 80018aa:	e7ef      	b.n	800188c <HAL_HCD_IRQHandler+0x2a8>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80018ac:	4631      	mov	r1, r6
 80018ae:	6828      	ldr	r0, [r5, #0]
 80018b0:	f001 fd92 	bl	80033d8 <USB_ReadChInterrupts>
 80018b4:	0543      	lsls	r3, r0, #21
 80018b6:	d507      	bpl.n	80018c8 <HAL_HCD_IRQHandler+0x2e4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80018b8:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80018bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c0:	443a      	add	r2, r7
 80018c2:	6091      	str	r1, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80018c4:	2209      	movs	r2, #9
 80018c6:	e7e1      	b.n	800188c <HAL_HCD_IRQHandler+0x2a8>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80018c8:	4631      	mov	r1, r6
 80018ca:	6828      	ldr	r0, [r5, #0]
 80018cc:	f001 fd84 	bl	80033d8 <USB_ReadChInterrupts>
 80018d0:	0600      	lsls	r0, r0, #24
 80018d2:	d5b6      	bpl.n	8001842 <HAL_HCD_IRQHandler+0x25e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018d4:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80018d8:	2180      	movs	r1, #128	@ 0x80
 80018da:	443a      	add	r2, r7
 80018dc:	6091      	str	r1, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018de:	2207      	movs	r2, #7
 80018e0:	e7d4      	b.n	800188c <HAL_HCD_IRQHandler+0x2a8>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80018e2:	4631      	mov	r1, r6
 80018e4:	6828      	ldr	r0, [r5, #0]
 80018e6:	9201      	str	r2, [sp, #4]
 80018e8:	f001 fd76 	bl	80033d8 <USB_ReadChInterrupts>
 80018ec:	07c1      	lsls	r1, r0, #31
 80018ee:	d54c      	bpl.n	800198a <HAL_HCD_IRQHandler+0x3a6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018f0:	f504 61a0 	add.w	r1, r4, #1280	@ 0x500
 80018f4:	2020      	movs	r0, #32
    if (hhcd->hc[chnum].do_csplit == 1U)
 80018f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018f8:	19cc      	adds	r4, r1, r7
 80018fa:	60a0      	str	r0, [r4, #8]
    if (hhcd->hc[chnum].do_csplit == 1U)
 80018fc:	f89a 001b 	ldrb.w	r0, [sl, #27]
 8001900:	2801      	cmp	r0, #1
 8001902:	d105      	bne.n	8001910 <HAL_HCD_IRQHandler+0x32c>
      hhcd->hc[chnum].do_csplit = 0U;
 8001904:	f88a 201b 	strb.w	r2, [sl, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800190e:	6062      	str	r2, [r4, #4]
    if (hhcd->Init.dma_enable != 0U)
 8001910:	79aa      	ldrb	r2, [r5, #6]
 8001912:	b13a      	cbz	r2, 8001924 <HAL_HCD_IRQHandler+0x340>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001914:	6920      	ldr	r0, [r4, #16]
 8001916:	f8da 2030 	ldr.w	r2, [sl, #48]	@ 0x30
 800191a:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800191e:	1a12      	subs	r2, r2, r0
 8001920:	f8ca 2038 	str.w	r2, [sl, #56]	@ 0x38
    hhcd->hc[chnum].state = HC_XFRC;
 8001924:	2201      	movs	r2, #1
    hhcd->hc[chnum].ErrCnt = 0U;
 8001926:	2000      	movs	r0, #0
    hhcd->hc[chnum].state = HC_XFRC;
 8001928:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    hhcd->hc[chnum].ErrCnt = 0U;
 800192c:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001930:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001932:	f89a 2026 	ldrb.w	r2, [sl, #38]	@ 0x26
 8001936:	f012 02fd 	ands.w	r2, r2, #253	@ 0xfd
 800193a:	d119      	bne.n	8001970 <HAL_HCD_IRQHandler+0x38c>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800193c:	4631      	mov	r1, r6
 800193e:	6828      	ldr	r0, [r5, #0]
 8001940:	f001 febb 	bl	80036ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001944:	2210      	movs	r2, #16
 8001946:	60a2      	str	r2, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001948:	79aa      	ldrb	r2, [r5, #6]
 800194a:	2a01      	cmp	r2, #1
 800194c:	d109      	bne.n	8001962 <HAL_HCD_IRQHandler+0x37e>
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800194e:	f8da 2038 	ldr.w	r2, [sl, #56]	@ 0x38
 8001952:	f8ba 1028 	ldrh.w	r1, [sl, #40]	@ 0x28
 8001956:	3a01      	subs	r2, #1
 8001958:	440a      	add	r2, r1
 800195a:	fbb2 f2f1 	udiv	r2, r2, r1
 800195e:	07d2      	lsls	r2, r2, #31
 8001960:	d580      	bpl.n	8001864 <HAL_HCD_IRQHandler+0x280>
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001962:	f89a 203c 	ldrb.w	r2, [sl, #60]	@ 0x3c
 8001966:	f082 0201 	eor.w	r2, r2, #1
 800196a:	f88a 203c 	strb.w	r2, [sl, #60]	@ 0x3c
 800196e:	e779      	b.n	8001864 <HAL_HCD_IRQHandler+0x280>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001970:	2a01      	cmp	r2, #1
 8001972:	d1e9      	bne.n	8001948 <HAL_HCD_IRQHandler+0x364>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001974:	59c8      	ldr	r0, [r1, r7]
 8001976:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 800197a:	51c8      	str	r0, [r1, r7]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800197c:	4631      	mov	r1, r6
 800197e:	4628      	mov	r0, r5
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001980:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001984:	f7ff f992 	bl	8000cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8001988:	e7de      	b.n	8001948 <HAL_HCD_IRQHandler+0x364>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800198a:	4631      	mov	r1, r6
 800198c:	6828      	ldr	r0, [r5, #0]
 800198e:	f001 fd23 	bl	80033d8 <USB_ReadChInterrupts>
 8001992:	0683      	lsls	r3, r0, #26
 8001994:	d513      	bpl.n	80019be <HAL_HCD_IRQHandler+0x3da>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001996:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 800199a:	2220      	movs	r2, #32
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800199c:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800199e:	443c      	add	r4, r7
 80019a0:	60a2      	str	r2, [r4, #8]
    if (hhcd->hc[chnum].do_ssplit == 1U)
 80019a2:	f89a 201a 	ldrb.w	r2, [sl, #26]
 80019a6:	2a01      	cmp	r2, #1
 80019a8:	f47f af5c 	bne.w	8001864 <HAL_HCD_IRQHandler+0x280>
      hhcd->hc[chnum].do_csplit = 1U;
 80019ac:	f88a 201b 	strb.w	r2, [sl, #27]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019b0:	4631      	mov	r1, r6
      hhcd->hc[chnum].state = HC_ACK;
 80019b2:	2203      	movs	r2, #3
 80019b4:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019b8:	f001 fe7f 	bl	80036ba <USB_HC_Halt>
 80019bc:	e752      	b.n	8001864 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80019be:	4631      	mov	r1, r6
 80019c0:	6828      	ldr	r0, [r5, #0]
 80019c2:	f001 fd09 	bl	80033d8 <USB_ReadChInterrupts>
 80019c6:	0780      	lsls	r0, r0, #30
 80019c8:	f140 8097 	bpl.w	8001afa <HAL_HCD_IRQHandler+0x516>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80019cc:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 80019d0:	2202      	movs	r2, #2
 80019d2:	19e1      	adds	r1, r4, r7
 80019d4:	608a      	str	r2, [r1, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 80019d6:	f89a 004d 	ldrb.w	r0, [sl, #77]	@ 0x4d
 80019da:	2801      	cmp	r0, #1
 80019dc:	d10a      	bne.n	80019f4 <HAL_HCD_IRQHandler+0x410>
      hhcd->hc[chnum].state = HC_HALTED;
 80019de:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_DONE;
 80019e2:	f88a 004c 	strb.w	r0, [sl, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80019e6:	f89a 204c 	ldrb.w	r2, [sl, #76]	@ 0x4c
 80019ea:	4631      	mov	r1, r6
 80019ec:	4628      	mov	r0, r5
 80019ee:	f7ff f95d 	bl	8000cac <HAL_HCD_HC_NotifyURBChange_Callback>
 80019f2:	e737      	b.n	8001864 <HAL_HCD_IRQHandler+0x280>
    else if (hhcd->hc[chnum].state == HC_STALL)
 80019f4:	3802      	subs	r0, #2
 80019f6:	2807      	cmp	r0, #7
 80019f8:	d8f5      	bhi.n	80019e6 <HAL_HCD_IRQHandler+0x402>
 80019fa:	f20f 0c08 	addw	ip, pc, #8
 80019fe:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001865 	.word	0x08001865
 8001a08:	08001aaf 	.word	0x08001aaf
 8001a0c:	08001ae1 	.word	0x08001ae1
 8001a10:	08001a59 	.word	0x08001a59
 8001a14:	08001e65 	.word	0x08001e65
 8001a18:	08001a25 	.word	0x08001a25
 8001a1c:	08001aeb 	.word	0x08001aeb
 8001a20:	08001a25 	.word	0x08001a25
      hhcd->hc[chnum].ErrCnt++;
 8001a24:	f8da 0044 	ldr.w	r0, [sl, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 8001a28:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 8001a2c:	3001      	adds	r0, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a2e:	2802      	cmp	r0, #2
      hhcd->hc[chnum].ErrCnt++;
 8001a30:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a34:	d956      	bls.n	8001ae4 <HAL_HCD_IRQHandler+0x500>
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001a36:	f89a 001a 	ldrb.w	r0, [sl, #26]
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a3a:	2200      	movs	r2, #0
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001a3c:	2801      	cmp	r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a3e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001a42:	d107      	bne.n	8001a54 <HAL_HCD_IRQHandler+0x470>
          hhcd->hc[chnum].do_csplit = 0U;
 8001a44:	f88a 201b 	strb.w	r2, [sl, #27]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001a48:	f88a 201c 	strb.w	r2, [sl, #28]
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a4c:	684a      	ldr	r2, [r1, #4]
 8001a4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a52:	604a      	str	r2, [r1, #4]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a54:	2204      	movs	r2, #4
 8001a56:	e1ee      	b.n	8001e36 <HAL_HCD_IRQHandler+0x852>
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001a58:	f89a c01b 	ldrb.w	ip, [sl, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 8001a5c:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001a60:	f1bc 0f01 	cmp.w	ip, #1
 8001a64:	d1bf      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x402>
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001a66:	f89a 0026 	ldrb.w	r0, [sl, #38]	@ 0x26
 8001a6a:	2803      	cmp	r0, #3
 8001a6c:	d113      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x4b2>
          hhcd->hc[chnum].NyetErrCnt++;
 8001a6e:	f8da 0048 	ldr.w	r0, [sl, #72]	@ 0x48
 8001a72:	3001      	adds	r0, #1
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001a74:	2802      	cmp	r0, #2
          hhcd->hc[chnum].NyetErrCnt++;
 8001a76:	f8ca 0048 	str.w	r0, [sl, #72]	@ 0x48
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001a7a:	f240 81dc 	bls.w	8001e36 <HAL_HCD_IRQHandler+0x852>
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f8ca 2048 	str.w	r2, [sl, #72]	@ 0x48
            hhcd->hc[chnum].do_csplit = 0U;
 8001a84:	f88a 201b 	strb.w	r2, [sl, #27]
            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001a88:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001a8c:	2a02      	cmp	r2, #2
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001a8e:	bf98      	it	ls
 8001a90:	f88a c01c 	strbls.w	ip, [sl, #28]
 8001a94:	e7da      	b.n	8001a4c <HAL_HCD_IRQHandler+0x468>
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a96:	f010 0ffd 	tst.w	r0, #253	@ 0xfd
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a9a:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a9e:	d1a2      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x402>
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001aa0:	59e2      	ldr	r2, [r4, r7]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001aa2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001aa6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001aaa:	51e2      	str	r2, [r4, r7]
 8001aac:	e79b      	b.n	80019e6 <HAL_HCD_IRQHandler+0x402>
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001aae:	f89a 001b 	ldrb.w	r0, [sl, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 8001ab2:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001ab6:	2801      	cmp	r0, #1
 8001ab8:	d195      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x402>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001aba:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001abe:	684a      	ldr	r2, [r1, #4]
 8001ac0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ac4:	604a      	str	r2, [r1, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001ac6:	68ca      	ldr	r2, [r1, #12]
 8001ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001acc:	60ca      	str	r2, [r1, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001ace:	68ca      	ldr	r2, [r1, #12]
 8001ad0:	f022 0220 	bic.w	r2, r2, #32
 8001ad4:	60ca      	str	r2, [r1, #12]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ad6:	f89a 2026 	ldrb.w	r2, [sl, #38]	@ 0x26
 8001ada:	f012 0ffd 	tst.w	r2, #253	@ 0xfd
 8001ade:	e7de      	b.n	8001a9e <HAL_HCD_IRQHandler+0x4ba>
      hhcd->hc[chnum].state = HC_HALTED;
 8001ae0:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ae4:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
 8001ae8:	e7f5      	b.n	8001ad6 <HAL_HCD_IRQHandler+0x4f2>
      hhcd->hc[chnum].state = HC_HALTED;
 8001aea:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 8001aee:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001af2:	3201      	adds	r2, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001af4:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001af8:	e7ac      	b.n	8001a54 <HAL_HCD_IRQHandler+0x470>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001afa:	4631      	mov	r1, r6
 8001afc:	6828      	ldr	r0, [r5, #0]
 8001afe:	f001 fc6b 	bl	80033d8 <USB_ReadChInterrupts>
 8001b02:	f010 0240 	ands.w	r2, r0, #64	@ 0x40
 8001b06:	d00f      	beq.n	8001b28 <HAL_HCD_IRQHandler+0x544>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001b08:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	443c      	add	r4, r7
 8001b10:	60a2      	str	r2, [r4, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001b12:	2205      	movs	r2, #5
 8001b14:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001b18:	f89a 201a 	ldrb.w	r2, [sl, #26]
 8001b1c:	b90a      	cbnz	r2, 8001b22 <HAL_HCD_IRQHandler+0x53e>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b1e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b22:	4631      	mov	r1, r6
 8001b24:	6828      	ldr	r0, [r5, #0]
 8001b26:	e747      	b.n	80019b8 <HAL_HCD_IRQHandler+0x3d4>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001b28:	4631      	mov	r1, r6
 8001b2a:	6828      	ldr	r0, [r5, #0]
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	f001 fc53 	bl	80033d8 <USB_ReadChInterrupts>
 8001b32:	06c1      	lsls	r1, r0, #27
 8001b34:	f57f ae96 	bpl.w	8001864 <HAL_HCD_IRQHandler+0x280>
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001b38:	f89a 1026 	ldrb.w	r1, [sl, #38]	@ 0x26
 8001b3c:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001b40:	9a01      	ldr	r2, [sp, #4]
 8001b42:	2903      	cmp	r1, #3
 8001b44:	d119      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x596>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b46:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
        hhcd->hc[chnum].state = HC_NAK;
 8001b4a:	2204      	movs	r2, #4
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b4c:	4631      	mov	r1, r6
        hhcd->hc[chnum].state = HC_NAK;
 8001b4e:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b52:	6828      	ldr	r0, [r5, #0]
 8001b54:	f001 fdb1 	bl	80036ba <USB_HC_Halt>
    if (hhcd->hc[chnum].do_csplit == 1U)
 8001b58:	f89a 201b 	ldrb.w	r2, [sl, #27]
 8001b5c:	2a01      	cmp	r2, #1
 8001b5e:	d118      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x5ae>
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001b60:	19e2      	adds	r2, r4, r7
      hhcd->hc[chnum].do_csplit = 0U;
 8001b62:	2100      	movs	r1, #0
 8001b64:	f88a 101b 	strb.w	r1, [sl, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001b68:	6851      	ldr	r1, [r2, #4]
 8001b6a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001b6e:	6051      	str	r1, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001b70:	68d1      	ldr	r1, [r2, #12]
 8001b72:	f041 0120 	orr.w	r1, r1, #32
 8001b76:	60d1      	str	r1, [r2, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b78:	e00b      	b.n	8001b92 <HAL_HCD_IRQHandler+0x5ae>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b7a:	f011 01fd 	ands.w	r1, r1, #253	@ 0xfd
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x574>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b80:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001b84:	79aa      	ldrb	r2, [r5, #6]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d0df      	beq.n	8001b4a <HAL_HCD_IRQHandler+0x566>
 8001b8a:	f89a 201b 	ldrb.w	r2, [sl, #27]
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d0db      	beq.n	8001b4a <HAL_HCD_IRQHandler+0x566>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b92:	443c      	add	r4, r7
 8001b94:	2210      	movs	r2, #16
 8001b96:	e093      	b.n	8001cc0 <HAL_HCD_IRQHandler+0x6dc>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001b98:	f001 fc1e 	bl	80033d8 <USB_ReadChInterrupts>
 8001b9c:	f010 0204 	ands.w	r2, r0, #4
 8001ba0:	d007      	beq.n	8001bb2 <HAL_HCD_IRQHandler+0x5ce>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ba2:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	443c      	add	r4, r7
 8001baa:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001bac:	f88a b04d 	strb.w	fp, [sl, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bb0:	e7b7      	b.n	8001b22 <HAL_HCD_IRQHandler+0x53e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001bb2:	4631      	mov	r1, r6
 8001bb4:	6828      	ldr	r0, [r5, #0]
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	f001 fc0e 	bl	80033d8 <USB_ReadChInterrupts>
 8001bbc:	0682      	lsls	r2, r0, #26
 8001bbe:	d530      	bpl.n	8001c22 <HAL_HCD_IRQHandler+0x63e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bc0:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001bc4:	2120      	movs	r1, #32
    if (hhcd->hc[chnum].do_ping == 1U)
 8001bc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001bc8:	443c      	add	r4, r7
 8001bca:	60a1      	str	r1, [r4, #8]
    if (hhcd->hc[chnum].do_ping == 1U)
 8001bcc:	f89a 1019 	ldrb.w	r1, [sl, #25]
 8001bd0:	2901      	cmp	r1, #1
 8001bd2:	d10b      	bne.n	8001bec <HAL_HCD_IRQHandler+0x608>
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bd4:	6828      	ldr	r0, [r5, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bd6:	4631      	mov	r1, r6
      hhcd->hc[chnum].do_ping = 0U;
 8001bd8:	f88a 2019 	strb.w	r2, [sl, #25]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
      hhcd->hc[chnum].state = HC_ACK;
 8001be2:	2203      	movs	r2, #3
 8001be4:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001be8:	f001 fd67 	bl	80036ba <USB_HC_Halt>
    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001bec:	f89a 201a 	ldrb.w	r2, [sl, #26]
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	f47f ae37 	bne.w	8001864 <HAL_HCD_IRQHandler+0x280>
 8001bf6:	f89a 101b 	ldrb.w	r1, [sl, #27]
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	f47f ae32 	bne.w	8001864 <HAL_HCD_IRQHandler+0x280>
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001c00:	f89a 1026 	ldrb.w	r1, [sl, #38]	@ 0x26
 8001c04:	2901      	cmp	r1, #1
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c06:	4631      	mov	r1, r6
        hhcd->hc[chnum].do_csplit = 1U;
 8001c08:	bf18      	it	ne
 8001c0a:	f88a 201b 	strbne.w	r2, [sl, #27]
      hhcd->hc[chnum].state = HC_ACK;
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c14:	6828      	ldr	r0, [r5, #0]
 8001c16:	f001 fd50 	bl	80036ba <USB_HC_Halt>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001c20:	e620      	b.n	8001864 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001c22:	4631      	mov	r1, r6
 8001c24:	6828      	ldr	r0, [r5, #0]
 8001c26:	f001 fbd7 	bl	80033d8 <USB_ReadChInterrupts>
 8001c2a:	f410 7200 	ands.w	r2, r0, #512	@ 0x200
 8001c2e:	d006      	beq.n	8001c3e <HAL_HCD_IRQHandler+0x65a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001c30:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c38:	443c      	add	r4, r7
 8001c3a:	60a2      	str	r2, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c3c:	e771      	b.n	8001b22 <HAL_HCD_IRQHandler+0x53e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001c3e:	4631      	mov	r1, r6
 8001c40:	6828      	ldr	r0, [r5, #0]
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	f001 fbc8 	bl	80033d8 <USB_ReadChInterrupts>
 8001c48:	07c3      	lsls	r3, r0, #31
 8001c4a:	d51f      	bpl.n	8001c8c <HAL_HCD_IRQHandler+0x6a8>
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c4c:	9a01      	ldr	r2, [sp, #4]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c4e:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001c52:	4631      	mov	r1, r6
 8001c54:	6828      	ldr	r0, [r5, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c56:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c5a:	443c      	add	r4, r7
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001c5c:	f001 fbbc 	bl	80033d8 <USB_ReadChInterrupts>
 8001c60:	0647      	lsls	r7, r0, #25
 8001c62:	d504      	bpl.n	8001c6e <HAL_HCD_IRQHandler+0x68a>
      hhcd->hc[chnum].do_ping = 1U;
 8001c64:	2201      	movs	r2, #1
 8001c66:	f88a 2019 	strb.w	r2, [sl, #25]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c6a:	2240      	movs	r2, #64	@ 0x40
 8001c6c:	60a2      	str	r2, [r4, #8]
    if (hhcd->hc[chnum].do_csplit != 0U)
 8001c6e:	f89a 201b 	ldrb.w	r2, [sl, #27]
 8001c72:	b132      	cbz	r2, 8001c82 <HAL_HCD_IRQHandler+0x69e>
      hhcd->hc[chnum].do_csplit = 0U;
 8001c74:	2200      	movs	r2, #0
 8001c76:	f88a 201b 	strb.w	r2, [sl, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c7a:	6862      	ldr	r2, [r4, #4]
 8001c7c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c80:	6062      	str	r2, [r4, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001c82:	2201      	movs	r2, #1
 8001c84:	60a2      	str	r2, [r4, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001c86:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
 8001c8a:	e74a      	b.n	8001b22 <HAL_HCD_IRQHandler+0x53e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	6828      	ldr	r0, [r5, #0]
 8001c90:	f001 fba2 	bl	80033d8 <USB_ReadChInterrupts>
 8001c94:	0640      	lsls	r0, r0, #25
 8001c96:	d515      	bpl.n	8001cc4 <HAL_HCD_IRQHandler+0x6e0>
    hhcd->hc[chnum].state = HC_NYET;
 8001c98:	2205      	movs	r2, #5
 8001c9a:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001c9e:	f89a 201a 	ldrb.w	r2, [sl, #26]
 8001ca2:	b912      	cbnz	r2, 8001caa <HAL_HCD_IRQHandler+0x6c6>
      hhcd->hc[chnum].do_ping = 1U;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f88a 2019 	strb.w	r2, [sl, #25]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001caa:	2200      	movs	r2, #0
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001cac:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cb0:	4631      	mov	r1, r6
 8001cb2:	6828      	ldr	r0, [r5, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001cb4:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001cb8:	443c      	add	r4, r7
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cba:	f001 fcfe 	bl	80036ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001cbe:	2240      	movs	r2, #64	@ 0x40
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001cc0:	60a2      	str	r2, [r4, #8]
 8001cc2:	e5cf      	b.n	8001864 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001cc4:	4631      	mov	r1, r6
 8001cc6:	6828      	ldr	r0, [r5, #0]
 8001cc8:	f001 fb86 	bl	80033d8 <USB_ReadChInterrupts>
 8001ccc:	0701      	lsls	r1, r0, #28
 8001cce:	d506      	bpl.n	8001cde <HAL_HCD_IRQHandler+0x6fa>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001cd0:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	443c      	add	r4, r7
 8001cd8:	60a2      	str	r2, [r4, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001cda:	2206      	movs	r2, #6
 8001cdc:	e7d3      	b.n	8001c86 <HAL_HCD_IRQHandler+0x6a2>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001cde:	4631      	mov	r1, r6
 8001ce0:	6828      	ldr	r0, [r5, #0]
 8001ce2:	f001 fb79 	bl	80033d8 <USB_ReadChInterrupts>
 8001ce6:	06c2      	lsls	r2, r0, #27
 8001ce8:	d515      	bpl.n	8001d16 <HAL_HCD_IRQHandler+0x732>
    hhcd->hc[chnum].ErrCnt = 0U;
 8001cea:	2200      	movs	r2, #0
 8001cec:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
    hhcd->hc[chnum].state = HC_NAK;
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ping == 0U)
 8001cf6:	f89a 2019 	ldrb.w	r2, [sl, #25]
 8001cfa:	b92a      	cbnz	r2, 8001d08 <HAL_HCD_IRQHandler+0x724>
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001cfc:	f89a 2018 	ldrb.w	r2, [sl, #24]
 8001d00:	b912      	cbnz	r2, 8001d08 <HAL_HCD_IRQHandler+0x724>
        hhcd->hc[chnum].do_ping = 1U;
 8001d02:	2201      	movs	r2, #1
 8001d04:	f88a 2019 	strb.w	r2, [sl, #25]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d08:	4631      	mov	r1, r6
 8001d0a:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d0c:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d10:	f001 fcd3 	bl	80036ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d14:	e73d      	b.n	8001b92 <HAL_HCD_IRQHandler+0x5ae>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001d16:	4631      	mov	r1, r6
 8001d18:	6828      	ldr	r0, [r5, #0]
 8001d1a:	f001 fb5d 	bl	80033d8 <USB_ReadChInterrupts>
 8001d1e:	0603      	lsls	r3, r0, #24
 8001d20:	d523      	bpl.n	8001d6a <HAL_HCD_IRQHandler+0x786>
    if (hhcd->Init.dma_enable == 0U)
 8001d22:	79aa      	ldrb	r2, [r5, #6]
 8001d24:	b95a      	cbnz	r2, 8001d3e <HAL_HCD_IRQHandler+0x75a>
      hhcd->hc[chnum].state = HC_XACTERR;
 8001d26:	2207      	movs	r2, #7
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d28:	4631      	mov	r1, r6
      hhcd->hc[chnum].state = HC_XACTERR;
 8001d2a:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d2e:	6828      	ldr	r0, [r5, #0]
 8001d30:	f001 fcc3 	bl	80036ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d34:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	443c      	add	r4, r7
 8001d3c:	e7c0      	b.n	8001cc0 <HAL_HCD_IRQHandler+0x6dc>
      hhcd->hc[chnum].ErrCnt++;
 8001d3e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001d42:	3201      	adds	r2, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d44:	2a02      	cmp	r2, #2
      hhcd->hc[chnum].ErrCnt++;
 8001d46:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d4a:	d90a      	bls.n	8001d62 <HAL_HCD_IRQHandler+0x77e>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d4c:	2200      	movs	r2, #0
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001d4e:	4631      	mov	r1, r6
 8001d50:	4628      	mov	r0, r5
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d52:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d56:	2204      	movs	r2, #4
 8001d58:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001d5c:	f7fe ffa6 	bl	8000cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d60:	e7e8      	b.n	8001d34 <HAL_HCD_IRQHandler+0x750>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d62:	2202      	movs	r2, #2
 8001d64:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
 8001d68:	e7e4      	b.n	8001d34 <HAL_HCD_IRQHandler+0x750>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001d6a:	4631      	mov	r1, r6
 8001d6c:	6828      	ldr	r0, [r5, #0]
 8001d6e:	f001 fb33 	bl	80033d8 <USB_ReadChInterrupts>
 8001d72:	0540      	lsls	r0, r0, #21
 8001d74:	d50c      	bpl.n	8001d90 <HAL_HCD_IRQHandler+0x7ac>
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001d76:	2209      	movs	r2, #9
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001d78:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d7c:	4631      	mov	r1, r6
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001d7e:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001d82:	443c      	add	r4, r7
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d84:	6828      	ldr	r0, [r5, #0]
 8001d86:	f001 fc98 	bl	80036ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d8e:	e797      	b.n	8001cc0 <HAL_HCD_IRQHandler+0x6dc>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001d90:	4631      	mov	r1, r6
 8001d92:	6828      	ldr	r0, [r5, #0]
 8001d94:	f001 fb20 	bl	80033d8 <USB_ReadChInterrupts>
 8001d98:	0781      	lsls	r1, r0, #30
 8001d9a:	f57f ad63 	bpl.w	8001864 <HAL_HCD_IRQHandler+0x280>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d9e:	f504 64a0 	add.w	r4, r4, #1280	@ 0x500
 8001da2:	2202      	movs	r2, #2
 8001da4:	19e0      	adds	r0, r4, r7
 8001da6:	6082      	str	r2, [r0, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8001da8:	f89a 104d 	ldrb.w	r1, [sl, #77]	@ 0x4d
 8001dac:	2901      	cmp	r1, #1
 8001dae:	d124      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x816>
      hhcd->hc[chnum].state = HC_HALTED;
 8001db0:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001db4:	f89a 2026 	ldrb.w	r2, [sl, #38]	@ 0x26
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001db8:	f88a 104c 	strb.w	r1, [sl, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001dbc:	3a02      	subs	r2, #2
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	f63f ae11 	bhi.w	80019e6 <HAL_HCD_IRQHandler+0x402>
        if (hhcd->Init.dma_enable == 0U)
 8001dc4:	79aa      	ldrb	r2, [r5, #6]
 8001dc6:	b932      	cbnz	r2, 8001dd6 <HAL_HCD_IRQHandler+0x7f2>
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001dc8:	f89a 203d 	ldrb.w	r2, [sl, #61]	@ 0x3d
 8001dcc:	f082 0201 	eor.w	r2, r2, #1
 8001dd0:	f88a 203d 	strb.w	r2, [sl, #61]	@ 0x3d
 8001dd4:	e607      	b.n	80019e6 <HAL_HCD_IRQHandler+0x402>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8001dd6:	2a01      	cmp	r2, #1
 8001dd8:	f47f ae05 	bne.w	80019e6 <HAL_HCD_IRQHandler+0x402>
 8001ddc:	f8da 2034 	ldr.w	r2, [sl, #52]	@ 0x34
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	f43f ae00 	beq.w	80019e6 <HAL_HCD_IRQHandler+0x402>
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001de6:	f8ba 1028 	ldrh.w	r1, [sl, #40]	@ 0x28
 8001dea:	3a01      	subs	r2, #1
 8001dec:	440a      	add	r2, r1
 8001dee:	fbb2 f2f1 	udiv	r2, r2, r1
          if ((num_packets & 1U) != 0U)
 8001df2:	07d2      	lsls	r2, r2, #31
 8001df4:	f57f adf7 	bpl.w	80019e6 <HAL_HCD_IRQHandler+0x402>
 8001df8:	e7e6      	b.n	8001dc8 <HAL_HCD_IRQHandler+0x7e4>
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001dfa:	3903      	subs	r1, #3
 8001dfc:	2906      	cmp	r1, #6
 8001dfe:	f63f ad31 	bhi.w	8001864 <HAL_HCD_IRQHandler+0x280>
 8001e02:	f20f 0c08 	addw	ip, pc, #8
 8001e06:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e29 	.word	0x08001e29
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	08001e5f 	.word	0x08001e5f
 8001e18:	08001e65 	.word	0x08001e65
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001865 	.word	0x08001865
 8001e24:	08001e6d 	.word	0x08001e6d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e28:	f89a 101b 	ldrb.w	r1, [sl, #27]
      hhcd->hc[chnum].state = HC_HALTED;
 8001e2c:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e30:	2901      	cmp	r1, #1
 8001e32:	f47f add8 	bne.w	80019e6 <HAL_HCD_IRQHandler+0x402>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e36:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
 8001e3a:	e5d4      	b.n	80019e6 <HAL_HCD_IRQHandler+0x402>
      hhcd->hc[chnum].state = HC_HALTED;
 8001e3c:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e40:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e44:	f89a 201b 	ldrb.w	r2, [sl, #27]
 8001e48:	2a01      	cmp	r2, #1
 8001e4a:	f47f adcc 	bne.w	80019e6 <HAL_HCD_IRQHandler+0x402>
        hhcd->hc[chnum].do_csplit = 0U;
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f88a 201b 	strb.w	r2, [sl, #27]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e54:	6842      	ldr	r2, [r0, #4]
 8001e56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e5a:	6042      	str	r2, [r0, #4]
 8001e5c:	e5c3      	b.n	80019e6 <HAL_HCD_IRQHandler+0x402>
      hhcd->hc[chnum].state = HC_HALTED;
 8001e5e:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001e62:	e7e8      	b.n	8001e36 <HAL_HCD_IRQHandler+0x852>
      hhcd->hc[chnum].state = HC_HALTED;
 8001e64:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001e68:	2205      	movs	r2, #5
 8001e6a:	e7e4      	b.n	8001e36 <HAL_HCD_IRQHandler+0x852>
      hhcd->hc[chnum].ErrCnt++;
 8001e6c:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_HALTED;
 8001e70:	f88a 204d 	strb.w	r2, [sl, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 8001e74:	3101      	adds	r1, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e76:	2902      	cmp	r1, #2
      hhcd->hc[chnum].ErrCnt++;
 8001e78:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e7c:	d901      	bls.n	8001e82 <HAL_HCD_IRQHandler+0x89e>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e7e:	2200      	movs	r2, #0
 8001e80:	e638      	b.n	8001af4 <HAL_HCD_IRQHandler+0x510>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e82:	f88a 204c 	strb.w	r2, [sl, #76]	@ 0x4c
 8001e86:	e60b      	b.n	8001aa0 <HAL_HCD_IRQHandler+0x4bc>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8001e8e:	e4a3      	b.n	80017d8 <HAL_HCD_IRQHandler+0x1f4>

08001e90 <HAL_HCD_Start>:
{
 8001e90:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8001e92:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
{
 8001e96:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_HCD_Start+0x26>
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	f880 13d4 	strb.w	r1, [r0, #980]	@ 0x3d4
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ea2:	6800      	ldr	r0, [r0, #0]
 8001ea4:	f001 fb4b 	bl	800353e <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	f001 f9e0 	bl	800326e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8001eb4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	e7fc      	b.n	8001eb4 <HAL_HCD_Start+0x24>

08001eba <HAL_HCD_Stop>:
{
 8001eba:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8001ebc:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
{
 8001ec0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d009      	beq.n	8001eda <HAL_HCD_Stop+0x20>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ecc:	6800      	ldr	r0, [r0, #0]
 8001ece:	f001 fda3 	bl	8003a18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8001ed8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001eda:	2002      	movs	r0, #2
 8001edc:	e7fc      	b.n	8001ed8 <HAL_HCD_Stop+0x1e>

08001ede <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	f001 bb0f 	b.w	8003502 <USB_ResetPort>

08001ee4 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001ee4:	233c      	movs	r3, #60	@ 0x3c
 8001ee6:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001eea:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 8001eee:	4770      	bx	lr

08001ef0 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001ef0:	233c      	movs	r3, #60	@ 0x3c
 8001ef2:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001ef6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001ef8:	4770      	bx	lr

08001efa <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001efa:	6800      	ldr	r0, [r0, #0]
 8001efc:	f001 bb4a 	b.w	8003594 <USB_GetCurrentFrame>

08001f00 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f00:	6800      	ldr	r0, [r0, #0]
 8001f02:	f001 bb3c 	b.w	800357e <USB_GetHostSpeed>

08001f06 <HAL_HCD_HC_ClearHubInfo>:
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f06:	233c      	movs	r3, #60	@ 0x3c
 8001f08:	fb03 0101 	mla	r1, r3, r1, r0
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	8348      	strh	r0, [r1, #26]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f10:	8488      	strh	r0, [r1, #36]	@ 0x24
}
 8001f12:	4770      	bx	lr

08001f14 <HAL_HCD_HC_Init>:
{
 8001f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f18:	4699      	mov	r9, r3
  __HAL_LOCK(hhcd);
 8001f1a:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
{
 8001f1e:	b085      	sub	sp, #20
 8001f20:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001f22:	2b01      	cmp	r3, #1
{
 8001f24:	460e      	mov	r6, r1
 8001f26:	4690      	mov	r8, r2
 8001f28:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
 8001f2c:	f89d b03c 	ldrb.w	fp, [sp, #60]	@ 0x3c
  uint32_t HCcharMps = mps;
 8001f30:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
  __HAL_LOCK(hhcd);
 8001f34:	d037      	beq.n	8001fa6 <HAL_HCD_HC_Init+0x92>
 8001f36:	2301      	movs	r3, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001f38:	253c      	movs	r5, #60	@ 0x3c
  __HAL_LOCK(hhcd);
 8001f3a:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	fb05 0501 	mla	r5, r5, r1, r0
 8001f44:	766b      	strb	r3, [r5, #25]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f46:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f4a:	7569      	strb	r1, [r5, #21]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f4c:	75ab      	strb	r3, [r5, #22]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f4e:	f885 9014 	strb.w	r9, [r5, #20]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f52:	f885 b026 	strb.w	fp, [r5, #38]	@ 0x26
  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001f56:	f7ff ffd6 	bl	8001f06 <HAL_HCD_HC_ClearHubInfo>
  if ((epnum & 0x80U) == 0x80U)
 8001f5a:	09d3      	lsrs	r3, r2, #7
 8001f5c:	75eb      	strb	r3, [r5, #23]
  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001f5e:	6820      	ldr	r0, [r4, #0]
 8001f60:	f001 fb0d 	bl	800357e <USB_GetHostSpeed>
  if (ep_type == EP_TYPE_ISOC)
 8001f64:	f1bb 0f01 	cmp.w	fp, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_HCD_HC_Init+0x64>
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001f6a:	f1ba 0f01 	cmp.w	sl, #1
 8001f6e:	d103      	bne.n	8001f78 <HAL_HCD_HC_Init+0x64>
 8001f70:	b910      	cbnz	r0, 8001f78 <HAL_HCD_HC_Init+0x64>
      if (HCcharMps > ISO_SPLT_MPS)
 8001f72:	2fbc      	cmp	r7, #188	@ 0xbc
 8001f74:	bf28      	it	cs
 8001f76:	27bc      	movcs	r7, #188	@ 0xbc
  hhcd->hc[ch_num].speed = speed;
 8001f78:	233c      	movs	r3, #60	@ 0x3c
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f7a:	b2bf      	uxth	r7, r7
  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	4631      	mov	r1, r6
  hhcd->hc[ch_num].speed = speed;
 8001f80:	fb03 4306 	mla	r3, r3, r6, r4
 8001f84:	f883 a018 	strb.w	sl, [r3, #24]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f88:	851f      	strh	r7, [r3, #40]	@ 0x28
  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	f8cd a000 	str.w	sl, [sp]
 8001f90:	e9cd b701 	strd	fp, r7, [sp, #4]
 8001f94:	6820      	ldr	r0, [r4, #0]
 8001f96:	f001 fb03 	bl	80035a0 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f884 33d4 	strb.w	r3, [r4, #980]	@ 0x3d4
}
 8001fa0:	b005      	add	sp, #20
 8001fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hhcd);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	e7fa      	b.n	8001fa0 <HAL_HCD_HC_Init+0x8c>
	...

08001fac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001fae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fb2:	4c19      	ldr	r4, [pc, #100]	@ (8002018 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fca:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fcc:	f7fe ffd0 	bl	8000f70 <HAL_GetTick>
 8001fd0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	03da      	lsls	r2, r3, #15
 8001fd6:	d50c      	bpl.n	8001ff2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fd8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fda:	4d0f      	ldr	r5, [pc, #60]	@ (8002018 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001fe2:	f7fe ffc5 	bl	8000f70 <HAL_GetTick>
 8001fe6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fe8:	686b      	ldr	r3, [r5, #4]
 8001fea:	039b      	lsls	r3, r3, #14
 8001fec:	d50a      	bpl.n	8002004 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e006      	b.n	8002000 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff2:	f7fe ffbd 	bl	8000f70 <HAL_GetTick>
 8001ff6:	1b40      	subs	r0, r0, r5
 8001ff8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001ffc:	d9e9      	bls.n	8001fd2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
}
 8002000:	b003      	add	sp, #12
 8002002:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002004:	f7fe ffb4 	bl	8000f70 <HAL_GetTick>
 8002008:	1b00      	subs	r0, r0, r4
 800200a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800200e:	d9eb      	bls.n	8001fe8 <HAL_PWREx_EnableOverDrive+0x3c>
 8002010:	e7f5      	b.n	8001ffe <HAL_PWREx_EnableOverDrive+0x52>
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	4604      	mov	r4, r0
 8002022:	b918      	cbnz	r0, 800202c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8002026:	b002      	add	sp, #8
 8002028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	07de      	lsls	r6, r3, #31
 8002030:	d410      	bmi.n	8002054 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	079d      	lsls	r5, r3, #30
 8002036:	d45e      	bmi.n	80020f6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	0719      	lsls	r1, r3, #28
 800203c:	f100 80a3 	bmi.w	8002186 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	075a      	lsls	r2, r3, #29
 8002044:	f100 80c4 	bmi.w	80021d0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002048:	69a2      	ldr	r2, [r4, #24]
 800204a:	2a00      	cmp	r2, #0
 800204c:	f040 812e 	bne.w	80022ac <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002050:	2000      	movs	r0, #0
 8002052:	e7e8      	b.n	8002026 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002054:	4b93      	ldr	r3, [pc, #588]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	f002 020c 	and.w	r2, r2, #12
 800205c:	2a04      	cmp	r2, #4
 800205e:	d007      	beq.n	8002070 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	f002 020c 	and.w	r2, r2, #12
 8002066:	2a08      	cmp	r2, #8
 8002068:	d10a      	bne.n	8002080 <HAL_RCC_OscConfig+0x64>
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0259      	lsls	r1, r3, #9
 800206e:	d507      	bpl.n	8002080 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	039a      	lsls	r2, r3, #14
 8002076:	d5dc      	bpl.n	8002032 <HAL_RCC_OscConfig+0x16>
 8002078:	6863      	ldr	r3, [r4, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d9      	bne.n	8002032 <HAL_RCC_OscConfig+0x16>
 800207e:	e7d1      	b.n	8002024 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	4d88      	ldr	r5, [pc, #544]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002088:	d111      	bne.n	80020ae <HAL_RCC_OscConfig+0x92>
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002092:	f7fe ff6d 	bl	8000f70 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4e83      	ldr	r6, [pc, #524]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002098:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	6833      	ldr	r3, [r6, #0]
 800209c:	039b      	lsls	r3, r3, #14
 800209e:	d4c8      	bmi.n	8002032 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe ff66 	bl	8000f70 <HAL_GetTick>
 80020a4:	1b40      	subs	r0, r0, r5
 80020a6:	2864      	cmp	r0, #100	@ 0x64
 80020a8:	d9f7      	bls.n	800209a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e7bb      	b.n	8002026 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	b99b      	cbnz	r3, 80020d8 <HAL_RCC_OscConfig+0xbc>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff56 	bl	8000f70 <HAL_GetTick>
 80020c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	039f      	lsls	r7, r3, #14
 80020ca:	d5b2      	bpl.n	8002032 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe ff50 	bl	8000f70 <HAL_GetTick>
 80020d0:	1b80      	subs	r0, r0, r6
 80020d2:	2864      	cmp	r0, #100	@ 0x64
 80020d4:	d9f7      	bls.n	80020c6 <HAL_RCC_OscConfig+0xaa>
 80020d6:	e7e8      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	d103      	bne.n	80020e8 <HAL_RCC_OscConfig+0xcc>
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e4:	602b      	str	r3, [r5, #0]
 80020e6:	e7d0      	b.n	800208a <HAL_RCC_OscConfig+0x6e>
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f4:	e7cc      	b.n	8002090 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f6:	4b6b      	ldr	r3, [pc, #428]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	f012 0f0c 	tst.w	r2, #12
 80020fe:	d007      	beq.n	8002110 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	f002 020c 	and.w	r2, r2, #12
 8002106:	2a08      	cmp	r2, #8
 8002108:	d111      	bne.n	800212e <HAL_RCC_OscConfig+0x112>
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	025d      	lsls	r5, r3, #9
 800210e:	d40e      	bmi.n	800212e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002110:	4a64      	ldr	r2, [pc, #400]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	0799      	lsls	r1, r3, #30
 8002116:	d502      	bpl.n	800211e <HAL_RCC_OscConfig+0x102>
 8002118:	68e3      	ldr	r3, [r4, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d182      	bne.n	8002024 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	6921      	ldr	r1, [r4, #16]
 8002122:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002126:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800212a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212c:	e784      	b.n	8002038 <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800212e:	68e3      	ldr	r3, [r4, #12]
 8002130:	4d5c      	ldr	r5, [pc, #368]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 8002132:	b1bb      	cbz	r3, 8002164 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800213c:	f7fe ff18 	bl	8000f70 <HAL_GetTick>
 8002140:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	079b      	lsls	r3, r3, #30
 8002146:	d507      	bpl.n	8002158 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	6922      	ldr	r2, [r4, #16]
 800214c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002150:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	e76f      	b.n	8002038 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7fe ff0a 	bl	8000f70 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	2802      	cmp	r0, #2
 8002160:	d9ef      	bls.n	8002142 <HAL_RCC_OscConfig+0x126>
 8002162:	e7a2      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800216c:	f7fe ff00 	bl	8000f70 <HAL_GetTick>
 8002170:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	079f      	lsls	r7, r3, #30
 8002176:	f57f af5f 	bpl.w	8002038 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fef9 	bl	8000f70 <HAL_GetTick>
 800217e:	1b80      	subs	r0, r0, r6
 8002180:	2802      	cmp	r0, #2
 8002182:	d9f6      	bls.n	8002172 <HAL_RCC_OscConfig+0x156>
 8002184:	e791      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002186:	6963      	ldr	r3, [r4, #20]
 8002188:	4d46      	ldr	r5, [pc, #280]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 800218a:	b183      	cbz	r3, 80021ae <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800218c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002194:	f7fe feec 	bl	8000f70 <HAL_GetTick>
 8002198:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800219c:	079b      	lsls	r3, r3, #30
 800219e:	f53f af4f 	bmi.w	8002040 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a2:	f7fe fee5 	bl	8000f70 <HAL_GetTick>
 80021a6:	1b80      	subs	r0, r0, r6
 80021a8:	2802      	cmp	r0, #2
 80021aa:	d9f6      	bls.n	800219a <HAL_RCC_OscConfig+0x17e>
 80021ac:	e77d      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80021ae:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80021b6:	f7fe fedb 	bl	8000f70 <HAL_GetTick>
 80021ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021be:	079f      	lsls	r7, r3, #30
 80021c0:	f57f af3e 	bpl.w	8002040 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7fe fed4 	bl	8000f70 <HAL_GetTick>
 80021c8:	1b80      	subs	r0, r0, r6
 80021ca:	2802      	cmp	r0, #2
 80021cc:	d9f6      	bls.n	80021bc <HAL_RCC_OscConfig+0x1a0>
 80021ce:	e76c      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d0:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 80021d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d4:	00d5      	lsls	r5, r2, #3
 80021d6:	d427      	bmi.n	8002228 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80021da:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ec:	4d2e      	ldr	r5, [pc, #184]	@ (80022a8 <HAL_RCC_OscConfig+0x28c>)
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	05d8      	lsls	r0, r3, #23
 80021f2:	d51b      	bpl.n	800222c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	68a3      	ldr	r3, [r4, #8]
 80021f6:	4d2b      	ldr	r5, [pc, #172]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d127      	bne.n	800224c <HAL_RCC_OscConfig+0x230>
 80021fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002208:	f7fe feb2 	bl	8000f70 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4e25      	ldr	r6, [pc, #148]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800220e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002212:	079a      	lsls	r2, r3, #30
 8002214:	d53f      	bpl.n	8002296 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8002216:	2f00      	cmp	r7, #0
 8002218:	f43f af16 	beq.w	8002048 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <HAL_RCC_OscConfig+0x288>)
 800221e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
 8002226:	e70f      	b.n	8002048 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002228:	2700      	movs	r7, #0
 800222a:	e7df      	b.n	80021ec <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002234:	f7fe fe9c 	bl	8000f70 <HAL_GetTick>
 8002238:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	05d9      	lsls	r1, r3, #23
 800223e:	d4d9      	bmi.n	80021f4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002240:	f7fe fe96 	bl	8000f70 <HAL_GetTick>
 8002244:	1b80      	subs	r0, r0, r6
 8002246:	2864      	cmp	r0, #100	@ 0x64
 8002248:	d9f7      	bls.n	800223a <HAL_RCC_OscConfig+0x21e>
 800224a:	e72e      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	b9ab      	cbnz	r3, 800227a <HAL_RCC_OscConfig+0x25e>
 800224e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	672b      	str	r3, [r5, #112]	@ 0x70
 800225a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002262:	f7fe fe85 	bl	8000f70 <HAL_GetTick>
 8002266:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800226a:	079b      	lsls	r3, r3, #30
 800226c:	d5d3      	bpl.n	8002216 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fe7f 	bl	8000f70 <HAL_GetTick>
 8002272:	1b80      	subs	r0, r0, r6
 8002274:	4540      	cmp	r0, r8
 8002276:	d9f7      	bls.n	8002268 <HAL_RCC_OscConfig+0x24c>
 8002278:	e717      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	2b05      	cmp	r3, #5
 800227c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800227e:	d103      	bne.n	8002288 <HAL_RCC_OscConfig+0x26c>
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	672b      	str	r3, [r5, #112]	@ 0x70
 8002286:	e7b9      	b.n	80021fc <HAL_RCC_OscConfig+0x1e0>
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	672b      	str	r3, [r5, #112]	@ 0x70
 800228e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	e7b5      	b.n	8002202 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fe6b 	bl	8000f70 <HAL_GetTick>
 800229a:	1b40      	subs	r0, r0, r5
 800229c:	4540      	cmp	r0, r8
 800229e:	d9b7      	bls.n	8002210 <HAL_RCC_OscConfig+0x1f4>
 80022a0:	e703      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4d3c      	ldr	r5, [pc, #240]	@ (80023a0 <HAL_RCC_OscConfig+0x384>)
 80022ae:	68ab      	ldr	r3, [r5, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d042      	beq.n	800233e <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 80022b8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c2:	d12f      	bne.n	8002324 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe54 	bl	8000f70 <HAL_GetTick>
 80022c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	682b      	ldr	r3, [r5, #0]
 80022cc:	0199      	lsls	r1, r3, #6
 80022ce:	d423      	bmi.n	8002318 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80022d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80022de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80022e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80022e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80022ea:	0852      	lsrs	r2, r2, #1
 80022ec:	3a01      	subs	r2, #1
 80022ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022f2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022fc:	f7fe fe38 	bl	8000f70 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	4d27      	ldr	r5, [pc, #156]	@ (80023a0 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 8002302:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	682b      	ldr	r3, [r5, #0]
 8002306:	019a      	lsls	r2, r3, #6
 8002308:	f53f aea2 	bmi.w	8002050 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fe30 	bl	8000f70 <HAL_GetTick>
 8002310:	1b00      	subs	r0, r0, r4
 8002312:	2802      	cmp	r0, #2
 8002314:	d9f6      	bls.n	8002304 <HAL_RCC_OscConfig+0x2e8>
 8002316:	e6c8      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fe2a 	bl	8000f70 <HAL_GetTick>
 800231c:	1b80      	subs	r0, r0, r6
 800231e:	2802      	cmp	r0, #2
 8002320:	d9d3      	bls.n	80022ca <HAL_RCC_OscConfig+0x2ae>
 8002322:	e6c2      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002324:	f7fe fe24 	bl	8000f70 <HAL_GetTick>
 8002328:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	f57f ae8f 	bpl.w	8002050 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fe1d 	bl	8000f70 <HAL_GetTick>
 8002336:	1b00      	subs	r0, r0, r4
 8002338:	2802      	cmp	r0, #2
 800233a:	d9f6      	bls.n	800232a <HAL_RCC_OscConfig+0x30e>
 800233c:	e6b5      	b.n	80020aa <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002340:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	f43f ae6f 	beq.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234a:	69e1      	ldr	r1, [r4, #28]
 800234c:	428a      	cmp	r2, r1
 800234e:	f47f ae69 	bne.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	6a21      	ldr	r1, [r4, #32]
 8002358:	428a      	cmp	r2, r1
 800235a:	f47f ae63 	bne.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002364:	401a      	ands	r2, r3
 8002366:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800236a:	f47f ae5b 	bne.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800236e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002370:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800237c:	f47f ae52 	bne.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002380:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002384:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002386:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800238a:	f47f ae4b 	bne.w	8002024 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800238e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002390:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002398:	bf14      	ite	ne
 800239a:	2001      	movne	r0, #1
 800239c:	2000      	moveq	r0, #0
 800239e:	e642      	b.n	8002026 <HAL_RCC_OscConfig+0xa>
 80023a0:	40023800 	.word	0x40023800

080023a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a4:	4913      	ldr	r1, [pc, #76]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80023a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a8:	688b      	ldr	r3, [r1, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d01b      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x46>
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11b      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ba:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023c0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023c8:	bf1a      	itte	ne
 80023ca:	480b      	ldrne	r0, [pc, #44]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80023cc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	480b      	ldreq	r0, [pc, #44]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x58>)
 80023d0:	fba1 0100 	umull	r0, r1, r1, r0
 80023d4:	f7fd ff8c 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023e0:	3301      	adds	r3, #1
 80023e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80023e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023e8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ea:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80023ec:	e7fc      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80023ee:	4803      	ldr	r0, [pc, #12]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80023f0:	e7fa      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x44>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	007a1200 	.word	0x007a1200
 80023fc:	00f42400 	.word	0x00f42400

08002400 <HAL_RCC_ClockConfig>:
{
 8002400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002404:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002406:	4604      	mov	r4, r0
 8002408:	b910      	cbnz	r0, 8002410 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800240a:	2001      	movs	r0, #1
}
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4a45      	ldr	r2, [pc, #276]	@ (8002528 <HAL_RCC_ClockConfig+0x128>)
 8002412:	6813      	ldr	r3, [r2, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	428b      	cmp	r3, r1
 800241a:	d328      	bcc.n	800246e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	6821      	ldr	r1, [r4, #0]
 800241e:	078f      	lsls	r7, r1, #30
 8002420:	d430      	bmi.n	8002484 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	07c8      	lsls	r0, r1, #31
 8002424:	d443      	bmi.n	80024ae <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002426:	4a40      	ldr	r2, [pc, #256]	@ (8002528 <HAL_RCC_ClockConfig+0x128>)
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	42ab      	cmp	r3, r5
 8002430:	d866      	bhi.n	8002500 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	0751      	lsls	r1, r2, #29
 8002436:	d46f      	bmi.n	8002518 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	0713      	lsls	r3, r2, #28
 800243a:	d507      	bpl.n	800244c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243c:	4a3b      	ldr	r2, [pc, #236]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
 800243e:	6921      	ldr	r1, [r4, #16]
 8002440:	6893      	ldr	r3, [r2, #8]
 8002442:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002446:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800244a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244c:	f7ff ffaa 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002450:	4b36      	ldr	r3, [pc, #216]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
 8002452:	4a37      	ldr	r2, [pc, #220]	@ (8002530 <HAL_RCC_ClockConfig+0x130>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	40d8      	lsrs	r0, r3
 800245e:	4b35      	ldr	r3, [pc, #212]	@ (8002534 <HAL_RCC_ClockConfig+0x134>)
 8002460:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002462:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_RCC_ClockConfig+0x138>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f7fe fd3f 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 800246a:	2000      	movs	r0, #0
 800246c:	e7ce      	b.n	800240c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	6813      	ldr	r3, [r2, #0]
 8002470:	f023 030f 	bic.w	r3, r3, #15
 8002474:	430b      	orrs	r3, r1
 8002476:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	428b      	cmp	r3, r1
 8002480:	d1c3      	bne.n	800240a <HAL_RCC_ClockConfig+0xa>
 8002482:	e7cb      	b.n	800241c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	f011 0f04 	tst.w	r1, #4
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
 800248a:	d003      	beq.n	8002494 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002492:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	070e      	lsls	r6, r1, #28
 8002496:	d503      	bpl.n	80024a0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800249e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68a0      	ldr	r0, [r4, #8]
 80024a4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80024a8:	4302      	orrs	r2, r0
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	e7b9      	b.n	8002422 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	6861      	ldr	r1, [r4, #4]
 80024b0:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
 80024b2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	d11b      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	d0a5      	beq.n	800240a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c4:	4f19      	ldr	r7, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	f022 0203 	bic.w	r2, r2, #3
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80024ce:	f7fe fd4f 	bl	8000f70 <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6862      	ldr	r2, [r4, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024e0:	d0a1      	beq.n	8002426 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe fd45 	bl	8000f70 <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	4540      	cmp	r0, r8
 80024ea:	d9f3      	bls.n	80024d4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e78d      	b.n	800240c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f0:	2902      	cmp	r1, #2
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80024f8:	e7e0      	b.n	80024bc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	f012 0f02 	tst.w	r2, #2
 80024fe:	e7dd      	b.n	80024bc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	f023 030f 	bic.w	r3, r3, #15
 8002506:	432b      	orrs	r3, r5
 8002508:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	42ab      	cmp	r3, r5
 8002512:	f47f af7a 	bne.w	800240a <HAL_RCC_ClockConfig+0xa>
 8002516:	e78c      	b.n	8002432 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4904      	ldr	r1, [pc, #16]	@ (800252c <HAL_RCC_ClockConfig+0x12c>)
 800251a:	68e0      	ldr	r0, [r4, #12]
 800251c:	688b      	ldr	r3, [r1, #8]
 800251e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002522:	4303      	orrs	r3, r0
 8002524:	608b      	str	r3, [r1, #8]
 8002526:	e787      	b.n	8002438 <HAL_RCC_ClockConfig+0x38>
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	0800743a 	.word	0x0800743a
 8002534:	2000001c 	.word	0x2000001c
 8002538:	20000024 	.word	0x20000024

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x14>)
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	4a03      	ldr	r2, [pc, #12]	@ (8002558 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800254a:	6810      	ldr	r0, [r2, #0]
}
 800254c:	40d8      	lsrs	r0, r3
 800254e:	4770      	bx	lr
 8002550:	40023800 	.word	0x40023800
 8002554:	0800744a 	.word	0x0800744a
 8002558:	2000001c 	.word	0x2000001c

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x14>)
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800256a:	6810      	ldr	r0, [r2, #0]
}
 800256c:	40d8      	lsrs	r0, r3
 800256e:	4770      	bx	lr
 8002570:	40023800 	.word	0x40023800
 8002574:	0800744a 	.word	0x0800744a
 8002578:	2000001c 	.word	0x2000001c

0800257c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800257c:	6803      	ldr	r3, [r0, #0]
{
 800257e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002582:	f013 0601 	ands.w	r6, r3, #1
{
 8002586:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002588:	d00b      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800258a:	4ab1      	ldr	r2, [pc, #708]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800258c:	6891      	ldr	r1, [r2, #8]
 800258e:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8002592:	6091      	str	r1, [r2, #8]
 8002594:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8002596:	6891      	ldr	r1, [r2, #8]
 8002598:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800259a:	fab6 f686 	clz	r6, r6
 800259e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025a0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a2:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 80025a6:	d012      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a8:	49a9      	ldr	r1, [pc, #676]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025aa:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80025ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025b0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 80025b8:	bf08      	it	eq
 80025ba:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025bc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c0:	bf16      	itet	ne
 80025c2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80025c6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ca:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025ce:	02d9      	lsls	r1, r3, #11
 80025d0:	d510      	bpl.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d2:	489f      	ldr	r0, [pc, #636]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025d4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80025d6:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025da:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025de:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80025e2:	ea42 0201 	orr.w	r2, r2, r1
 80025e6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025ea:	f000 81aa 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80025ee:	2900      	cmp	r1, #0
 80025f0:	bf08      	it	eq
 80025f2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80025f4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80025f8:	bf18      	it	ne
 80025fa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025fc:	069a      	lsls	r2, r3, #26
 80025fe:	d532      	bpl.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b93      	ldr	r3, [pc, #588]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002602:	4f94      	ldr	r7, [pc, #592]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002606:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe fca7 	bl	8000f70 <HAL_GetTick>
 8002622:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	05db      	lsls	r3, r3, #23
 8002628:	f140 818d 	bpl.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262c:	4f88      	ldr	r7, [pc, #544]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002632:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002636:	f040 8191 	bne.w	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800263c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002640:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002644:	4a82      	ldr	r2, [pc, #520]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002646:	f040 81ae 	bne.w	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800264a:	6891      	ldr	r1, [r2, #8]
 800264c:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8002650:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8002654:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8002658:	4301      	orrs	r1, r0
 800265a:	6091      	str	r1, [r2, #8]
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002662:	430b      	orrs	r3, r1
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	06da      	lsls	r2, r3, #27
 800266a:	d50c      	bpl.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800266c:	4a78      	ldr	r2, [pc, #480]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800266e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002672:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8002676:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800267a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800267e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002680:	4301      	orrs	r1, r0
 8002682:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002686:	045f      	lsls	r7, r3, #17
 8002688:	d508      	bpl.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268a:	4971      	ldr	r1, [pc, #452]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800268c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800268e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002692:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002696:	4302      	orrs	r2, r0
 8002698:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	0418      	lsls	r0, r3, #16
 800269e:	d508      	bpl.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a0:	496b      	ldr	r1, [pc, #428]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026a2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80026a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80026a8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80026ac:	4302      	orrs	r2, r0
 80026ae:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	03d9      	lsls	r1, r3, #15
 80026b4:	d508      	bpl.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b6:	4966      	ldr	r1, [pc, #408]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026b8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80026ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80026be:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80026c2:	4302      	orrs	r2, r0
 80026c4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026c8:	039a      	lsls	r2, r3, #14
 80026ca:	d508      	bpl.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026cc:	4960      	ldr	r1, [pc, #384]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026ce:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80026d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80026d4:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80026d8:	4302      	orrs	r2, r0
 80026da:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	065f      	lsls	r7, r3, #25
 80026e0:	d508      	bpl.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e2:	495b      	ldr	r1, [pc, #364]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026e4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80026e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80026ea:	f022 0203 	bic.w	r2, r2, #3
 80026ee:	4302      	orrs	r2, r0
 80026f0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f4:	0618      	lsls	r0, r3, #24
 80026f6:	d508      	bpl.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f8:	4955      	ldr	r1, [pc, #340]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026fa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80026fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002700:	f022 020c 	bic.w	r2, r2, #12
 8002704:	4302      	orrs	r2, r0
 8002706:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800270a:	05d9      	lsls	r1, r3, #23
 800270c:	d508      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800270e:	4950      	ldr	r1, [pc, #320]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002710:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002712:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002716:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800271a:	4302      	orrs	r2, r0
 800271c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002720:	059a      	lsls	r2, r3, #22
 8002722:	d508      	bpl.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002724:	494a      	ldr	r1, [pc, #296]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002726:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002728:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800272c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002730:	4302      	orrs	r2, r0
 8002732:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002736:	055f      	lsls	r7, r3, #21
 8002738:	d508      	bpl.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800273a:	4945      	ldr	r1, [pc, #276]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800273c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800273e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002742:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002746:	4302      	orrs	r2, r0
 8002748:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800274c:	0518      	lsls	r0, r3, #20
 800274e:	d508      	bpl.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002750:	493f      	ldr	r1, [pc, #252]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002754:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002758:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800275c:	4302      	orrs	r2, r0
 800275e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002762:	04d9      	lsls	r1, r3, #19
 8002764:	d508      	bpl.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002766:	493a      	ldr	r1, [pc, #232]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002768:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800276a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800276e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002772:	4302      	orrs	r2, r0
 8002774:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002778:	049a      	lsls	r2, r3, #18
 800277a:	d508      	bpl.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800277c:	4934      	ldr	r1, [pc, #208]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002780:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002784:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002788:	4302      	orrs	r2, r0
 800278a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278e:	025f      	lsls	r7, r3, #9
 8002790:	d508      	bpl.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002792:	492f      	ldr	r1, [pc, #188]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002794:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002796:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800279a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800279e:	4302      	orrs	r2, r0
 80027a0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027a4:	0298      	lsls	r0, r3, #10
 80027a6:	d50c      	bpl.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027a8:	4829      	ldr	r0, [pc, #164]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027aa:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80027ac:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80027b0:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027b4:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80027b8:	bf08      	it	eq
 80027ba:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027bc:	430a      	orrs	r2, r1
 80027be:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80027c2:	f013 0f08 	tst.w	r3, #8
 80027c6:	bf18      	it	ne
 80027c8:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ca:	0359      	lsls	r1, r3, #13
 80027cc:	d508      	bpl.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ce:	4920      	ldr	r1, [pc, #128]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80027d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80027d6:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027da:	4302      	orrs	r2, r0
 80027dc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027e0:	021a      	lsls	r2, r3, #8
 80027e2:	d509      	bpl.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027e4:	491a      	ldr	r1, [pc, #104]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027e6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80027ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80027ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80027f2:	4302      	orrs	r2, r0
 80027f4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027f8:	015f      	lsls	r7, r3, #5
 80027fa:	d509      	bpl.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027fc:	4914      	ldr	r1, [pc, #80]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027fe:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8002802:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002806:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800280a:	4302      	orrs	r2, r0
 800280c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002810:	0118      	lsls	r0, r3, #4
 8002812:	d509      	bpl.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002814:	490e      	ldr	r1, [pc, #56]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002816:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800281a:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800281e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002822:	4302      	orrs	r2, r0
 8002824:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002828:	00d9      	lsls	r1, r3, #3
 800282a:	d509      	bpl.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800282c:	4908      	ldr	r1, [pc, #32]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800282e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8002832:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002836:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800283a:	4302      	orrs	r2, r0
 800283c:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002840:	2e01      	cmp	r6, #1
 8002842:	f000 80b4 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002846:	019a      	lsls	r2, r3, #6
 8002848:	f100 80b1 	bmi.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800284c:	e004      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002858:	2d01      	cmp	r5, #1
 800285a:	d170      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800285c:	4d9d      	ldr	r5, [pc, #628]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800285e:	682b      	ldr	r3, [r5, #0]
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002864:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fb83 	bl	8000f70 <HAL_GetTick>
 800286a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	009f      	lsls	r7, r3, #2
 8002870:	f100 8121 	bmi.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002874:	6821      	ldr	r1, [r4, #0]
 8002876:	030e      	lsls	r6, r1, #12
 8002878:	d501      	bpl.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x302>
 800287a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800287c:	b11b      	cbz	r3, 8002886 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800287e:	02cd      	lsls	r5, r1, #11
 8002880:	d51d      	bpl.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002882:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002884:	b9db      	cbnz	r3, 80028be <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002886:	4a93      	ldr	r2, [pc, #588]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002888:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800288c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002894:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002898:	4303      	orrs	r3, r0
 800289a:	6960      	ldr	r0, [r4, #20]
 800289c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028a0:	69a0      	ldr	r0, [r4, #24]
 80028a2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80028a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80028ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80028b0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80028b4:	3801      	subs	r0, #1
 80028b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80028ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028be:	0288      	lsls	r0, r1, #10
 80028c0:	d515      	bpl.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80028c2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80028c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028c8:	d111      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ca:	4a82      	ldr	r2, [pc, #520]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80028cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028d0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028d4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80028d8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80028dc:	4303      	orrs	r3, r0
 80028de:	6960      	ldr	r0, [r4, #20]
 80028e0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028e4:	6a20      	ldr	r0, [r4, #32]
 80028e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80028ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028ee:	070a      	lsls	r2, r1, #28
 80028f0:	d519      	bpl.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028f2:	4a78      	ldr	r2, [pc, #480]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80028f4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028fc:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002904:	430b      	orrs	r3, r1
 8002906:	6961      	ldr	r1, [r4, #20]
 8002908:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800290c:	69e1      	ldr	r1, [r4, #28]
 800290e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002912:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002916:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800291a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800291c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002920:	430b      	orrs	r3, r1
 8002922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002926:	4c6b      	ldr	r4, [pc, #428]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fb1e 	bl	8000f70 <HAL_GetTick>
 8002934:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	f140 80c3 	bpl.w	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800293e:	2000      	movs	r0, #0
 8002940:	e009      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8002942:	2601      	movs	r6, #1
 8002944:	e656      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fb13 	bl	8000f70 <HAL_GetTick>
 800294a:	eba0 0008 	sub.w	r0, r0, r8
 800294e:	2864      	cmp	r0, #100	@ 0x64
 8002950:	f67f ae68 	bls.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002954:	2003      	movs	r0, #3
}
 8002956:	b003      	add	sp, #12
 8002958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002960:	4293      	cmp	r3, r2
 8002962:	f43f ae6a 	beq.w	800263a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002968:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800296e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002972:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002974:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002976:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800297a:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800297c:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800297e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002980:	07d8      	lsls	r0, r3, #31
 8002982:	f57f ae5a 	bpl.w	800263a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8002986:	f7fe faf3 	bl	8000f70 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800298e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002992:	0799      	lsls	r1, r3, #30
 8002994:	f53f ae51 	bmi.w	800263a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe faea 	bl	8000f70 <HAL_GetTick>
 800299c:	eba0 0008 	sub.w	r0, r0, r8
 80029a0:	4548      	cmp	r0, r9
 80029a2:	d9f5      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80029a4:	e7d6      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a6:	6891      	ldr	r1, [r2, #8]
 80029a8:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80029ac:	e655      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 80029ae:	4e49      	ldr	r6, [pc, #292]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80029b0:	6833      	ldr	r3, [r6, #0]
 80029b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029b6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80029b8:	f7fe fada 	bl	8000f70 <HAL_GetTick>
 80029bc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029be:	6833      	ldr	r3, [r6, #0]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	d472      	bmi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029c4:	6822      	ldr	r2, [r4, #0]
 80029c6:	07d7      	lsls	r7, r2, #31
 80029c8:	d512      	bpl.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80029ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80029cc:	b983      	cbnz	r3, 80029f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ce:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029d2:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029da:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80029de:	430b      	orrs	r3, r1
 80029e0:	6861      	ldr	r1, [r4, #4]
 80029e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80029e6:	68a1      	ldr	r1, [r4, #8]
 80029e8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80029ec:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029f0:	0316      	lsls	r6, r2, #12
 80029f2:	d503      	bpl.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x480>
 80029f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80029f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029fa:	d005      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029fc:	02d0      	lsls	r0, r2, #11
 80029fe:	d51e      	bpl.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a06:	d11a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a08:	4932      	ldr	r1, [pc, #200]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a0a:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a0e:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a16:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002a1a:	4303      	orrs	r3, r0
 8002a1c:	6860      	ldr	r0, [r4, #4]
 8002a1e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a22:	68e0      	ldr	r0, [r4, #12]
 8002a24:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a2c:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8002a30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a32:	f020 001f 	bic.w	r0, r0, #31
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4303      	orrs	r3, r0
 8002a3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a3e:	01d1      	lsls	r1, r2, #7
 8002a40:	d511      	bpl.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a42:	4924      	ldr	r1, [pc, #144]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a44:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a48:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a4c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002a50:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002a54:	4303      	orrs	r3, r0
 8002a56:	6860      	ldr	r0, [r4, #4]
 8002a58:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a5c:	6920      	ldr	r0, [r4, #16]
 8002a5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a66:	0192      	lsls	r2, r2, #6
 8002a68:	d50d      	bpl.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	6862      	ldr	r2, [r4, #4]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a74:	68e2      	ldr	r2, [r4, #12]
 8002a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a7a:	68a2      	ldr	r2, [r4, #8]
 8002a7c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002a86:	4e13      	ldr	r6, [pc, #76]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a88:	6833      	ldr	r3, [r6, #0]
 8002a8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a8e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a90:	f7fe fa6e 	bl	8000f70 <HAL_GetTick>
 8002a94:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a96:	6833      	ldr	r3, [r6, #0]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	f53f aedd 	bmi.w	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9e:	f7fe fa67 	bl	8000f70 <HAL_GetTick>
 8002aa2:	1bc0      	subs	r0, r0, r7
 8002aa4:	2864      	cmp	r0, #100	@ 0x64
 8002aa6:	d9f6      	bls.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aa8:	e754      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002aaa:	f7fe fa61 	bl	8000f70 <HAL_GetTick>
 8002aae:	1bc0      	subs	r0, r0, r7
 8002ab0:	2864      	cmp	r0, #100	@ 0x64
 8002ab2:	d984      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002ab4:	e74e      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ab6:	f7fe fa5b 	bl	8000f70 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	2864      	cmp	r0, #100	@ 0x64
 8002abe:	f67f aed5 	bls.w	800286c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002ac2:	e747      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac4:	f7fe fa54 	bl	8000f70 <HAL_GetTick>
 8002ac8:	1b40      	subs	r0, r0, r5
 8002aca:	2864      	cmp	r0, #100	@ 0x64
 8002acc:	f67f af33 	bls.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002ad0:	e740      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	e852 3f00 	ldrex	r3, [r2]
 8002ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d1f5      	bne.n	8002ad8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	f102 0308 	add.w	r3, r2, #8
 8002af0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	f102 0c08 	add.w	ip, r2, #8
 8002afc:	e84c 3100 	strex	r1, r3, [ip]
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d1f3      	bne.n	8002aec <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b04:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	e842 3100 	strex	r1, r3, [r2]
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d1f7      	bne.n	8002b0a <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	2300      	movs	r3, #0
 8002b22:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b24:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002b26:	4770      	bx	lr

08002b28 <HAL_UART_Transmit_DMA>:
{
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2e:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 8002b30:	2d20      	cmp	r5, #32
 8002b32:	d130      	bne.n	8002b96 <HAL_UART_Transmit_DMA+0x6e>
    if ((pData == NULL) || (Size == 0U))
 8002b34:	b1e1      	cbz	r1, 8002b70 <HAL_UART_Transmit_DMA+0x48>
 8002b36:	b1da      	cbz	r2, 8002b70 <HAL_UART_Transmit_DMA+0x48>
    huart->TxXferCount = Size;
 8002b38:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8002b3e:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b42:	2221      	movs	r2, #33	@ 0x21
    if (huart->hdmatx != NULL)
 8002b44:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b46:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
    huart->pTxBuffPtr  = pData;
 8002b4a:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b4c:	67e2      	str	r2, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b4e:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8002b50:	b180      	cbz	r0, 8002b74 <HAL_UART_Transmit_DMA+0x4c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b52:	4f12      	ldr	r7, [pc, #72]	@ (8002b9c <HAL_UART_Transmit_DMA+0x74>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b54:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b56:	63c7      	str	r7, [r0, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b58:	4f11      	ldr	r7, [pc, #68]	@ (8002ba0 <HAL_UART_Transmit_DMA+0x78>)
 8002b5a:	6407      	str	r7, [r0, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b5c:	4f11      	ldr	r7, [pc, #68]	@ (8002ba4 <HAL_UART_Transmit_DMA+0x7c>)
      huart->hdmatx->XferAbortCallback = NULL;
 8002b5e:	e9c0 7613 	strd	r7, r6, [r0, #76]	@ 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b62:	f7fe fb61 	bl	8001228 <HAL_DMA_Start_IT>
 8002b66:	b128      	cbz	r0, 8002b74 <HAL_UART_Transmit_DMA+0x4c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002b68:	2310      	movs	r3, #16
 8002b6a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        huart->gState = HAL_UART_STATE_READY;
 8002b6e:	67e5      	str	r5, [r4, #124]	@ 0x7c
      return HAL_ERROR;
 8002b70:	2001      	movs	r0, #1
}
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002b74:	2240      	movs	r2, #64	@ 0x40
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	621a      	str	r2, [r3, #32]
 8002b7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	f102 0308 	add.w	r3, r2, #8
 8002b80:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	f102 0108 	add.w	r1, r2, #8
 8002b8c:	e841 3000 	strex	r0, r3, [r1]
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d1f3      	bne.n	8002b7c <HAL_UART_Transmit_DMA+0x54>
 8002b94:	e7ed      	b.n	8002b72 <HAL_UART_Transmit_DMA+0x4a>
    return HAL_BUSY;
 8002b96:	2002      	movs	r0, #2
 8002b98:	e7eb      	b.n	8002b72 <HAL_UART_Transmit_DMA+0x4a>
 8002b9a:	bf00      	nop
 8002b9c:	08002bab 	.word	0x08002bab
 8002ba0:	08002bf3 	.word	0x08002bf3
 8002ba4:	08002bff 	.word	0x08002bff

08002ba8 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8002ba8:	4770      	bx	lr

08002baa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002baa:	b508      	push	{r3, lr}
 8002bac:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bae:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bb6:	d018      	beq.n	8002bea <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	f102 0308 	add.w	r3, r2, #8
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	3208      	adds	r2, #8
 8002bce:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002bd2:	6802      	ldr	r2, [r0, #0]
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d1f2      	bne.n	8002bbe <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	e842 3100 	strex	r1, r3, [r2]
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d1f7      	bne.n	8002bd8 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002be8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002bea:	f7ff ffdd 	bl	8002ba8 <HAL_UART_TxCpltCallback>
}
 8002bee:	e7fb      	b.n	8002be8 <UART_DMATransmitCplt+0x3e>

08002bf0 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8002bf0:	4770      	bx	lr

08002bf2 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002bf2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002bf4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002bf6:	f7ff fffb 	bl	8002bf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfa:	bd08      	pop	{r3, pc}

08002bfc <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8002bfc:	4770      	bx	lr

08002bfe <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bfe:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c00:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002c02:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002c04:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8002c08:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c0a:	689c      	ldr	r4, [r3, #8]
 8002c0c:	0624      	lsls	r4, r4, #24
 8002c0e:	d50e      	bpl.n	8002c2e <UART_DMAError+0x30>
 8002c10:	2a21      	cmp	r2, #33	@ 0x21
 8002c12:	d10c      	bne.n	8002c2e <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c1e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	e843 2400 	strex	r4, r2, [r3]
 8002c26:	2c00      	cmp	r4, #0
 8002c28:	d1f7      	bne.n	8002c1a <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	065b      	lsls	r3, r3, #25
 8002c32:	d506      	bpl.n	8002c42 <UART_DMAError+0x44>
 8002c34:	2922      	cmp	r1, #34	@ 0x22
 8002c36:	d104      	bne.n	8002c42 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8002c3e:	f7ff ff4b 	bl	8002ad8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c42:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c4e:	f7ff ffd5 	bl	8002bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c52:	bd10      	pop	{r4, pc}

08002c54 <UART_SetConfig>:
{
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c58:	69c0      	ldr	r0, [r0, #28]
 8002c5a:	6921      	ldr	r1, [r4, #16]
 8002c5c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c5e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c60:	430a      	orrs	r2, r1
 8002c62:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c64:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c66:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c68:	497d      	ldr	r1, [pc, #500]	@ (8002e60 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c6a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 8002c6e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c70:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c72:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c80:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c82:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002c84:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c86:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8e:	4a75      	ldr	r2, [pc, #468]	@ (8002e64 <UART_SetConfig+0x210>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d113      	bne.n	8002cbc <UART_SetConfig+0x68>
 8002c94:	4b74      	ldr	r3, [pc, #464]	@ (8002e68 <UART_SetConfig+0x214>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	f000 80a8 	beq.w	8002df4 <UART_SetConfig+0x1a0>
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d021      	beq.n	8002cec <UART_SetConfig+0x98>
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f040 80bd 	bne.w	8002e28 <UART_SetConfig+0x1d4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cae:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002cb2:	f040 809c 	bne.w	8002dee <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb6:	f7ff fb75 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
        break;
 8002cba:	e092      	b.n	8002de2 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8002e6c <UART_SetConfig+0x218>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d11b      	bne.n	8002cfa <UART_SetConfig+0xa6>
 8002cc2:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <UART_SetConfig+0x214>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	f000 8091 	beq.w	8002df4 <UART_SetConfig+0x1a0>
 8002cd2:	d809      	bhi.n	8002ce8 <UART_SetConfig+0x94>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80ad 	beq.w	8002e34 <UART_SetConfig+0x1e0>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d0e7      	beq.n	8002cae <UART_SetConfig+0x5a>
        ret = HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002ce0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002ce2:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d1f8      	bne.n	8002cde <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002cf0:	f000 8084 	beq.w	8002dfc <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 8002cf4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cf8:	e0a3      	b.n	8002e42 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <UART_SetConfig+0x21c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10e      	bne.n	8002d1e <UART_SetConfig+0xca>
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <UART_SetConfig+0x214>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d072      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002d0e:	d804      	bhi.n	8002d1a <UART_SetConfig+0xc6>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 808f 	beq.w	8002e34 <UART_SetConfig+0x1e0>
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	e7e0      	b.n	8002cdc <UART_SetConfig+0x88>
 8002d1a:	2b30      	cmp	r3, #48	@ 0x30
 8002d1c:	e7e5      	b.n	8002cea <UART_SetConfig+0x96>
 8002d1e:	4a55      	ldr	r2, [pc, #340]	@ (8002e74 <UART_SetConfig+0x220>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10d      	bne.n	8002d40 <UART_SetConfig+0xec>
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <UART_SetConfig+0x214>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d2e:	2b80      	cmp	r3, #128	@ 0x80
 8002d30:	d060      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002d32:	d803      	bhi.n	8002d3c <UART_SetConfig+0xe8>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d07d      	beq.n	8002e34 <UART_SetConfig+0x1e0>
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	e7cf      	b.n	8002cdc <UART_SetConfig+0x88>
 8002d3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d3e:	e7d4      	b.n	8002cea <UART_SetConfig+0x96>
 8002d40:	4a4d      	ldr	r2, [pc, #308]	@ (8002e78 <UART_SetConfig+0x224>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d110      	bne.n	8002d68 <UART_SetConfig+0x114>
 8002d46:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <UART_SetConfig+0x214>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d54:	d04e      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002d56:	d804      	bhi.n	8002d62 <UART_SetConfig+0x10e>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d06b      	beq.n	8002e34 <UART_SetConfig+0x1e0>
 8002d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d60:	e7bc      	b.n	8002cdc <UART_SetConfig+0x88>
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d66:	e7c0      	b.n	8002cea <UART_SetConfig+0x96>
 8002d68:	4a44      	ldr	r2, [pc, #272]	@ (8002e7c <UART_SetConfig+0x228>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d110      	bne.n	8002d90 <UART_SetConfig+0x13c>
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <UART_SetConfig+0x214>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7c:	d03a      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002d7e:	d804      	bhi.n	8002d8a <UART_SetConfig+0x136>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d051      	beq.n	8002e28 <UART_SetConfig+0x1d4>
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d88:	e7a8      	b.n	8002cdc <UART_SetConfig+0x88>
 8002d8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d8e:	e7ac      	b.n	8002cea <UART_SetConfig+0x96>
 8002d90:	4a3b      	ldr	r2, [pc, #236]	@ (8002e80 <UART_SetConfig+0x22c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d110      	bne.n	8002db8 <UART_SetConfig+0x164>
 8002d96:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <UART_SetConfig+0x214>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da4:	d026      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002da6:	d804      	bhi.n	8002db2 <UART_SetConfig+0x15e>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d043      	beq.n	8002e34 <UART_SetConfig+0x1e0>
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db0:	e794      	b.n	8002cdc <UART_SetConfig+0x88>
 8002db2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002db6:	e798      	b.n	8002cea <UART_SetConfig+0x96>
 8002db8:	4a32      	ldr	r2, [pc, #200]	@ (8002e84 <UART_SetConfig+0x230>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d18f      	bne.n	8002cde <UART_SetConfig+0x8a>
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <UART_SetConfig+0x214>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dcc:	d012      	beq.n	8002df4 <UART_SetConfig+0x1a0>
 8002dce:	d803      	bhi.n	8002dd8 <UART_SetConfig+0x184>
 8002dd0:	b383      	cbz	r3, 8002e34 <UART_SetConfig+0x1e0>
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd6:	e781      	b.n	8002cdc <UART_SetConfig+0x88>
 8002dd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ddc:	e785      	b.n	8002cea <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7ff fbad 	bl	800253c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002de2:	b958      	cbnz	r0, 8002dfc <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de4:	2000      	movs	r0, #0
 8002de6:	e77b      	b.n	8002ce0 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de8:	f7ff fbb8 	bl	800255c <HAL_RCC_GetPCLK2Freq>
        break;
 8002dec:	e027      	b.n	8002e3e <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8002dee:	f7ff fad9 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
        break;
 8002df2:	e024      	b.n	8002e3e <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8002df8:	4823      	ldr	r0, [pc, #140]	@ (8002e88 <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfa:	d122      	bne.n	8002e42 <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	0853      	lsrs	r3, r2, #1
 8002e00:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002e04:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e08:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002e0c:	f1a3 0110 	sub.w	r1, r3, #16
 8002e10:	4291      	cmp	r1, r2
 8002e12:	f63f af64 	bhi.w	8002cde <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e16:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002e1e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e20:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60cb      	str	r3, [r1, #12]
 8002e26:	e7dd      	b.n	8002de4 <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e28:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e2c:	d1dc      	bne.n	8002de8 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e2e:	f7ff fb95 	bl	800255c <HAL_RCC_GetPCLK2Freq>
        break;
 8002e32:	e7d6      	b.n	8002de2 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e38:	d0d1      	beq.n	8002dde <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7ff fb7f 	bl	800253c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d0d0      	beq.n	8002de4 <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e42:	6862      	ldr	r2, [r4, #4]
 8002e44:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002e50:	f1a3 0110 	sub.w	r1, r3, #16
 8002e54:	4291      	cmp	r1, r2
 8002e56:	f63f af42 	bhi.w	8002cde <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	60d3      	str	r3, [r2, #12]
 8002e5e:	e7c1      	b.n	8002de4 <UART_SetConfig+0x190>
 8002e60:	efff69f3 	.word	0xefff69f3
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	40004800 	.word	0x40004800
 8002e74:	40004c00 	.word	0x40004c00
 8002e78:	40005000 	.word	0x40005000
 8002e7c:	40011400 	.word	0x40011400
 8002e80:	40007800 	.word	0x40007800
 8002e84:	40007c00 	.word	0x40007c00
 8002e88:	00f42400 	.word	0x00f42400

08002e8c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e8e:	071a      	lsls	r2, r3, #28
{
 8002e90:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e92:	d506      	bpl.n	8002ea2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e94:	6801      	ldr	r1, [r0, #0]
 8002e96:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002e98:	684a      	ldr	r2, [r1, #4]
 8002e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e9e:	4322      	orrs	r2, r4
 8002ea0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ea2:	07dc      	lsls	r4, r3, #31
 8002ea4:	d506      	bpl.n	8002eb4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea6:	6801      	ldr	r1, [r0, #0]
 8002ea8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002eaa:	684a      	ldr	r2, [r1, #4]
 8002eac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002eb0:	4322      	orrs	r2, r4
 8002eb2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb4:	0799      	lsls	r1, r3, #30
 8002eb6:	d506      	bpl.n	8002ec6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb8:	6801      	ldr	r1, [r0, #0]
 8002eba:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002ebc:	684a      	ldr	r2, [r1, #4]
 8002ebe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ec2:	4322      	orrs	r2, r4
 8002ec4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec6:	075a      	lsls	r2, r3, #29
 8002ec8:	d506      	bpl.n	8002ed8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eca:	6801      	ldr	r1, [r0, #0]
 8002ecc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002ece:	684a      	ldr	r2, [r1, #4]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ed4:	4322      	orrs	r2, r4
 8002ed6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed8:	06dc      	lsls	r4, r3, #27
 8002eda:	d506      	bpl.n	8002eea <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002edc:	6801      	ldr	r1, [r0, #0]
 8002ede:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002ee0:	688a      	ldr	r2, [r1, #8]
 8002ee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ee6:	4322      	orrs	r2, r4
 8002ee8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eea:	0699      	lsls	r1, r3, #26
 8002eec:	d506      	bpl.n	8002efc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eee:	6801      	ldr	r1, [r0, #0]
 8002ef0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002ef2:	688a      	ldr	r2, [r1, #8]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ef8:	4322      	orrs	r2, r4
 8002efa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002efc:	065a      	lsls	r2, r3, #25
 8002efe:	d510      	bpl.n	8002f22 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f00:	6801      	ldr	r1, [r0, #0]
 8002f02:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002f04:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f06:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f0a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002f0e:	ea42 0204 	orr.w	r2, r2, r4
 8002f12:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f14:	d105      	bne.n	8002f22 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f16:	684a      	ldr	r2, [r1, #4]
 8002f18:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002f1a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002f1e:	4322      	orrs	r2, r4
 8002f20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f22:	061b      	lsls	r3, r3, #24
 8002f24:	d506      	bpl.n	8002f34 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f26:	6802      	ldr	r2, [r0, #0]
 8002f28:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002f2a:	6853      	ldr	r3, [r2, #4]
 8002f2c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6053      	str	r3, [r2, #4]
}
 8002f34:	bd10      	pop	{r4, pc}

08002f36 <UART_WaitOnFlagUntilTimeout>:
{
 8002f36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f3a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f3e:	4604      	mov	r4, r0
 8002f40:	460d      	mov	r5, r1
 8002f42:	4617      	mov	r7, r2
 8002f44:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	69d3      	ldr	r3, [r2, #28]
 8002f4a:	ea35 0303 	bics.w	r3, r5, r3
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	42bb      	cmp	r3, r7
 8002f56:	d001      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e022      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8002f60:	d0f2      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe f805 	bl	8000f70 <HAL_GetTick>
 8002f66:	eba0 0008 	sub.w	r0, r0, r8
 8002f6a:	4548      	cmp	r0, r9
 8002f6c:	d829      	bhi.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002f6e:	f1b9 0f00 	cmp.w	r9, #0
 8002f72:	d026      	beq.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f74:	6821      	ldr	r1, [r4, #0]
 8002f76:	680b      	ldr	r3, [r1, #0]
 8002f78:	075a      	lsls	r2, r3, #29
 8002f7a:	d5e4      	bpl.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x10>
 8002f7c:	2d80      	cmp	r5, #128	@ 0x80
 8002f7e:	d0e2      	beq.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x10>
 8002f80:	2d40      	cmp	r5, #64	@ 0x40
 8002f82:	d0e0      	beq.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f84:	69ce      	ldr	r6, [r1, #28]
 8002f86:	f016 0608 	ands.w	r6, r6, #8
 8002f8a:	d00c      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f8c:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8002f8e:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f90:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8002f92:	f7ff fda1 	bl	8002ad8 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8002f96:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f9a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8002f9e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8002fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fa6:	69cb      	ldr	r3, [r1, #28]
 8002fa8:	051b      	lsls	r3, r3, #20
 8002faa:	d5cc      	bpl.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8002fb0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8002fb4:	f7ff fd90 	bl	8002ad8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fb8:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8002fba:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fbe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_TIMEOUT;
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	e7ed      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x6c>

08002fc6 <HAL_UART_Receive>:
{
 8002fc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fca:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fcc:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
{
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fd4:	2b20      	cmp	r3, #32
{
 8002fd6:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fd8:	d15d      	bne.n	8003096 <HAL_UART_Receive+0xd0>
    if ((pData == NULL) || (Size == 0U))
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d05d      	beq.n	800309a <HAL_UART_Receive+0xd4>
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d05b      	beq.n	800309a <HAL_UART_Receive+0xd4>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe2:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fea:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fee:	6605      	str	r5, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8002ff0:	f7fd ffbe 	bl	8000f70 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002ff4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002ff6:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8002ff8:	f8a4 6058 	strh.w	r6, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferCount = Size;
 8003000:	f8a4 605a 	strh.w	r6, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8003004:	d10d      	bne.n	8003022 <HAL_UART_Receive+0x5c>
 8003006:	6923      	ldr	r3, [r4, #16]
 8003008:	b1c3      	cbz	r3, 800303c <HAL_UART_Receive+0x76>
    uhMask = huart->Mask;
 800300a:	26ff      	movs	r6, #255	@ 0xff
 800300c:	4632      	mov	r2, r6
    UART_MASK_COMPUTATION(huart);
 800300e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8003012:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8003016:	b280      	uxth	r0, r0
 8003018:	b9e8      	cbnz	r0, 8003056 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 800301a:	2320      	movs	r3, #32
 800301c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8003020:	e026      	b.n	8003070 <HAL_UART_Receive+0xaa>
    UART_MASK_COMPUTATION(huart);
 8003022:	b923      	cbnz	r3, 800302e <HAL_UART_Receive+0x68>
 8003024:	6925      	ldr	r5, [r4, #16]
 8003026:	b995      	cbnz	r5, 800304e <HAL_UART_Receive+0x88>
 8003028:	22ff      	movs	r2, #255	@ 0xff
    uhMask = huart->Mask;
 800302a:	4616      	mov	r6, r2
 800302c:	e7ef      	b.n	800300e <HAL_UART_Receive+0x48>
    UART_MASK_COMPUTATION(huart);
 800302e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003032:	d109      	bne.n	8003048 <HAL_UART_Receive+0x82>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	b153      	cbz	r3, 800304e <HAL_UART_Receive+0x88>
 8003038:	223f      	movs	r2, #63	@ 0x3f
 800303a:	e7f6      	b.n	800302a <HAL_UART_Receive+0x64>
    uhMask = huart->Mask;
 800303c:	f240 16ff 	movw	r6, #511	@ 0x1ff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	463d      	mov	r5, r7
      pdata8bits  = NULL;
 8003042:	2700      	movs	r7, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	4632      	mov	r2, r6
 8003046:	e7e2      	b.n	800300e <HAL_UART_Receive+0x48>
 8003048:	462a      	mov	r2, r5
    uhMask = huart->Mask;
 800304a:	462e      	mov	r6, r5
 800304c:	e7df      	b.n	800300e <HAL_UART_Receive+0x48>
 800304e:	227f      	movs	r2, #127	@ 0x7f
      pdata16bits = NULL;
 8003050:	461d      	mov	r5, r3
    uhMask = huart->Mask;
 8003052:	4616      	mov	r6, r2
 8003054:	e7db      	b.n	800300e <HAL_UART_Receive+0x48>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003056:	464b      	mov	r3, r9
 8003058:	2200      	movs	r2, #0
 800305a:	2120      	movs	r1, #32
 800305c:	4620      	mov	r0, r4
 800305e:	f8cd 8000 	str.w	r8, [sp]
 8003062:	f7ff ff68 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8003066:	b130      	cbz	r0, 8003076 <HAL_UART_Receive+0xb0>
        huart->RxState = HAL_UART_STATE_READY;
 8003068:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800306a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800306c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 8003070:	b003      	add	sp, #12
 8003072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 800307c:	b947      	cbnz	r7, 8003090 <HAL_UART_Receive+0xca>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800307e:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003082:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8003086:	3b01      	subs	r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800308e:	e7c0      	b.n	8003012 <HAL_UART_Receive+0x4c>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003090:	f807 3b01 	strb.w	r3, [r7], #1
        pdata8bits++;
 8003094:	e7f5      	b.n	8003082 <HAL_UART_Receive+0xbc>
    return HAL_BUSY;
 8003096:	2002      	movs	r0, #2
 8003098:	e7ea      	b.n	8003070 <HAL_UART_Receive+0xaa>
      return  HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	e7e8      	b.n	8003070 <HAL_UART_Receive+0xaa>

0800309e <UART_CheckIdleState>:
{
 800309e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	2600      	movs	r6, #0
{
 80030a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80030a8:	f7fd ff62 	bl	8000f70 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ac:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80030ae:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	071a      	lsls	r2, r3, #28
 80030b4:	d51b      	bpl.n	80030ee <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030ba:	4632      	mov	r2, r6
 80030bc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4603      	mov	r3, r0
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff ff36 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 80030ca:	b180      	cbz	r0, 80030ee <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	e852 3f00 	ldrex	r3, [r2]
 80030d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	e842 3100 	strex	r1, r3, [r2]
 80030da:	2900      	cmp	r1, #0
 80030dc:	d1f6      	bne.n	80030cc <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80030de:	2320      	movs	r3, #32
 80030e0:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80030e2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80030e4:	2300      	movs	r3, #0
 80030e6:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80030ea:	b002      	add	sp, #8
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	075b      	lsls	r3, r3, #29
 80030f4:	d524      	bpl.n	8003140 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030fa:	2200      	movs	r2, #0
 80030fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003100:	4620      	mov	r0, r4
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	462b      	mov	r3, r5
 8003106:	f7ff ff16 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 800310a:	b1c8      	cbz	r0, 8003140 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	e852 3f00 	ldrex	r3, [r2]
 8003112:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	2900      	cmp	r1, #0
 800311e:	d1f5      	bne.n	800310c <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	f102 0308 	add.w	r3, r2, #8
 8003124:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	f102 0008 	add.w	r0, r2, #8
 8003130:	e840 3100 	strex	r1, r3, [r0]
 8003134:	2900      	cmp	r1, #0
 8003136:	d1f3      	bne.n	8003120 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8003138:	2320      	movs	r3, #32
 800313a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800313e:	e7d0      	b.n	80030e2 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8003140:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003144:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003146:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800314c:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800314e:	e7c9      	b.n	80030e4 <UART_CheckIdleState+0x46>

08003150 <HAL_UART_Init>:
{
 8003150:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003152:	4604      	mov	r4, r0
 8003154:	b340      	cbz	r0, 80031a8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003156:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003158:	b91b      	cbnz	r3, 8003162 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800315a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800315e:	f7fd fcc7 	bl	8000af0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003162:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003164:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003166:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003170:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003172:	b113      	cbz	r3, 800317a <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff fe89 	bl	8002e8c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800317a:	4620      	mov	r0, r4
 800317c:	f7ff fd6a 	bl	8002c54 <UART_SetConfig>
 8003180:	2801      	cmp	r0, #1
 8003182:	d011      	beq.n	80031a8 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003184:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003186:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800318e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003196:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
}
 800319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80031a2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031a4:	f7ff bf7b 	b.w	800309e <UART_CheckIdleState>
}
 80031a8:	2001      	movs	r0, #1
 80031aa:	bd10      	pop	{r4, pc}

080031ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80031ac:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80031ae:	2300      	movs	r3, #0
{
 80031b0:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80031b2:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031b4:	9b01      	ldr	r3, [sp, #4]
 80031b6:	3301      	adds	r3, #1
 80031b8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80031ba:	9b01      	ldr	r3, [sp, #4]
 80031bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031c0:	d815      	bhi.n	80031ee <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031c2:	6913      	ldr	r3, [r2, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	daf5      	bge.n	80031b4 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80031cc:	6913      	ldr	r3, [r2, #16]
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	3301      	adds	r3, #1
 80031d8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80031da:	9b01      	ldr	r3, [sp, #4]
 80031dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031e0:	d805      	bhi.n	80031ee <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80031e2:	6910      	ldr	r0, [r2, #16]
 80031e4:	f010 0001 	ands.w	r0, r0, #1
 80031e8:	d1f4      	bne.n	80031d4 <USB_CoreReset+0x28>

  return HAL_OK;
}
 80031ea:	b002      	add	sp, #8
 80031ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80031ee:	2003      	movs	r0, #3
 80031f0:	e7fb      	b.n	80031ea <USB_CoreReset+0x3e>

080031f2 <USB_CoreInit>:
{
 80031f2:	b084      	sub	sp, #16
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	ad05      	add	r5, sp, #20
 80031f8:	4604      	mov	r4, r0
 80031fa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d128      	bne.n	8003258 <USB_CoreInit+0x66>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003206:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320c:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800320e:	68c3      	ldr	r3, [r0, #12]
 8003210:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003218:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800321a:	68c3      	ldr	r3, [r0, #12]
 800321c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003220:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003222:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d103      	bne.n	8003232 <USB_CoreInit+0x40>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800322a:	68c3      	ldr	r3, [r0, #12]
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003230:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003232:	4620      	mov	r0, r4
 8003234:	f7ff ffba 	bl	80031ac <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003238:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <USB_CoreInit+0x5e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003240:	68a3      	ldr	r3, [r4, #8]
 8003242:	f043 0306 	orr.w	r3, r3, #6
 8003246:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	60a3      	str	r3, [r4, #8]
}
 8003250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003254:	b004      	add	sp, #16
 8003256:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003258:	68c3      	ldr	r3, [r0, #12]
 800325a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003260:	f7ff ffa4 	bl	80031ac <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003264:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800326c:	e7e4      	b.n	8003238 <USB_CoreInit+0x46>

0800326e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800326e:	6883      	ldr	r3, [r0, #8]
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6083      	str	r3, [r0, #8]
}
 8003276:	2000      	movs	r0, #0
 8003278:	4770      	bx	lr

0800327a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800327a:	6883      	ldr	r3, [r0, #8]
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6083      	str	r3, [r0, #8]
}
 8003282:	2000      	movs	r0, #0
 8003284:	4770      	bx	lr

08003286 <USB_SetCurrentMode>:
{
 8003286:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003288:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800328a:	2901      	cmp	r1, #1
{
 800328c:	4605      	mov	r5, r0
 800328e:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003290:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003294:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003296:	d113      	bne.n	80032c0 <USB_SetCurrentMode+0x3a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003298:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800329a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800329c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032a0:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 80032a2:	200a      	movs	r0, #10
      ms += 10U;
 80032a4:	340a      	adds	r4, #10
      HAL_Delay(10U);
 80032a6:	f7fd fe69 	bl	8000f7c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80032aa:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80032ac:	07d9      	lsls	r1, r3, #31
 80032ae:	d402      	bmi.n	80032b6 <USB_SetCurrentMode+0x30>
 80032b0:	2cc8      	cmp	r4, #200	@ 0xc8
 80032b2:	d1f6      	bne.n	80032a2 <USB_SetCurrentMode+0x1c>
      ms += 10U;
 80032b4:	24c8      	movs	r4, #200	@ 0xc8
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80032b6:	f1a4 03c8 	sub.w	r3, r4, #200	@ 0xc8
 80032ba:	4258      	negs	r0, r3
 80032bc:	4158      	adcs	r0, r3
}
 80032be:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 80032c0:	b969      	cbnz	r1, 80032de <USB_SetCurrentMode+0x58>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032c2:	68c3      	ldr	r3, [r0, #12]
 80032c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032c8:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 80032ca:	200a      	movs	r0, #10
      ms += 10U;
 80032cc:	340a      	adds	r4, #10
      HAL_Delay(10U);
 80032ce:	f7fd fe55 	bl	8000f7c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80032d2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80032d4:	07da      	lsls	r2, r3, #31
 80032d6:	d5ee      	bpl.n	80032b6 <USB_SetCurrentMode+0x30>
 80032d8:	2cc8      	cmp	r4, #200	@ 0xc8
 80032da:	d1f6      	bne.n	80032ca <USB_SetCurrentMode+0x44>
 80032dc:	e7ea      	b.n	80032b4 <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
 80032e0:	e7ed      	b.n	80032be <USB_SetCurrentMode+0x38>

080032e2 <USB_FlushTxFifo>:
{
 80032e2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80032e4:	2300      	movs	r3, #0
{
 80032e6:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80032e8:	9301      	str	r3, [sp, #4]
    count++;
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	3301      	adds	r3, #1
 80032ee:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80032f0:	9b01      	ldr	r3, [sp, #4]
 80032f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032f6:	d815      	bhi.n	8003324 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032f8:	6913      	ldr	r3, [r2, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	daf5      	bge.n	80032ea <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032fe:	0189      	lsls	r1, r1, #6
  count = 0U;
 8003300:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003302:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003306:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003308:	6111      	str	r1, [r2, #16]
    count++;
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	3301      	adds	r3, #1
 800330e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003310:	9b01      	ldr	r3, [sp, #4]
 8003312:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003316:	d805      	bhi.n	8003324 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003318:	6910      	ldr	r0, [r2, #16]
 800331a:	f010 0020 	ands.w	r0, r0, #32
 800331e:	d1f4      	bne.n	800330a <USB_FlushTxFifo+0x28>
}
 8003320:	b002      	add	sp, #8
 8003322:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003324:	2003      	movs	r0, #3
 8003326:	e7fb      	b.n	8003320 <USB_FlushTxFifo+0x3e>

08003328 <USB_FlushRxFifo>:
{
 8003328:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800332a:	2300      	movs	r3, #0
{
 800332c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800332e:	9301      	str	r3, [sp, #4]
    count++;
 8003330:	9b01      	ldr	r3, [sp, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800333c:	d813      	bhi.n	8003366 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800333e:	6913      	ldr	r3, [r2, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	daf5      	bge.n	8003330 <USB_FlushRxFifo+0x8>
  count = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003348:	2310      	movs	r3, #16
 800334a:	6113      	str	r3, [r2, #16]
    count++;
 800334c:	9b01      	ldr	r3, [sp, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003352:	9b01      	ldr	r3, [sp, #4]
 8003354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003358:	d805      	bhi.n	8003366 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800335a:	6910      	ldr	r0, [r2, #16]
 800335c:	f010 0010 	ands.w	r0, r0, #16
 8003360:	d1f4      	bne.n	800334c <USB_FlushRxFifo+0x24>
}
 8003362:	b002      	add	sp, #8
 8003364:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003366:	2003      	movs	r0, #3
 8003368:	e7fb      	b.n	8003362 <USB_FlushRxFifo+0x3a>

0800336a <USB_WritePacket>:
{
 800336a:	b510      	push	{r4, lr}
 800336c:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003370:	b944      	cbnz	r4, 8003384 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003372:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003374:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8003376:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003378:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800337c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8003380:	428b      	cmp	r3, r1
 8003382:	d101      	bne.n	8003388 <USB_WritePacket+0x1e>
}
 8003384:	2000      	movs	r0, #0
 8003386:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003388:	f851 2b04 	ldr.w	r2, [r1], #4
 800338c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800338e:	e7f7      	b.n	8003380 <USB_WritePacket+0x16>

08003390 <USB_ReadPacket>:
{
 8003390:	4603      	mov	r3, r0
  for (i = 0U; i < count32b; i++)
 8003392:	2000      	movs	r0, #0
{
 8003394:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 8003396:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003398:	f503 5580 	add.w	r5, r3, #4096	@ 0x1000
  uint16_t remaining_bytes = len % 4U;
 800339c:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80033a0:	42a0      	cmp	r0, r4
 80033a2:	d310      	bcc.n	80033c6 <USB_ReadPacket+0x36>
 80033a4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 80033a8:	b162      	cbz	r2, 80033c4 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80033aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ae:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 80033b0:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80033b2:	00d9      	lsls	r1, r3, #3
 80033b4:	fa24 f101 	lsr.w	r1, r4, r1
 80033b8:	54c1      	strb	r1, [r0, r3]
      i++;
 80033ba:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 80033bc:	b299      	uxth	r1, r3
 80033be:	428a      	cmp	r2, r1
 80033c0:	d1f7      	bne.n	80033b2 <USB_ReadPacket+0x22>
      pDest++;
 80033c2:	4410      	add	r0, r2
}
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80033c6:	682e      	ldr	r6, [r5, #0]
 80033c8:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
  for (i = 0U; i < count32b; i++)
 80033cc:	3001      	adds	r0, #1
 80033ce:	e7e7      	b.n	80033a0 <USB_ReadPacket+0x10>

080033d0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80033d0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80033d2:	6980      	ldr	r0, [r0, #24]
}
 80033d4:	4010      	ands	r0, r2
 80033d6:	4770      	bx	lr

080033d8 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 80033d8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80033dc:	f500 63a0 	add.w	r3, r0, #1280	@ 0x500
 80033e0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80033e4:	68db      	ldr	r3, [r3, #12]
}
 80033e6:	4018      	ands	r0, r3
 80033e8:	4770      	bx	lr

080033ea <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80033ea:	6940      	ldr	r0, [r0, #20]
}
 80033ec:	f000 0001 	and.w	r0, r0, #1
 80033f0:	4770      	bx	lr
	...

080033f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033f4:	b084      	sub	sp, #16
 80033f6:	b570      	push	{r4, r5, r6, lr}
 80033f8:	4604      	mov	r4, r0
 80033fa:	a805      	add	r0, sp, #20
 80033fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8003406:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003408:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800340c:	63a3      	str	r3, [r4, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800340e:	68e3      	ldr	r3, [r4, #12]
 8003410:	065b      	lsls	r3, r3, #25
 8003412:	d43d      	bmi.n	8003490 <USB_HostInit+0x9c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003414:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003418:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800341a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 800341e:	d139      	bne.n	8003494 <USB_HostInit+0xa0>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003420:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003424:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003428:	2110      	movs	r1, #16
 800342a:	4620      	mov	r0, r4
 800342c:	f7ff ff59 	bl	80032e2 <USB_FlushTxFifo>
 8003430:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003432:	4620      	mov	r0, r4
 8003434:	f7ff ff78 	bl	8003328 <USB_FlushRxFifo>
 8003438:	4308      	orrs	r0, r1
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	f89d 6015 	ldrb.w	r6, [sp, #21]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003440:	b2c0      	uxtb	r0, r0
 8003442:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8003446:	461d      	mov	r5, r3
 8003448:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800344c:	3800      	subs	r0, #0
 800344e:	bf18      	it	ne
 8003450:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 8003452:	429e      	cmp	r6, r3
 8003454:	d821      	bhi.n	800349a <USB_HostInit+0xa6>
  USBx->GINTMSK = 0U;

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8003456:	4b17      	ldr	r3, [pc, #92]	@ (80034b4 <USB_HostInit+0xc0>)
  USBx->GINTMSK = 0U;
 8003458:	61a5      	str	r5, [r4, #24]
  if (USBx == USB_OTG_HS)
 800345a:	429c      	cmp	r4, r3
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800345c:	6161      	str	r1, [r4, #20]
  if (USBx == USB_OTG_HS)
 800345e:	d121      	bne.n	80034a4 <USB_HostInit+0xb0>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003464:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003466:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 800346a:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800346c:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <USB_HostInit+0xc4>)
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800346e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003472:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003476:	b91b      	cbnz	r3, 8003480 <USB_HostInit+0x8c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003478:	69a3      	ldr	r3, [r4, #24]
 800347a:	f043 0310 	orr.w	r3, r3, #16
 800347e:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003480:	69a2      	ldr	r2, [r4, #24]
 8003482:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <USB_HostInit+0xc8>)
 8003484:	4313      	orrs	r3, r2
 8003486:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8003488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800348c:	b004      	add	sp, #16
 800348e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003490:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	e7c4      	b.n	8003424 <USB_HostInit+0x30>
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800349a:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800349c:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800349e:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80034a0:	3220      	adds	r2, #32
 80034a2:	e7d6      	b.n	8003452 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80034a8:	f503 03c0 	add.w	r3, r3, #6291456	@ 0x600000
 80034ac:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <USB_HostInit+0xcc>)
 80034b0:	e7dd      	b.n	800346e <USB_HostInit+0x7a>
 80034b2:	bf00      	nop
 80034b4:	40040000 	.word	0x40040000
 80034b8:	00e00300 	.word	0x00e00300
 80034bc:	a3200008 	.word	0xa3200008
 80034c0:	004000e0 	.word	0x004000e0

080034c4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80034c4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 80034c8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80034ca:	f500 6280 	add.w	r2, r0, #1024	@ 0x400
 80034ce:	f023 0303 	bic.w	r3, r3, #3
{
 80034d2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80034d4:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80034d8:	f001 0303 	and.w	r3, r1, #3
 80034dc:	f8d0 4400 	ldr.w	r4, [r0, #1024]	@ 0x400
 80034e0:	ea43 0304 	orr.w	r3, r3, r4
 80034e4:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  if (freq == HCFG_48_MHZ)
 80034e8:	d104      	bne.n	80034f4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80034ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80034ee:	2000      	movs	r0, #0
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80034f0:	6053      	str	r3, [r2, #4]
}
 80034f2:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80034f4:	2902      	cmp	r1, #2
 80034f6:	d102      	bne.n	80034fe <USB_InitFSLSPClkSel+0x3a>
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80034f8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80034fc:	e7f7      	b.n	80034ee <USB_InitFSLSPClkSel+0x2a>
    return HAL_ERROR;
 80034fe:	2001      	movs	r0, #1
 8003500:	e7f7      	b.n	80034f2 <USB_InitFSLSPClkSel+0x2e>

08003502 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8003502:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003504:	2500      	movs	r5, #0
{
 8003506:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8003508:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800350a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 800350e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003510:	9b01      	ldr	r3, [sp, #4]
 8003512:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003516:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003518:	9b01      	ldr	r3, [sp, #4]
 800351a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351e:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003522:	2064      	movs	r0, #100	@ 0x64
 8003524:	f7fd fd2a 	bl	8000f7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003528:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800352a:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800352c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003530:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  HAL_Delay(10U);
 8003534:	f7fd fd22 	bl	8000f7c <HAL_Delay>

  return HAL_OK;
}
 8003538:	4628      	mov	r0, r5
 800353a:	b003      	add	sp, #12
 800353c:	bd30      	pop	{r4, r5, pc}

0800353e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800353e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003544:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 8003548:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003550:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003552:	9b01      	ldr	r3, [sp, #4]
 8003554:	04da      	lsls	r2, r3, #19
 8003556:	d406      	bmi.n	8003566 <USB_DriveVbus+0x28>
 8003558:	2901      	cmp	r1, #1
 800355a:	d104      	bne.n	8003566 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003562:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	04db      	lsls	r3, r3, #19
 800356a:	d505      	bpl.n	8003578 <USB_DriveVbus+0x3a>
 800356c:	b921      	cbnz	r1, 8003578 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003574:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  }
  return HAL_OK;
}
 8003578:	2000      	movs	r0, #0
 800357a:	b002      	add	sp, #8
 800357c:	4770      	bx	lr

0800357e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800357e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003584:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 8003588:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800358a:	9801      	ldr	r0, [sp, #4]
}
 800358c:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003590:	b002      	add	sp, #8
 8003592:	4770      	bx	lr

08003594 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003594:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003598:	6880      	ldr	r0, [r0, #8]
}
 800359a:	b280      	uxth	r0, r0
 800359c:	4770      	bx	lr
	...

080035a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80035a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80035a4:	eb00 1641 	add.w	r6, r0, r1, lsl #5
{
 80035a8:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80035aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
{
 80035ae:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80035b2:	f506 63a0 	add.w	r3, r6, #1280	@ 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80035b6:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80035ba:	609f      	str	r7, [r3, #8]
  switch (ep_type)
 80035bc:	2d03      	cmp	r5, #3
 80035be:	d872      	bhi.n	80036a6 <USB_HC_Init+0x106>
 80035c0:	e8df f005 	tbb	[pc, r5]
 80035c4:	14026702 	.word	0x14026702
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035c8:	f240 479d 	movw	r7, #1181	@ 0x49d
      if ((epnum & 0x80U) == 0x80U)
 80035cc:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035d0:	60df      	str	r7, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80035d2:	da03      	bge.n	80035dc <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80035d4:	68df      	ldr	r7, [r3, #12]
 80035d6:	f447 7780 	orr.w	r7, r7, #256	@ 0x100
 80035da:	e005      	b.n	80035e8 <USB_HC_Init+0x48>
        if (USBx == USB_OTG_HS)
 80035dc:	4f33      	ldr	r7, [pc, #204]	@ (80036ac <USB_HC_Init+0x10c>)
 80035de:	42b8      	cmp	r0, r7
 80035e0:	d10a      	bne.n	80035f8 <USB_HC_Init+0x58>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80035e2:	68df      	ldr	r7, [r3, #12]
 80035e4:	f047 0760 	orr.w	r7, r7, #96	@ 0x60
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80035e8:	60df      	str	r7, [r3, #12]
 80035ea:	e005      	b.n	80035f8 <USB_HC_Init+0x58>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035ec:	f240 679d 	movw	r7, #1693	@ 0x69d
      if ((epnum & 0x80U) == 0x80U)
 80035f0:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035f4:	60df      	str	r7, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80035f6:	dbed      	blt.n	80035d4 <USB_HC_Init+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 80035f8:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80035fa:	f04f 0800 	mov.w	r8, #0

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80035fe:	f001 010f 	and.w	r1, r1, #15
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8003602:	f8c3 8004 	str.w	r8, [r3, #4]
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003606:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800360a:	f04e 0e02 	orr.w	lr, lr, #2
 800360e:	f8c3 e00c 	str.w	lr, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003612:	2301      	movs	r3, #1
 8003614:	f8d0 9418 	ldr.w	r9, [r0, #1048]	@ 0x418
 8003618:	408b      	lsls	r3, r1

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800361a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800361e:	ea43 0309 	orr.w	r3, r3, r9
  if ((epnum & 0x80U) == 0x80U)
 8003622:	03c9      	lsls	r1, r1, #15
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003624:	f8c0 3418 	str.w	r3, [r0, #1048]	@ 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003628:	6983      	ldr	r3, [r0, #24]
 800362a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800362e:	6183      	str	r3, [r0, #24]
  else
  {
    HCcharEpDir = 0U;
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003630:	f7ff ffa5 	bl	800357e <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003634:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d104      	bne.n	8003646 <USB_HC_Init+0xa6>
 800363c:	3802      	subs	r0, #2
 800363e:	bf18      	it	ne
 8003640:	2001      	movne	r0, #1
 8003642:	ea4f 4840 	mov.w	r8, r0, lsl #17
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8003646:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800364a:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800364c:	02d2      	lsls	r2, r2, #11
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800364e:	f3c0 000a 	ubfx	r0, r0, #0, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003652:	f003 53fe 	and.w	r3, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003656:	f402 42f0 	and.w	r2, r2, #30720	@ 0x7800
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800365a:	ea40 0808 	orr.w	r8, r0, r8
 800365e:	ea43 0308 	orr.w	r3, r3, r8
 8003662:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003664:	04aa      	lsls	r2, r5, #18

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003666:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800366a:	430b      	orrs	r3, r1
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800366c:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003670:	2d01      	cmp	r5, #1
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8003672:	ea43 0302 	orr.w	r3, r3, r2
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800367a:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800367e:	d105      	bne.n	800368c <USB_HC_Init+0xec>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003680:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 8003684:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003688:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
  }

  return ret;
}
 800368c:	4638      	mov	r0, r7
 800368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003692:	f240 2725 	movw	r7, #549	@ 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003696:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800369a:	60df      	str	r7, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 800369c:	daac      	bge.n	80035f8 <USB_HC_Init+0x58>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800369e:	68df      	ldr	r7, [r3, #12]
 80036a0:	f447 77c0 	orr.w	r7, r7, #384	@ 0x180
 80036a4:	e7a0      	b.n	80035e8 <USB_HC_Init+0x48>
  switch (ep_type)
 80036a6:	2701      	movs	r7, #1
 80036a8:	e7a7      	b.n	80035fa <USB_HC_Init+0x5a>
 80036aa:	bf00      	nop
 80036ac:	40040000 	.word	0x40040000

080036b0 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80036b0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80036b4:	6940      	ldr	r0, [r0, #20]
}
 80036b6:	b280      	uxth	r0, r0
 80036b8:	4770      	bx	lr

080036ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80036ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036bc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 80036c0:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036c2:	f501 62a0 	add.w	r2, r1, #1280	@ 0x500
  __IO uint32_t count = 0U;
 80036c6:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036c8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80036cc:	f8d1 4500 	ldr.w	r4, [r1, #1280]	@ 0x500
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80036d0:	6855      	ldr	r5, [r2, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036d2:	0c9b      	lsrs	r3, r3, #18

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80036d4:	6886      	ldr	r6, [r0, #8]
 80036d6:	06b6      	lsls	r6, r6, #26
 80036d8:	d508      	bpl.n	80036ec <USB_HC_Halt+0x32>
 80036da:	2d00      	cmp	r5, #0
 80036dc:	db06      	blt.n	80036ec <USB_HC_Halt+0x32>
 80036de:	2c00      	cmp	r4, #0
 80036e0:	da01      	bge.n	80036e6 <USB_HC_Halt+0x2c>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80036e2:	07dd      	lsls	r5, r3, #31
 80036e4:	d504      	bpl.n	80036f0 <USB_HC_Halt+0x36>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	b002      	add	sp, #8
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80036ec:	07dc      	lsls	r4, r3, #31
 80036ee:	d42a      	bmi.n	8003746 <USB_HC_Halt+0x8c>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80036f0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80036f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036f8:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80036fc:	6883      	ldr	r3, [r0, #8]
 80036fe:	069b      	lsls	r3, r3, #26
 8003700:	d41a      	bmi.n	8003738 <USB_HC_Halt+0x7e>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003702:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003704:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003708:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800370c:	d116      	bne.n	800373c <USB_HC_Halt+0x82>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800370e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003712:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003716:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800371a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800371e:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
          count++;
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	3301      	adds	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800372e:	d8da      	bhi.n	80036e6 <USB_HC_Halt+0x2c>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	dbf5      	blt.n	8003722 <USB_HC_Halt+0x68>
 8003736:	e7d6      	b.n	80036e6 <USB_HC_Halt+0x2c>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003738:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800373c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003740:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 8003744:	e7cf      	b.n	80036e6 <USB_HC_Halt+0x2c>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003746:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800374a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003752:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
 8003756:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800375a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800375e:	d1ed      	bne.n	800373c <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003764:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003768:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800376c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003770:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        count++;
 8003774:	9b01      	ldr	r3, [sp, #4]
 8003776:	3301      	adds	r3, #1
 8003778:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003780:	d8b1      	bhi.n	80036e6 <USB_HC_Halt+0x2c>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	dbf5      	blt.n	8003774 <USB_HC_Halt+0xba>
 8003788:	e7ad      	b.n	80036e6 <USB_HC_Halt+0x2c>
	...

0800378c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800378c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003790:	4a06      	ldr	r2, [pc, #24]	@ (80037ac <USB_DoPing+0x20>)
 8003792:	f8c0 2510 	str.w	r2, [r0, #1296]	@ 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003796:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800379e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80037a2:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

  return HAL_OK;
}
 80037a6:	2000      	movs	r0, #0
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	80080000 	.word	0x80080000

080037b0 <USB_HC_StartXfer>:
  if (USBx == USB_OTG_HS)
 80037b0:	4b97      	ldr	r3, [pc, #604]	@ (8003a10 <USB_HC_StartXfer+0x260>)
{
 80037b2:	4694      	mov	ip, r2
  if (USBx == USB_OTG_HS)
 80037b4:	4298      	cmp	r0, r3
{
 80037b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ba:	4606      	mov	r6, r0
 80037bc:	b085      	sub	sp, #20
 80037be:	460c      	mov	r4, r1
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80037c0:	784a      	ldrb	r2, [r1, #1]
  if (USBx == USB_OTG_HS)
 80037c2:	d10f      	bne.n	80037e4 <USB_HC_StartXfer+0x34>
    if (dma == 1U)
 80037c4:	f1bc 0f01 	cmp.w	ip, #1
 80037c8:	d16c      	bne.n	80038a4 <USB_HC_StartXfer+0xf4>
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80037ca:	7c8b      	ldrb	r3, [r1, #18]
 80037cc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80037d0:	d108      	bne.n	80037e4 <USB_HC_StartXfer+0x34>
 80037d2:	798b      	ldrb	r3, [r1, #6]
 80037d4:	b933      	cbnz	r3, 80037e4 <USB_HC_StartXfer+0x34>
        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80037d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a14 <USB_HC_StartXfer+0x264>)
 80037d8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80037e2:	60d9      	str	r1, [r3, #12]
  if (hc->do_ssplit == 1U)
 80037e4:	f894 e006 	ldrb.w	lr, [r4, #6]
    if (hc->ep_is_in != 0U)
 80037e8:	78e0      	ldrb	r0, [r4, #3]
  if (hc->do_ssplit == 1U)
 80037ea:	f1be 0f01 	cmp.w	lr, #1
 80037ee:	f040 8087 	bne.w	8003900 <USB_HC_StartXfer+0x150>
    if (hc->ep_is_in != 0U)
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d061      	beq.n	80038ba <USB_HC_StartXfer+0x10a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80037f6:	8aa3      	ldrh	r3, [r4, #20]
 80037f8:	61e3      	str	r3, [r4, #28]
    num_packets = 1U;
 80037fa:	2501      	movs	r5, #1
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80037fc:	7da1      	ldrb	r1, [r4, #22]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80037fe:	eb06 1742 	add.w	r7, r6, r2, lsl #5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003802:	0749      	lsls	r1, r1, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003804:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003808:	f001 49c0 	and.w	r9, r1, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800380c:	69e1      	ldr	r1, [r4, #28]
 800380e:	f3c1 0812 	ubfx	r8, r1, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003812:	ea49 0108 	orr.w	r1, r9, r8
 8003816:	ea41 41c5 	orr.w	r1, r1, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800381a:	6119      	str	r1, [r3, #16]
  if (dma != 0U)
 800381c:	f1bc 0f00 	cmp.w	ip, #0
 8003820:	d001      	beq.n	8003826 <USB_HC_StartXfer+0x76>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003822:	69a1      	ldr	r1, [r4, #24]
 8003824:	6159      	str	r1, [r3, #20]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003826:	f8d6 5408 	ldr.w	r5, [r6, #1032]	@ 0x408
  if (hc->do_ssplit == 1U)
 800382a:	f1be 0f01 	cmp.w	lr, #1
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800382e:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003832:	f506 6880 	add.w	r8, r6, #1024	@ 0x400
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003836:	ea6f 0505 	mvn.w	r5, r5
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800383a:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800383e:	ea4f 7545 	mov.w	r5, r5, lsl #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003842:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003846:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 800384a:	f005 5500 	and.w	r5, r5, #536870912	@ 0x20000000
 800384e:	ea45 0501 	orr.w	r5, r5, r1
 8003852:	f8c7 5500 	str.w	r5, [r7, #1280]	@ 0x500
  if (hc->do_ssplit == 1U)
 8003856:	f040 8081 	bne.w	800395c <USB_HC_StartXfer+0x1ac>
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800385a:	7c65      	ldrb	r5, [r4, #17]
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800385c:	7c21      	ldrb	r1, [r4, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800385e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8003862:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8003866:	6059      	str	r1, [r3, #4]
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8003868:	68d9      	ldr	r1, [r3, #12]
 800386a:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 800386e:	60d9      	str	r1, [r3, #12]
    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8003870:	79e1      	ldrb	r1, [r4, #7]
 8003872:	2901      	cmp	r1, #1
 8003874:	d108      	bne.n	8003888 <USB_HC_StartXfer+0xd8>
 8003876:	b938      	cbnz	r0, 8003888 <USB_HC_StartXfer+0xd8>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003878:	685d      	ldr	r5, [r3, #4]
 800387a:	f445 3580 	orr.w	r5, r5, #65536	@ 0x10000
 800387e:	605d      	str	r5, [r3, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003880:	68dd      	ldr	r5, [r3, #12]
 8003882:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8003886:	60dd      	str	r5, [r3, #12]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8003888:	7ca5      	ldrb	r5, [r4, #18]
 800388a:	2d01      	cmp	r5, #1
 800388c:	f000 808a 	beq.w	80039a4 <USB_HC_StartXfer+0x1f4>
 8003890:	2d03      	cmp	r5, #3
 8003892:	f040 808f 	bne.w	80039b4 <USB_HC_StartXfer+0x204>
 8003896:	2901      	cmp	r1, #1
 8003898:	f040 808c 	bne.w	80039b4 <USB_HC_StartXfer+0x204>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800389c:	2801      	cmp	r0, #1
 800389e:	f000 8085 	beq.w	80039ac <USB_HC_StartXfer+0x1fc>
 80038a2:	e087      	b.n	80039b4 <USB_HC_StartXfer+0x204>
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80038a4:	888b      	ldrh	r3, [r1, #4]
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038aa:	d19b      	bne.n	80037e4 <USB_HC_StartXfer+0x34>
        (void)USB_DoPing(USBx, hc->ch_num);
 80038ac:	4611      	mov	r1, r2
 80038ae:	f7ff ff6d 	bl	800378c <USB_DoPing>
}
 80038b2:	2000      	movs	r0, #0
 80038b4:	b005      	add	sp, #20
 80038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (hc->ep_type == EP_TYPE_ISOC)
 80038ba:	7ca1      	ldrb	r1, [r4, #18]
        if (hc->xfer_len > ISO_SPLT_MPS)
 80038bc:	6a23      	ldr	r3, [r4, #32]
      if (hc->ep_type == EP_TYPE_ISOC)
 80038be:	2901      	cmp	r1, #1
 80038c0:	d115      	bne.n	80038ee <USB_HC_StartXfer+0x13e>
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80038c2:	68e1      	ldr	r1, [r4, #12]
        if (hc->xfer_len > ISO_SPLT_MPS)
 80038c4:	2bbc      	cmp	r3, #188	@ 0xbc
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80038c6:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
        if (hc->xfer_len > ISO_SPLT_MPS)
 80038ca:	d90a      	bls.n	80038e2 <USB_HC_StartXfer+0x132>
          hc->XferSize = hc->max_packet;
 80038cc:	8aa3      	ldrh	r3, [r4, #20]
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80038ce:	2901      	cmp	r1, #1
          hc->xfer_len = hc->XferSize;
 80038d0:	e9c4 3307 	strd	r3, r3, [r4, #28]
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80038d4:	d802      	bhi.n	80038dc <USB_HC_StartXfer+0x12c>
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80038d6:	2302      	movs	r3, #2
            hc->iso_splt_xactPos = HCSPLT_END;
 80038d8:	60e3      	str	r3, [r4, #12]
 80038da:	e78e      	b.n	80037fa <USB_HC_StartXfer+0x4a>
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80038dc:	f8c4 e00c 	str.w	lr, [r4, #12]
 80038e0:	e78b      	b.n	80037fa <USB_HC_StartXfer+0x4a>
          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80038e2:	2901      	cmp	r1, #1
          hc->XferSize = hc->xfer_len;
 80038e4:	61e3      	str	r3, [r4, #28]
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80038e6:	bf8c      	ite	hi
 80038e8:	2304      	movhi	r3, #4
            hc->iso_splt_xactPos = HCSPLT_END;
 80038ea:	2303      	movls	r3, #3
 80038ec:	e7f4      	b.n	80038d8 <USB_HC_StartXfer+0x128>
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80038ee:	f1bc 0f01 	cmp.w	ip, #1
 80038f2:	d181      	bne.n	80037f8 <USB_HC_StartXfer+0x48>
 80038f4:	8aa1      	ldrh	r1, [r4, #20]
 80038f6:	4299      	cmp	r1, r3
 80038f8:	f4bf af7e 	bcs.w	80037f8 <USB_HC_StartXfer+0x48>
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80038fc:	61e1      	str	r1, [r4, #28]
 80038fe:	e77c      	b.n	80037fa <USB_HC_StartXfer+0x4a>
    if (hc->xfer_len > 0U)
 8003900:	6a23      	ldr	r3, [r4, #32]
 8003902:	b17b      	cbz	r3, 8003924 <USB_HC_StartXfer+0x174>
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003904:	8aa1      	ldrh	r1, [r4, #20]
 8003906:	1e5d      	subs	r5, r3, #1
 8003908:	440d      	add	r5, r1
 800390a:	fbb5 f5f1 	udiv	r5, r5, r1
      if (num_packets > max_hc_pkt_count)
 800390e:	b2ad      	uxth	r5, r5
 8003910:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003914:	bf28      	it	cs
 8003916:	f44f 7580 	movcs.w	r5, #256	@ 0x100
    if (hc->ep_is_in != 0U)
 800391a:	b108      	cbz	r0, 8003920 <USB_HC_StartXfer+0x170>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800391c:	8aa3      	ldrh	r3, [r4, #20]
 800391e:	436b      	muls	r3, r5
      hc->XferSize = hc->xfer_len;
 8003920:	61e3      	str	r3, [r4, #28]
 8003922:	e76b      	b.n	80037fc <USB_HC_StartXfer+0x4c>
      num_packets = 1U;
 8003924:	2501      	movs	r5, #1
 8003926:	e7f8      	b.n	800391a <USB_HC_StartXfer+0x16a>
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8003928:	2800      	cmp	r0, #0
 800392a:	d143      	bne.n	80039b4 <USB_HC_StartXfer+0x204>
      switch (hc->iso_splt_xactPos)
 800392c:	68e1      	ldr	r1, [r4, #12]
 800392e:	3901      	subs	r1, #1
 8003930:	2903      	cmp	r1, #3
 8003932:	d83f      	bhi.n	80039b4 <USB_HC_StartXfer+0x204>
 8003934:	e8df f001 	tbb	[pc, r1]
 8003938:	0e0a0602 	.word	0x0e0a0602
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003942:	e036      	b.n	80039b2 <USB_HC_StartXfer+0x202>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	f041 010e 	orr.w	r1, r1, #14
 800394a:	e032      	b.n	80039b2 <USB_HC_StartXfer+0x202>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003952:	e02e      	b.n	80039b2 <USB_HC_StartXfer+0x202>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800395a:	e02a      	b.n	80039b2 <USB_HC_StartXfer+0x202>
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800395c:	2100      	movs	r1, #0
 800395e:	e028      	b.n	80039b2 <USB_HC_StartXfer+0x202>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003960:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003964:	e032      	b.n	80039cc <USB_HC_StartXfer+0x21c>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003966:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003968:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800396a:	b289      	uxth	r1, r1
 800396c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8003970:	4288      	cmp	r0, r1
 8003972:	d903      	bls.n	800397c <USB_HC_StartXfer+0x1cc>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003974:	69b1      	ldr	r1, [r6, #24]
 8003976:	f041 0120 	orr.w	r1, r1, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800397a:	61b1      	str	r1, [r6, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800397c:	2100      	movs	r1, #0
 800397e:	b29b      	uxth	r3, r3
 8003980:	4630      	mov	r0, r6
 8003982:	9100      	str	r1, [sp, #0]
 8003984:	69a1      	ldr	r1, [r4, #24]
 8003986:	f7ff fcf0 	bl	800336a <USB_WritePacket>
 800398a:	e792      	b.n	80038b2 <USB_HC_StartXfer+0x102>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800398c:	f8d8 0010 	ldr.w	r0, [r8, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003990:	1cd9      	adds	r1, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003992:	b280      	uxth	r0, r0
 8003994:	f3c1 018f 	ubfx	r1, r1, #2, #16
 8003998:	4288      	cmp	r0, r1
 800399a:	d2ef      	bcs.n	800397c <USB_HC_StartXfer+0x1cc>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800399c:	69b1      	ldr	r1, [r6, #24]
 800399e:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80039a2:	e7ea      	b.n	800397a <USB_HC_StartXfer+0x1ca>
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80039a4:	2901      	cmp	r1, #1
 80039a6:	d1bf      	bne.n	8003928 <USB_HC_StartXfer+0x178>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80039a8:	2801      	cmp	r0, #1
 80039aa:	d1bd      	bne.n	8003928 <USB_HC_StartXfer+0x178>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80039b2:	6059      	str	r1, [r3, #4]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039b4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 80039b8:	9303      	str	r3, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039c0:	9303      	str	r3, [sp, #12]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80039c2:	9b03      	ldr	r3, [sp, #12]
  if (hc->ep_is_in != 0U)
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d0cb      	beq.n	8003960 <USB_HC_StartXfer+0x1b0>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80039c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80039cc:	9303      	str	r3, [sp, #12]
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80039ce:	ea5c 0000 	orrs.w	r0, ip, r0
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039d8:	9303      	str	r3, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80039e0:	f47f af67 	bne.w	80038b2 <USB_HC_StartXfer+0x102>
 80039e4:	6a23      	ldr	r3, [r4, #32]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f43f af63 	beq.w	80038b2 <USB_HC_StartXfer+0x102>
 80039ec:	79e1      	ldrb	r1, [r4, #7]
 80039ee:	2900      	cmp	r1, #0
 80039f0:	f47f af5f 	bne.w	80038b2 <USB_HC_StartXfer+0x102>
    switch (hc->ep_type)
 80039f4:	7ca1      	ldrb	r1, [r4, #18]
 80039f6:	2903      	cmp	r1, #3
 80039f8:	d8c0      	bhi.n	800397c <USB_HC_StartXfer+0x1cc>
 80039fa:	a001      	add	r0, pc, #4	@ (adr r0, 8003a00 <USB_HC_StartXfer+0x250>)
 80039fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a00:	08003967 	.word	0x08003967
 8003a04:	0800398d 	.word	0x0800398d
 8003a08:	08003967 	.word	0x08003967
 8003a0c:	0800398d 	.word	0x0800398d
 8003a10:	40040000 	.word	0x40040000
 8003a14:	40040500 	.word	0x40040500

08003a18 <USB_StopHost>:
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8003a18:	2300      	movs	r3, #0
{
 8003a1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 8003a1c:	9301      	str	r3, [sp, #4]
{
 8003a1e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a20:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a22:	2110      	movs	r1, #16
 8003a24:	f504 65e0 	add.w	r5, r4, #1792	@ 0x700
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6083      	str	r3, [r0, #8]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a2e:	f7ff fc58 	bl	80032e2 <USB_FlushTxFifo>
 8003a32:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff fc77 	bl	8003328 <USB_FlushRxFifo>
 8003a3a:	4308      	orrs	r0, r1
 8003a3c:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8003a40:	b2c0      	uxtb	r0, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	3800      	subs	r0, #0
 8003a46:	bf18      	it	ne
 8003a48:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003a4a:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003a4c:	f022 2280 	bic.w	r2, r2, #2147516416	@ 0x80008000
 8003a50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8003a54:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8003a58:	42a9      	cmp	r1, r5
 8003a5a:	d1f6      	bne.n	8003a4a <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003a5c:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a62:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003a66:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 8003a68:	9a01      	ldr	r2, [sp, #4]
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8003a6e:	9a01      	ldr	r2, [sp, #4]
 8003a70:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003a74:	d802      	bhi.n	8003a7c <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	dbf5      	blt.n	8003a68 <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	42ab      	cmp	r3, r5
 8003a80:	d1ec      	bne.n	8003a5c <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a86:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003a8a:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a8c:	68a3      	ldr	r3, [r4, #8]
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8003a94:	b003      	add	sp, #12
 8003a96:	bd30      	pop	{r4, r5, pc}

08003a98 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <disk_status+0x10>)
 8003a9a:	181a      	adds	r2, r3, r0
 8003a9c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	7b10      	ldrb	r0, [r2, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4718      	bx	r3
 8003aa8:	20003884 	.word	0x20003884

08003aac <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <disk_initialize+0x1c>)
 8003aae:	5c1a      	ldrb	r2, [r3, r0]
 8003ab0:	b942      	cbnz	r2, 8003ac4 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ab6:	181a      	adds	r2, r3, r0
 8003ab8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003abc:	7b10      	ldrb	r0, [r2, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4718      	bx	r3
  }
  return stat;
}
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	4770      	bx	lr
 8003ac8:	20003884 	.word	0x20003884

08003acc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003acc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ace:	4c05      	ldr	r4, [pc, #20]	@ (8003ae4 <disk_read+0x18>)
 8003ad0:	1825      	adds	r5, r4, r0
 8003ad2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003ad6:	6860      	ldr	r0, [r4, #4]
 8003ad8:	6884      	ldr	r4, [r0, #8]
 8003ada:	7b28      	ldrb	r0, [r5, #12]
 8003adc:	46a4      	mov	ip, r4
  return res;
}
 8003ade:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ae0:	4760      	bx	ip
 8003ae2:	bf00      	nop
 8003ae4:	20003884 	.word	0x20003884

08003ae8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ae8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003aea:	4c05      	ldr	r4, [pc, #20]	@ (8003b00 <disk_write+0x18>)
 8003aec:	1825      	adds	r5, r4, r0
 8003aee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003af2:	6860      	ldr	r0, [r4, #4]
 8003af4:	68c4      	ldr	r4, [r0, #12]
 8003af6:	7b28      	ldrb	r0, [r5, #12]
 8003af8:	46a4      	mov	ip, r4
  return res;
}
 8003afa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003afc:	4760      	bx	ip
 8003afe:	bf00      	nop
 8003b00:	20003884 	.word	0x20003884

08003b04 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <disk_ioctl+0x18>)
{
 8003b06:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b08:	181c      	adds	r4, r3, r0
 8003b0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	7b20      	ldrb	r0, [r4, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8003b14:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b18:	4718      	bx	r3
 8003b1a:	bf00      	nop
 8003b1c:	20003884 	.word	0x20003884

08003b20 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8003b20:	2000      	movs	r0, #0
 8003b22:	4770      	bx	lr

08003b24 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8003b24:	6800      	ldr	r0, [r0, #0]
 8003b26:	4770      	bx	lr

08003b28 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003b28:	0a0b      	lsrs	r3, r1, #8
 8003b2a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b2c:	7043      	strb	r3, [r0, #1]
 8003b2e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003b30:	0e09      	lsrs	r1, r1, #24
 8003b32:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003b34:	70c1      	strb	r1, [r0, #3]
}
 8003b36:	4770      	bx	lr

08003b38 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8003b38:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8003b3a:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8003b3e:	4290      	cmp	r0, r2
 8003b40:	d1fb      	bne.n	8003b3a <mem_set+0x2>
}
 8003b42:	4770      	bx	lr

08003b44 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8003b44:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <chk_lock+0x70>)
{
 8003b46:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 8003b48:	6818      	ldr	r0, [r3, #0]
{
 8003b4a:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8003b4c:	b160      	cbz	r0, 8003b68 <chk_lock+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b4e:	6814      	ldr	r4, [r2, #0]
 8003b50:	42a0      	cmp	r0, r4
 8003b52:	d107      	bne.n	8003b64 <chk_lock+0x20>
 8003b54:	685c      	ldr	r4, [r3, #4]
 8003b56:	6890      	ldr	r0, [r2, #8]
 8003b58:	4284      	cmp	r4, r0
 8003b5a:	d103      	bne.n	8003b64 <chk_lock+0x20>
				Files[i].clu == dp->obj.sclust &&
 8003b5c:	689c      	ldr	r4, [r3, #8]
 8003b5e:	6950      	ldr	r0, [r2, #20]
 8003b60:	4284      	cmp	r4, r0
 8003b62:	d012      	beq.n	8003b8a <chk_lock+0x46>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b64:	2400      	movs	r4, #0
 8003b66:	e000      	b.n	8003b6a <chk_lock+0x26>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8003b68:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8003b6a:	6918      	ldr	r0, [r3, #16]
 8003b6c:	b1b8      	cbz	r0, 8003b9e <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b6e:	6815      	ldr	r5, [r2, #0]
 8003b70:	42a8      	cmp	r0, r5
 8003b72:	d107      	bne.n	8003b84 <chk_lock+0x40>
 8003b74:	695d      	ldr	r5, [r3, #20]
 8003b76:	6890      	ldr	r0, [r2, #8]
 8003b78:	4285      	cmp	r5, r0
 8003b7a:	d103      	bne.n	8003b84 <chk_lock+0x40>
				Files[i].clu == dp->obj.sclust &&
 8003b7c:	6998      	ldr	r0, [r3, #24]
 8003b7e:	6952      	ldr	r2, [r2, #20]
 8003b80:	4290      	cmp	r0, r2
 8003b82:	d006      	beq.n	8003b92 <chk_lock+0x4e>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003b84:	b13c      	cbz	r4, 8003b96 <chk_lock+0x52>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e009      	b.n	8003b9e <chk_lock+0x5a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b8a:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003b8c:	b141      	cbz	r1, 8003ba0 <chk_lock+0x5c>
 8003b8e:	2010      	movs	r0, #16
 8003b90:	e005      	b.n	8003b9e <chk_lock+0x5a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b92:	2201      	movs	r2, #1
 8003b94:	e7fa      	b.n	8003b8c <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003b96:	2902      	cmp	r1, #2
 8003b98:	bf14      	ite	ne
 8003b9a:	2012      	movne	r0, #18
 8003b9c:	2000      	moveq	r0, #0
}
 8003b9e:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003ba0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003ba4:	8998      	ldrh	r0, [r3, #12]
 8003ba6:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8003baa:	4258      	negs	r0, r3
 8003bac:	4158      	adcs	r0, r3
 8003bae:	0100      	lsls	r0, r0, #4
 8003bb0:	e7f5      	b.n	8003b9e <chk_lock+0x5a>
 8003bb2:	bf00      	nop
 8003bb4:	20003858 	.word	0x20003858

08003bb8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <inc_lock+0x80>)
{
 8003bba:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	6806      	ldr	r6, [r0, #0]
 8003bc0:	429e      	cmp	r6, r3
 8003bc2:	d107      	bne.n	8003bd4 <inc_lock+0x1c>
 8003bc4:	6885      	ldr	r5, [r0, #8]
 8003bc6:	6854      	ldr	r4, [r2, #4]
 8003bc8:	42a5      	cmp	r5, r4
 8003bca:	d103      	bne.n	8003bd4 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8003bcc:	6895      	ldr	r5, [r2, #8]
 8003bce:	6944      	ldr	r4, [r0, #20]
 8003bd0:	42a5      	cmp	r5, r4
 8003bd2:	d019      	beq.n	8003c08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003bd4:	6914      	ldr	r4, [r2, #16]
 8003bd6:	42b4      	cmp	r4, r6
 8003bd8:	d118      	bne.n	8003c0c <inc_lock+0x54>
 8003bda:	6957      	ldr	r7, [r2, #20]
 8003bdc:	6885      	ldr	r5, [r0, #8]
 8003bde:	42af      	cmp	r7, r5
 8003be0:	d114      	bne.n	8003c0c <inc_lock+0x54>
			Files[i].clu == dp->obj.sclust &&
 8003be2:	6997      	ldr	r7, [r2, #24]
 8003be4:	6945      	ldr	r5, [r0, #20]
 8003be6:	42af      	cmp	r7, r5
 8003be8:	d110      	bne.n	8003c0c <inc_lock+0x54>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bea:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003bec:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 8003bf0:	8980      	ldrh	r0, [r0, #12]
 8003bf2:	b9e9      	cbnz	r1, 8003c30 <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003bf4:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8003bf8:	8989      	ldrh	r1, [r1, #12]
 8003bfa:	3101      	adds	r1, #1
 8003bfc:	b289      	uxth	r1, r1
 8003bfe:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8003c02:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c04:	8191      	strh	r1, [r2, #12]
}
 8003c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e7ef      	b.n	8003bec <inc_lock+0x34>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c0c:	b10b      	cbz	r3, 8003c12 <inc_lock+0x5a>
 8003c0e:	b98c      	cbnz	r4, 8003c34 <inc_lock+0x7c>
 8003c10:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8003c12:	011d      	lsls	r5, r3, #4
 8003c14:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8003c18:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8003c1a:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003c1c:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8003c1e:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8003c20:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8003c22:	2000      	movs	r0, #0
 8003c24:	81a0      	strh	r0, [r4, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d0e4      	beq.n	8003bf4 <inc_lock+0x3c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c2e:	e7e6      	b.n	8003bfe <inc_lock+0x46>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d0fa      	beq.n	8003c2a <inc_lock+0x72>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7e6      	b.n	8003c06 <inc_lock+0x4e>
 8003c38:	20003858 	.word	0x20003858

08003c3c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003c3c:	3801      	subs	r0, #1
 8003c3e:	2801      	cmp	r0, #1
 8003c40:	d815      	bhi.n	8003c6e <dec_lock+0x32>
		n = Files[i].ctr;
 8003c42:	4a0c      	ldr	r2, [pc, #48]	@ (8003c74 <dec_lock+0x38>)
 8003c44:	0101      	lsls	r1, r0, #4
 8003c46:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003c4a:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c50:	d104      	bne.n	8003c5c <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8003c52:	2300      	movs	r3, #0
 8003c54:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c56:	2300      	movs	r3, #0
 8003c58:	5053      	str	r3, [r2, r1]
 8003c5a:	e006      	b.n	8003c6a <dec_lock+0x2e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0fa      	beq.n	8003c56 <dec_lock+0x1a>
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8003c64:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f5      	beq.n	8003c56 <dec_lock+0x1a>
		res = FR_OK;
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c6e:	2002      	movs	r0, #2
	}
	return res;
}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20003858 	.word	0x20003858

08003c78 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <clear_lock+0x18>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4290      	cmp	r0, r2
 8003c7e:	bf04      	itt	eq
 8003c80:	2200      	moveq	r2, #0
 8003c82:	601a      	streq	r2, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	4290      	cmp	r0, r2
 8003c88:	bf04      	itt	eq
 8003c8a:	2200      	moveq	r2, #0
 8003c8c:	611a      	streq	r2, [r3, #16]
	}
}
 8003c8e:	4770      	bx	lr
 8003c90:	20003858 	.word	0x20003858

08003c94 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c94:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8003c96:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c98:	3b02      	subs	r3, #2
 8003c9a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8003c9c:	bf83      	ittte	hi
 8003c9e:	8943      	ldrhhi	r3, [r0, #10]
 8003ca0:	6ac0      	ldrhi	r0, [r0, #44]	@ 0x2c
 8003ca2:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ca6:	2000      	movls	r0, #0
}
 8003ca8:	4770      	bx	lr

08003caa <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003caa:	6802      	ldr	r2, [r0, #0]
 8003cac:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003cae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003cb0:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003cb2:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003cb4:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cb8:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003cba:	b130      	cbz	r0, 8003cca <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003cbc:	4281      	cmp	r1, r0
 8003cbe:	d302      	bcc.n	8003cc6 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003cc0:	1a09      	subs	r1, r1, r0
 8003cc2:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cc4:	e7f8      	b.n	8003cb8 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003cc6:	6858      	ldr	r0, [r3, #4]
 8003cc8:	4408      	add	r0, r1
}
 8003cca:	4770      	bx	lr

08003ccc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8003cd2:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003cd4:	01c2      	lsls	r2, r0, #7
 8003cd6:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8003cda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003cde:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
 8003ce2:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003ce4:	b2d0      	uxtb	r0, r2
	} while (--n);
 8003ce6:	d1f5      	bne.n	8003cd4 <sum_sfn+0x8>
	return sum;
}
 8003ce8:	4770      	bx	lr

08003cea <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003cea:	6802      	ldr	r2, [r0, #0]
{
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 8003cf0:	b16a      	cbz	r2, 8003d0e <get_ldnumber+0x24>
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	4619      	mov	r1, r3
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003cf6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003cfa:	281f      	cmp	r0, #31
 8003cfc:	d910      	bls.n	8003d20 <get_ldnumber+0x36>
 8003cfe:	283a      	cmp	r0, #58	@ 0x3a
 8003d00:	d1f8      	bne.n	8003cf4 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8003d02:	7813      	ldrb	r3, [r2, #0]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003d04:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8003d08:	b2c3      	uxtb	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d902      	bls.n	8003d14 <get_ldnumber+0x2a>
	int vol = -1;
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d12:	e004      	b.n	8003d1e <get_ldnumber+0x34>
			i = *tp++ - '0';
 8003d14:	3201      	adds	r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003d16:	4291      	cmp	r1, r2
 8003d18:	d1f9      	bne.n	8003d0e <get_ldnumber+0x24>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 8003d1a:	3101      	adds	r1, #1
 8003d1c:	6021      	str	r1, [r4, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8003d1e:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7fc      	b.n	8003d1e <get_ldnumber+0x34>

08003d24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003d28:	4604      	mov	r4, r0
 8003d2a:	b918      	cbnz	r0, 8003d34 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8003d2c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	602b      	str	r3, [r5, #0]
	return res;
}
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003d34:	6803      	ldr	r3, [r0, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f8      	beq.n	8003d2c <validate+0x8>
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d0f5      	beq.n	8003d2c <validate+0x8>
 8003d40:	8881      	ldrh	r1, [r0, #4]
 8003d42:	88da      	ldrh	r2, [r3, #6]
 8003d44:	4291      	cmp	r1, r2
 8003d46:	d1f1      	bne.n	8003d2c <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003d48:	7858      	ldrb	r0, [r3, #1]
 8003d4a:	f7ff fea5 	bl	8003a98 <disk_status>
 8003d4e:	f010 0001 	ands.w	r0, r0, #1
 8003d52:	d1eb      	bne.n	8003d2c <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	e7eb      	b.n	8003d30 <validate+0xc>

08003d58 <sync_window>:
{
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003d5a:	78c3      	ldrb	r3, [r0, #3]
{
 8003d5c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003d5e:	b90b      	cbnz	r3, 8003d64 <sync_window+0xc>
	FRESULT res = FR_OK;
 8003d60:	2000      	movs	r0, #0
}
 8003d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8003d64:	6b05      	ldr	r5, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003d66:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	7840      	ldrb	r0, [r0, #1]
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4639      	mov	r1, r7
 8003d72:	f7ff feb9 	bl	8003ae8 <disk_write>
 8003d76:	b990      	cbnz	r0, 8003d9e <sync_window+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d7a:	69e2      	ldr	r2, [r4, #28]
 8003d7c:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8003d7e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d2ed      	bcs.n	8003d60 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d84:	78a6      	ldrb	r6, [r4, #2]
 8003d86:	2e01      	cmp	r6, #1
 8003d88:	d9ea      	bls.n	8003d60 <sync_window+0x8>
					wsect += fs->fsize;
 8003d8a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d90:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 8003d92:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d94:	2301      	movs	r3, #1
 8003d96:	462a      	mov	r2, r5
 8003d98:	f7ff fea6 	bl	8003ae8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d9c:	e7f3      	b.n	8003d86 <sync_window+0x2e>
			res = FR_DISK_ERR;
 8003d9e:	2001      	movs	r0, #1
 8003da0:	e7df      	b.n	8003d62 <sync_window+0xa>

08003da2 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003da2:	3801      	subs	r0, #1
 8003da4:	440a      	add	r2, r1
			*d++ = *s++;
 8003da6:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8003daa:	4291      	cmp	r1, r2
			*d++ = *s++;
 8003dac:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8003db0:	d1f9      	bne.n	8003da6 <mem_cpy.part.0+0x4>
}
 8003db2:	4770      	bx	lr

08003db4 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003db4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003db8:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003dba:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003dbc:	7803      	ldrb	r3, [r0, #0]
 8003dbe:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003dc0:	bf01      	itttt	eq
 8003dc2:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003dc4:	750a      	strbeq	r2, [r1, #20]
 8003dc6:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8003dc8:	754a      	strbeq	r2, [r1, #21]
}
 8003dca:	4770      	bx	lr

08003dcc <move_window>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003dce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d010      	beq.n	8003dfa <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8003dd8:	f7ff ffbe 	bl	8003d58 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003ddc:	b960      	cbnz	r0, 8003df8 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003dde:	4622      	mov	r2, r4
 8003de0:	2301      	movs	r3, #1
 8003de2:	f105 0134 	add.w	r1, r5, #52	@ 0x34
 8003de6:	7868      	ldrb	r0, [r5, #1]
 8003de8:	f7ff fe70 	bl	8003acc <disk_read>
				res = FR_DISK_ERR;
 8003dec:	2800      	cmp	r0, #0
 8003dee:	bf1c      	itt	ne
 8003df0:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
 8003df4:	2001      	movne	r0, #1
			fs->winsect = sector;
 8003df6:	632c      	str	r4, [r5, #48]	@ 0x30
}
 8003df8:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	e7fc      	b.n	8003df8 <move_window+0x2c>
	...

08003e00 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003e00:	2300      	movs	r3, #0
{
 8003e02:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003e04:	70c3      	strb	r3, [r0, #3]
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
{
 8003e0a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003e0c:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003e0e:	f7ff ffdd 	bl	8003dcc <move_window>
 8003e12:	4603      	mov	r3, r0
 8003e14:	bb18      	cbnz	r0, 8003e5e <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003e16:	f8b4 1232 	ldrh.w	r1, [r4, #562]	@ 0x232
 8003e1a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	d11f      	bne.n	8003e62 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003e22:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003e26:	2ae9      	cmp	r2, #233	@ 0xe9
 8003e28:	d005      	beq.n	8003e36 <check_fs+0x36>
 8003e2a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e2c:	490f      	ldr	r1, [pc, #60]	@ (8003e6c <check_fs+0x6c>)
 8003e2e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8003e32:	428a      	cmp	r2, r1
 8003e34:	d117      	bne.n	8003e66 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003e36:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <check_fs+0x70>)
 8003e3c:	f7ff fe72 	bl	8003b24 <ld_dword>
 8003e40:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8003e44:	4290      	cmp	r0, r2
 8003e46:	d008      	beq.n	8003e5a <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <check_fs+0x74>)
 8003e4a:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 8003e4e:	f7ff fe69 	bl	8003b24 <ld_dword>
 8003e52:	1ac3      	subs	r3, r0, r3
 8003e54:	bf18      	it	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e7fb      	b.n	8003e5a <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003e62:	2303      	movs	r3, #3
 8003e64:	e7f9      	b.n	8003e5a <check_fs+0x5a>
	return 2;
 8003e66:	2302      	movs	r3, #2
 8003e68:	e7f7      	b.n	8003e5a <check_fs+0x5a>
 8003e6a:	bf00      	nop
 8003e6c:	009000eb 	.word	0x009000eb
 8003e70:	00544146 	.word	0x00544146
 8003e74:	33544146 	.word	0x33544146

08003e78 <find_volume>:
{
 8003e78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8003e7c:	2300      	movs	r3, #0
{
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4617      	mov	r7, r2
	*rfs = 0;
 8003e82:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8003e84:	f7ff ff31 	bl	8003cea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e88:	1e05      	subs	r5, r0, #0
 8003e8a:	f2c0 8119 	blt.w	80040c0 <find_volume+0x248>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003e8e:	4e8f      	ldr	r6, [pc, #572]	@ (80040cc <find_volume+0x254>)
 8003e90:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8003e94:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	f000 8114 	beq.w	80040c4 <find_volume+0x24c>
	*rfs = fs;							/* Return pointer to the file system object */
 8003e9c:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003ea0:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003ea4:	7823      	ldrb	r3, [r4, #0]
 8003ea6:	b173      	cbz	r3, 8003ec6 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8003ea8:	7860      	ldrb	r0, [r4, #1]
 8003eaa:	f7ff fdf5 	bl	8003a98 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003eae:	07c3      	lsls	r3, r0, #31
 8003eb0:	d409      	bmi.n	8003ec6 <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003eb2:	2f00      	cmp	r7, #0
 8003eb4:	f000 80dc 	beq.w	8004070 <find_volume+0x1f8>
 8003eb8:	0741      	lsls	r1, r0, #29
 8003eba:	f140 80d9 	bpl.w	8004070 <find_volume+0x1f8>
				return FR_WRITE_PROTECTED;
 8003ebe:	200a      	movs	r0, #10
}
 8003ec0:	b004      	add	sp, #16
 8003ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003ec6:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003ec8:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8003eca:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003ecc:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003ece:	f7ff fded 	bl	8003aac <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003ed2:	07c2      	lsls	r2, r0, #31
 8003ed4:	f100 80f8 	bmi.w	80040c8 <find_volume+0x250>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003ed8:	b10f      	cbz	r7, 8003ede <find_volume+0x66>
 8003eda:	0743      	lsls	r3, r0, #29
 8003edc:	d4ef      	bmi.n	8003ebe <find_volume+0x46>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff ff8d 	bl	8003e00 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003ee6:	2802      	cmp	r0, #2
 8003ee8:	f040 80ce 	bne.w	8004088 <find_volume+0x210>
 8003eec:	466d      	mov	r5, sp
 8003eee:	f504 73fd 	add.w	r3, r4, #506	@ 0x1fa
 8003ef2:	f204 213a 	addw	r1, r4, #570	@ 0x23a
 8003ef6:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003ef8:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8003efc:	b110      	cbz	r0, 8003f04 <find_volume+0x8c>
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fe10 	bl	8003b24 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f04:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003f06:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f0a:	428b      	cmp	r3, r1
 8003f0c:	d1f4      	bne.n	8003ef8 <find_volume+0x80>
 8003f0e:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 8003f12:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	f000 80ac 	beq.w	8004074 <find_volume+0x1fc>
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff ff6e 	bl	8003e00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003f24:	2801      	cmp	r0, #1
 8003f26:	f200 80a6 	bhi.w	8004076 <find_volume+0x1fe>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003f2a:	f8b4 303f 	ldrh.w	r3, [r4, #63]	@ 0x3f
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f32:	f040 80af 	bne.w	8004094 <find_volume+0x21c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003f36:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003f3a:	b921      	cbnz	r1, 8003f46 <find_volume+0xce>
 8003f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f40:	f7ff fdf0 	bl	8003b24 <ld_dword>
 8003f44:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003f46:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
		fs->fsize = fasize;
 8003f4a:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003f4c:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003f4e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f200 809f 	bhi.w	8004094 <find_volume+0x21c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003f56:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 8003f5a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	f000 8099 	beq.w	8004094 <find_volume+0x21c>
 8003f62:	1e6b      	subs	r3, r5, #1
 8003f64:	422b      	tst	r3, r5
 8003f66:	f040 8095 	bne.w	8004094 <find_volume+0x21c>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003f6a:	f8b4 8045 	ldrh.w	r8, [r4, #69]	@ 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003f6e:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003f72:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003f76:	f040 808d 	bne.w	8004094 <find_volume+0x21c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003f7a:	f8b4 0047 	ldrh.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003f7e:	b918      	cbnz	r0, 8003f88 <find_volume+0x110>
 8003f80:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8003f84:	f7ff fdce 	bl	8003b24 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003f88:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8081 	beq.w	8004094 <find_volume+0x21c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003f92:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003f96:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
 8003f9a:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003f9c:	4560      	cmp	r0, ip
 8003f9e:	d379      	bcc.n	8004094 <find_volume+0x21c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003fa0:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003fa4:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003fa6:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003faa:	d373      	bcc.n	8004094 <find_volume+0x21c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003fac:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8003fb0:	4282      	cmp	r2, r0
 8003fb2:	d873      	bhi.n	800409c <find_volume+0x224>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003fb4:	f640 75f5 	movw	r5, #4085	@ 0xff5
 8003fb8:	42aa      	cmp	r2, r5
 8003fba:	bf8c      	ite	hi
 8003fbc:	2502      	movhi	r5, #2
 8003fbe:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003fc0:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003fc2:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
 8003fc4:	eb07 000c 	add.w	r0, r7, ip
		if (fmt == FS_FAT32) {
 8003fc8:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003fca:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003fcc:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003fce:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003fd0:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8003fd2:	d165      	bne.n	80040a0 <find_volume+0x228>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003fd4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003fd8:	ea58 0303 	orrs.w	r3, r8, r3
 8003fdc:	d15a      	bne.n	8004094 <find_volume+0x21c>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003fde:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003fe0:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8003fe4:	f7ff fd9e 	bl	8003b24 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003fe8:	f202 12ff 	addw	r2, r2, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003fec:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003fee:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
 8003ff2:	d34f      	bcc.n	8004094 <find_volume+0x21c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003ff8:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003ffa:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8003ffe:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8004002:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004004:	d12b      	bne.n	800405e <find_volume+0x1e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004006:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800400a:	2b01      	cmp	r3, #1
 800400c:	d127      	bne.n	800405e <find_volume+0x1e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800400e:	1c79      	adds	r1, r7, #1
 8004010:	4620      	mov	r0, r4
 8004012:	f7ff fedb 	bl	8003dcc <move_window>
 8004016:	bb10      	cbnz	r0, 800405e <find_volume+0x1e6>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004018:	f8b4 2232 	ldrh.w	r2, [r4, #562]	@ 0x232
 800401c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
			fs->fsi_flag = 0;
 8004020:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004022:	429a      	cmp	r2, r3
 8004024:	d11b      	bne.n	800405e <find_volume+0x1e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004026:	4b2a      	ldr	r3, [pc, #168]	@ (80040d0 <find_volume+0x258>)
 8004028:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800402c:	f7ff fd7a 	bl	8003b24 <ld_dword>
 8004030:	4298      	cmp	r0, r3
 8004032:	d114      	bne.n	800405e <find_volume+0x1e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004034:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 8004038:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800403c:	f7ff fd72 	bl	8003b24 <ld_dword>
 8004040:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004044:	3320      	adds	r3, #32
 8004046:	4298      	cmp	r0, r3
 8004048:	d109      	bne.n	800405e <find_volume+0x1e6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800404a:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800404e:	f7ff fd69 	bl	8003b24 <ld_dword>
 8004052:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004054:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8004058:	f7ff fd64 	bl	8003b24 <ld_dword>
 800405c:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800405e:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 8004060:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 8004062:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004064:	3301      	adds	r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	80e3      	strh	r3, [r4, #6]
 800406a:	8533      	strh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 800406c:	f7ff fe04 	bl	8003c78 <clear_lock>
			return FR_OK;				/* The file system object is valid */
 8004070:	2000      	movs	r0, #0
 8004072:	e725      	b.n	8003ec0 <find_volume+0x48>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004074:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004076:	f108 0801 	add.w	r8, r8, #1
 800407a:	f1b8 0f04 	cmp.w	r8, #4
 800407e:	f47f af48 	bne.w	8003f12 <find_volume+0x9a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004082:	2804      	cmp	r0, #4
 8004084:	d106      	bne.n	8004094 <find_volume+0x21c>
 8004086:	e001      	b.n	800408c <find_volume+0x214>
 8004088:	2804      	cmp	r0, #4
 800408a:	d101      	bne.n	8004090 <find_volume+0x218>
 800408c:	2001      	movs	r0, #1
 800408e:	e717      	b.n	8003ec0 <find_volume+0x48>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004090:	2801      	cmp	r0, #1
 8004092:	d901      	bls.n	8004098 <find_volume+0x220>
 8004094:	200d      	movs	r0, #13
 8004096:	e713      	b.n	8003ec0 <find_volume+0x48>
	bsect = 0;
 8004098:	2700      	movs	r7, #0
 800409a:	e746      	b.n	8003f2a <find_volume+0xb2>
		fmt = FS_FAT32;
 800409c:	2503      	movs	r5, #3
 800409e:	e78f      	b.n	8003fc0 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80040a0:	f1b8 0f00 	cmp.w	r8, #0
 80040a4:	d0f6      	beq.n	8004094 <find_volume+0x21c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80040a6:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80040a8:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80040ac:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80040b0:	bf1b      	ittet	ne
 80040b2:	189b      	addne	r3, r3, r2
 80040b4:	f002 0201 	andne.w	r2, r2, #1
 80040b8:	461a      	moveq	r2, r3
 80040ba:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
 80040be:	e793      	b.n	8003fe8 <find_volume+0x170>
	if (vol < 0) return FR_INVALID_DRIVE;
 80040c0:	200b      	movs	r0, #11
 80040c2:	e6fd      	b.n	8003ec0 <find_volume+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80040c4:	200c      	movs	r0, #12
 80040c6:	e6fb      	b.n	8003ec0 <find_volume+0x48>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80040c8:	2003      	movs	r0, #3
 80040ca:	e6f9      	b.n	8003ec0 <find_volume+0x48>
 80040cc:	20003858 	.word	0x20003858
 80040d0:	41615252 	.word	0x41615252

080040d4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80040d4:	2901      	cmp	r1, #1
{
 80040d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040da:	4605      	mov	r5, r0
 80040dc:	460e      	mov	r6, r1
 80040de:	4614      	mov	r4, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80040e0:	d96f      	bls.n	80041c2 <put_fat+0xee>
 80040e2:	6983      	ldr	r3, [r0, #24]
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d96c      	bls.n	80041c2 <put_fat+0xee>
		switch (fs->fs_type) {
 80040e8:	7803      	ldrb	r3, [r0, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d03e      	beq.n	800416c <put_fat+0x98>
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d04e      	beq.n	8004190 <put_fat+0xbc>
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d165      	bne.n	80041c2 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 80040f6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040fa:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80040fc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004100:	f7ff fe64 	bl	8003dcc <move_window>
			if (res != FR_OK) break;
 8004104:	bb40      	cbnz	r0, 8004158 <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004106:	f016 0601 	ands.w	r6, r6, #1
			p = fs->win + bc++ % SS(fs);
 800410a:	f105 0734 	add.w	r7, r5, #52	@ 0x34
 800410e:	f108 0901 	add.w	r9, r8, #1
 8004112:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004116:	bf18      	it	ne
 8004118:	0123      	lslne	r3, r4, #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800411a:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800411c:	bf17      	itett	ne
 800411e:	f817 2008 	ldrbne.w	r2, [r7, r8]
 8004122:	b2e3      	uxtbeq	r3, r4
 8004124:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 8004128:	f002 020f 	andne.w	r2, r2, #15
 800412c:	bf18      	it	ne
 800412e:	4313      	orrne	r3, r2
 8004130:	f807 3008 	strb.w	r3, [r7, r8]
			fs->wflag = 1;
 8004134:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004136:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			fs->wflag = 1;
 8004138:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800413a:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800413e:	f7ff fe45 	bl	8003dcc <move_window>
			if (res != FR_OK) break;
 8004142:	b948      	cbnz	r0, 8004158 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8004144:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004148:	b146      	cbz	r6, 800415c <put_fat+0x88>
 800414a:	f3c4 1407 	ubfx	r4, r4, #4, #8
 800414e:	f807 4009 	strb.w	r4, [r7, r9]
			fs->wflag = 1;
 8004152:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004154:	2000      	movs	r0, #0
			fs->wflag = 1;
 8004156:	70eb      	strb	r3, [r5, #3]
}
 8004158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800415c:	f817 3009 	ldrb.w	r3, [r7, r9]
 8004160:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8004164:	f023 030f 	bic.w	r3, r3, #15
 8004168:	431c      	orrs	r4, r3
 800416a:	e7f0      	b.n	800414e <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800416c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800416e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8004172:	f7ff fe2b 	bl	8003dcc <move_window>
			if (res != FR_OK) break;
 8004176:	2800      	cmp	r0, #0
 8004178:	d1ee      	bne.n	8004158 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800417a:	0076      	lsls	r6, r6, #1
 800417c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8004180:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004184:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004186:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8004188:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800418c:	7054      	strb	r4, [r2, #1]
			break;
 800418e:	e7e0      	b.n	8004152 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004190:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8004192:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 8004196:	f7ff fe19 	bl	8003dcc <move_window>
			if (res != FR_OK) break;
 800419a:	2800      	cmp	r0, #0
 800419c:	d1dc      	bne.n	8004158 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800419e:	00b6      	lsls	r6, r6, #2
 80041a0:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80041a4:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 80041a8:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 80041ac:	4433      	add	r3, r6
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fcb8 	bl	8003b24 <ld_dword>
 80041b4:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80041b8:	4618      	mov	r0, r3
 80041ba:	4321      	orrs	r1, r4
 80041bc:	f7ff fcb4 	bl	8003b28 <st_dword>
			break;
 80041c0:	e7c7      	b.n	8004152 <put_fat+0x7e>
	FRESULT res = FR_INT_ERR;
 80041c2:	2002      	movs	r0, #2
 80041c4:	e7c8      	b.n	8004158 <put_fat+0x84>

080041c6 <sync_fs>:
{
 80041c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c8:	4604      	mov	r4, r0
	res = sync_window(fs);
 80041ca:	f7ff fdc5 	bl	8003d58 <sync_window>
 80041ce:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d142      	bne.n	800425a <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80041d4:	7823      	ldrb	r3, [r4, #0]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d137      	bne.n	800424a <sync_fs+0x84>
 80041da:	7927      	ldrb	r7, [r4, #4]
 80041dc:	2f01      	cmp	r7, #1
 80041de:	d134      	bne.n	800424a <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80041e0:	f104 0634 	add.w	r6, r4, #52	@ 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80041e4:	2355      	movs	r3, #85	@ 0x55
			mem_set(fs->win, 0, SS(fs));
 80041e6:	4601      	mov	r1, r0
 80041e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ec:	4630      	mov	r0, r6
 80041ee:	f7ff fca3 	bl	8003b38 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80041f2:	f884 3232 	strb.w	r3, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val;
 80041f6:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val;
 80041f8:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80041fa:	2172      	movs	r1, #114	@ 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80041fc:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
	*ptr++ = (BYTE)val;
 8004200:	f884 3233 	strb.w	r3, [r4, #563]	@ 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8004204:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8004206:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 800420a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800420e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8004212:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004214:	f884 1218 	strb.w	r1, [r4, #536]	@ 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8004218:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
	*ptr++ = (BYTE)val;
 800421c:	f884 321b 	strb.w	r3, [r4, #539]	@ 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8004220:	f884 1219 	strb.w	r1, [r4, #537]	@ 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 8004224:	f884 221a 	strb.w	r2, [r4, #538]	@ 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004228:	6961      	ldr	r1, [r4, #20]
 800422a:	f7ff fc7d 	bl	8003b28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800422e:	6921      	ldr	r1, [r4, #16]
 8004230:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8004234:	f7ff fc78 	bl	8003b28 <st_dword>
			fs->winsect = fs->volbase + 1;
 8004238:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800423a:	463b      	mov	r3, r7
 800423c:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800423e:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004240:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004242:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004244:	f7ff fc50 	bl	8003ae8 <disk_write>
			fs->fsi_flag = 0;
 8004248:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800424a:	2200      	movs	r2, #0
 800424c:	7860      	ldrb	r0, [r4, #1]
 800424e:	4611      	mov	r1, r2
 8004250:	f7ff fc58 	bl	8003b04 <disk_ioctl>
 8004254:	3800      	subs	r0, #0
 8004256:	bf18      	it	ne
 8004258:	2001      	movne	r0, #1
}
 800425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800425c <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 800425c:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800425e:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004260:	bf04      	itt	eq
 8004262:	8a8a      	ldrheq	r2, [r1, #20]
 8004264:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004268:	4618      	mov	r0, r3
 800426a:	4770      	bx	lr

0800426c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800426c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800426e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004270:	4606      	mov	r6, r0
 8004272:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004274:	d94e      	bls.n	8004314 <get_fat.isra.0+0xa8>
 8004276:	6983      	ldr	r3, [r0, #24]
 8004278:	4299      	cmp	r1, r3
 800427a:	d24b      	bcs.n	8004314 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 800427c:	7803      	ldrb	r3, [r0, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d029      	beq.n	80042d6 <get_fat.isra.0+0x6a>
 8004282:	2b03      	cmp	r3, #3
 8004284:	d034      	beq.n	80042f0 <get_fat.isra.0+0x84>
 8004286:	2b01      	cmp	r3, #1
 8004288:	d144      	bne.n	8004314 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 800428a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800428e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8004290:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8004294:	f7ff fd9a 	bl	8003dcc <move_window>
 8004298:	b110      	cbz	r0, 80042a0 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800429a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80042a0:	1c6f      	adds	r7, r5, #1
 80042a2:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042a6:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80042a8:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80042aa:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042ac:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80042b0:	f895 5034 	ldrb.w	r5, [r5, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042b4:	f7ff fd8a 	bl	8003dcc <move_window>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d1ee      	bne.n	800429a <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80042bc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80042c0:	4437      	add	r7, r6
 80042c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80042c6:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80042ca:	07e3      	lsls	r3, r4, #31
 80042cc:	bf4c      	ite	mi
 80042ce:	0900      	lsrmi	r0, r0, #4
 80042d0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80042d4:	e7e3      	b.n	800429e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80042d8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80042dc:	f7ff fd76 	bl	8003dcc <move_window>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d1da      	bne.n	800429a <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80042e4:	0064      	lsls	r4, r4, #1
 80042e6:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 80042ea:	4434      	add	r4, r6
 80042ec:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
			break;
 80042ee:	e7d6      	b.n	800429e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80042f0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80042f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80042f6:	f7ff fd69 	bl	8003dcc <move_window>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1cd      	bne.n	800429a <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80042fe:	00a4      	lsls	r4, r4, #2
 8004300:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8004304:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8004308:	4420      	add	r0, r4
 800430a:	f7ff fc0b 	bl	8003b24 <ld_dword>
 800430e:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8004312:	e7c4      	b.n	800429e <get_fat.isra.0+0x32>
		val = 1;	/* Internal error */
 8004314:	2001      	movs	r0, #1
	return val;
 8004316:	e7c2      	b.n	800429e <get_fat.isra.0+0x32>

08004318 <remove_chain>:
{
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	460c      	mov	r4, r1
 800431c:	4606      	mov	r6, r0
 800431e:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8004320:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004322:	2c01      	cmp	r4, #1
 8004324:	d92b      	bls.n	800437e <remove_chain+0x66>
 8004326:	69ab      	ldr	r3, [r5, #24]
 8004328:	42a3      	cmp	r3, r4
 800432a:	d928      	bls.n	800437e <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800432c:	b12a      	cbz	r2, 800433a <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800432e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004332:	4628      	mov	r0, r5
 8004334:	f7ff fece 	bl	80040d4 <put_fat>
		if (res != FR_OK) return res;
 8004338:	b938      	cbnz	r0, 800434a <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800433a:	4621      	mov	r1, r4
 800433c:	6830      	ldr	r0, [r6, #0]
 800433e:	4627      	mov	r7, r4
 8004340:	f7ff ff94 	bl	800426c <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004344:	4604      	mov	r4, r0
 8004346:	b908      	cbnz	r0, 800434c <remove_chain+0x34>
	return FR_OK;
 8004348:	2000      	movs	r0, #0
}
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800434c:	2801      	cmp	r0, #1
 800434e:	d016      	beq.n	800437e <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d016      	beq.n	8004382 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004354:	2200      	movs	r2, #0
 8004356:	4639      	mov	r1, r7
 8004358:	4628      	mov	r0, r5
 800435a:	f7ff febb 	bl	80040d4 <put_fat>
			if (res != FR_OK) return res;
 800435e:	2800      	cmp	r0, #0
 8004360:	d1f3      	bne.n	800434a <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004362:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004366:	1e91      	subs	r1, r2, #2
 8004368:	428b      	cmp	r3, r1
 800436a:	d205      	bcs.n	8004378 <remove_chain+0x60>
			fs->free_clst++;
 800436c:	3301      	adds	r3, #1
 800436e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8004370:	792b      	ldrb	r3, [r5, #4]
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004378:	42a2      	cmp	r2, r4
 800437a:	d8de      	bhi.n	800433a <remove_chain+0x22>
 800437c:	e7e4      	b.n	8004348 <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800437e:	2002      	movs	r0, #2
 8004380:	e7e3      	b.n	800434a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004382:	2001      	movs	r0, #1
 8004384:	e7e1      	b.n	800434a <remove_chain+0x32>

08004386 <create_chain>:
{
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800438c:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800438e:	460f      	mov	r7, r1
 8004390:	b971      	cbnz	r1, 80043b0 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004392:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004394:	b1ee      	cbz	r6, 80043d2 <create_chain+0x4c>
 8004396:	69ab      	ldr	r3, [r5, #24]
 8004398:	429e      	cmp	r6, r3
 800439a:	bf28      	it	cs
 800439c:	2601      	movcs	r6, #1
 800439e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80043a0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043a2:	69ab      	ldr	r3, [r5, #24]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d817      	bhi.n	80043d8 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 80043a8:	2e01      	cmp	r6, #1
 80043aa:	d114      	bne.n	80043d6 <create_chain+0x50>
 80043ac:	2400      	movs	r4, #0
 80043ae:	e006      	b.n	80043be <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80043b0:	4628      	mov	r0, r5
 80043b2:	f7ff ff5b 	bl	800426c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043b6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80043b8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043ba:	d803      	bhi.n	80043c4 <create_chain+0x3e>
 80043bc:	2401      	movs	r4, #1
}
 80043be:	4620      	mov	r0, r4
 80043c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d030      	beq.n	800442a <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043c8:	69ab      	ldr	r3, [r5, #24]
 80043ca:	4283      	cmp	r3, r0
 80043cc:	d8f7      	bhi.n	80043be <create_chain+0x38>
 80043ce:	463e      	mov	r6, r7
 80043d0:	e7e5      	b.n	800439e <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80043d2:	2601      	movs	r6, #1
 80043d4:	e7e3      	b.n	800439e <create_chain+0x18>
				ncl = 2;
 80043d6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043d8:	4621      	mov	r1, r4
 80043da:	f8d8 0000 	ldr.w	r0, [r8]
 80043de:	f7ff ff45 	bl	800426c <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 80043e2:	b130      	cbz	r0, 80043f2 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80043e4:	2801      	cmp	r0, #1
 80043e6:	d0e9      	beq.n	80043bc <create_chain+0x36>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d01e      	beq.n	800442a <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 80043ec:	42b4      	cmp	r4, r6
 80043ee:	d1d7      	bne.n	80043a0 <create_chain+0x1a>
 80043f0:	e7dc      	b.n	80043ac <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043f6:	4621      	mov	r1, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f7ff fe6b 	bl	80040d4 <put_fat>
		if (res == FR_OK && clst != 0) {
 80043fe:	b990      	cbnz	r0, 8004426 <create_chain+0xa0>
 8004400:	b957      	cbnz	r7, 8004418 <create_chain+0x92>
		fs->last_clst = ncl;
 8004402:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004404:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004408:	3a02      	subs	r2, #2
 800440a:	4293      	cmp	r3, r2
 800440c:	d910      	bls.n	8004430 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800440e:	792b      	ldrb	r3, [r5, #4]
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	712b      	strb	r3, [r5, #4]
 8004416:	e7d2      	b.n	80043be <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004418:	4622      	mov	r2, r4
 800441a:	4639      	mov	r1, r7
 800441c:	4628      	mov	r0, r5
 800441e:	f7ff fe59 	bl	80040d4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004422:	2800      	cmp	r0, #0
 8004424:	d0ed      	beq.n	8004402 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004426:	2801      	cmp	r0, #1
 8004428:	d1c8      	bne.n	80043bc <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800442a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800442e:	e7c6      	b.n	80043be <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004430:	3b01      	subs	r3, #1
 8004432:	616b      	str	r3, [r5, #20]
 8004434:	e7eb      	b.n	800440e <create_chain+0x88>

08004436 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004436:	6943      	ldr	r3, [r0, #20]
{
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800443c:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004440:	69c3      	ldr	r3, [r0, #28]
{
 8004442:	4605      	mov	r5, r0
 8004444:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004446:	b18b      	cbz	r3, 800446c <dir_next+0x36>
 8004448:	f5b8 1f00 	cmp.w	r8, #2097152	@ 0x200000
 800444c:	d20e      	bcs.n	800446c <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800444e:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004452:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004454:	2f00      	cmp	r7, #0
 8004456:	d14f      	bne.n	80044f8 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 8004458:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800445a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800445c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800445e:	b941      	cbnz	r1, 8004472 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004460:	8923      	ldrh	r3, [r4, #8]
 8004462:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004466:	d847      	bhi.n	80044f8 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 8004468:	2300      	movs	r3, #0
 800446a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800446c:	2004      	movs	r0, #4
}
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004472:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 8004476:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800447a:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
 800447e:	d13b      	bne.n	80044f8 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004480:	4620      	mov	r0, r4
 8004482:	f7ff fef3 	bl	800426c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004486:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004488:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800448a:	d801      	bhi.n	8004490 <dir_next+0x5a>
 800448c:	2002      	movs	r0, #2
 800448e:	e7ee      	b.n	800446e <dir_next+0x38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004490:	1c42      	adds	r2, r0, #1
 8004492:	d101      	bne.n	8004498 <dir_next+0x62>
 8004494:	2001      	movs	r0, #1
 8004496:	e7ea      	b.n	800446e <dir_next+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004498:	69a3      	ldr	r3, [r4, #24]
 800449a:	4283      	cmp	r3, r0
 800449c:	d826      	bhi.n	80044ec <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 800449e:	f1ba 0f00 	cmp.w	sl, #0
 80044a2:	d0e1      	beq.n	8004468 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80044a4:	69a9      	ldr	r1, [r5, #24]
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7ff ff6d 	bl	8004386 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80044ac:	4606      	mov	r6, r0
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d035      	beq.n	800451e <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80044b2:	2801      	cmp	r0, #1
 80044b4:	d0ea      	beq.n	800448c <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	d0ec      	beq.n	8004494 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7ff fc4c 	bl	8003d58 <sync_window>
 80044c0:	4601      	mov	r1, r0
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d1e6      	bne.n	8004494 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80044c6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80044ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
						fs->wflag = 1;
 80044ce:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80044d2:	f7ff fb31 	bl	8003b38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80044d6:	4631      	mov	r1, r6
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff fbdb 	bl	8003c94 <clust2sect>
 80044de:	8963      	ldrh	r3, [r4, #10]
 80044e0:	6320      	str	r0, [r4, #48]	@ 0x30
 80044e2:	4599      	cmp	r9, r3
 80044e4:	d30f      	bcc.n	8004506 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
 80044e6:	eba0 0009 	sub.w	r0, r0, r9
 80044ea:	6320      	str	r0, [r4, #48]	@ 0x30
				dp->sect = clust2sect(fs, clst);
 80044ec:	4631      	mov	r1, r6
 80044ee:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 80044f0:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80044f2:	f7ff fbcf 	bl	8003c94 <clust2sect>
 80044f6:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80044f8:	3434      	adds	r4, #52	@ 0x34
	return FR_OK;
 80044fa:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 80044fc:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004500:	443c      	add	r4, r7
 8004502:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004504:	e7b3      	b.n	800446e <dir_next+0x38>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004506:	4620      	mov	r0, r4
						fs->wflag = 1;
 8004508:	f884 a003 	strb.w	sl, [r4, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800450c:	f7ff fc24 	bl	8003d58 <sync_window>
 8004510:	2800      	cmp	r0, #0
 8004512:	d1bf      	bne.n	8004494 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004514:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004516:	f109 0901 	add.w	r9, r9, #1
 800451a:	3001      	adds	r0, #1
 800451c:	e7df      	b.n	80044de <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800451e:	2007      	movs	r0, #7
 8004520:	e7a5      	b.n	800446e <dir_next+0x38>

08004522 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004522:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
{
 8004526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004528:	4606      	mov	r6, r0
 800452a:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
 800452c:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800452e:	d301      	bcc.n	8004534 <dir_sdi+0x12>
		return FR_INT_ERR;
 8004530:	2002      	movs	r0, #2
}
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004534:	06ca      	lsls	r2, r1, #27
 8004536:	d1fb      	bne.n	8004530 <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004538:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800453a:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800453c:	b9ba      	cbnz	r2, 800456e <dir_sdi+0x4c>
 800453e:	782b      	ldrb	r3, [r5, #0]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <dir_sdi+0x26>
		clst = fs->dirbase;
 8004544:	6aab      	ldr	r3, [r5, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004546:	b99b      	cbnz	r3, 8004570 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004548:	892b      	ldrh	r3, [r5, #8]
 800454a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800454e:	d9ef      	bls.n	8004530 <dir_sdi+0xe>
		dp->sect = fs->dirbase;
 8004550:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
	dp->clust = clst;					/* Current cluster# */
 8004552:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004556:	2800      	cmp	r0, #0
 8004558:	d0ea      	beq.n	8004530 <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800455a:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800455e:	3534      	adds	r5, #52	@ 0x34
 8004560:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004564:	61f0      	str	r0, [r6, #28]
	return FR_OK;
 8004566:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004568:	4425      	add	r5, r4
 800456a:	6235      	str	r5, [r6, #32]
	return FR_OK;
 800456c:	e7e1      	b.n	8004532 <dir_sdi+0x10>
 800456e:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004570:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004572:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004574:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004576:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004578:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 800457a:	d203      	bcs.n	8004584 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
 800457c:	4628      	mov	r0, r5
 800457e:	f7ff fb89 	bl	8003c94 <clust2sect>
 8004582:	e7e6      	b.n	8004552 <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004584:	6830      	ldr	r0, [r6, #0]
 8004586:	f7ff fe71 	bl	800426c <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800458a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800458c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800458e:	d006      	beq.n	800459e <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004590:	2801      	cmp	r0, #1
 8004592:	d9cd      	bls.n	8004530 <dir_sdi+0xe>
 8004594:	69ab      	ldr	r3, [r5, #24]
 8004596:	4283      	cmp	r3, r0
 8004598:	d9ca      	bls.n	8004530 <dir_sdi+0xe>
			ofs -= csz;
 800459a:	1be4      	subs	r4, r4, r7
 800459c:	e7eb      	b.n	8004576 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800459e:	2001      	movs	r0, #1
 80045a0:	e7c7      	b.n	8004532 <dir_sdi+0x10>
	...

080045a4 <dir_find>:
{
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 80045a8:	6803      	ldr	r3, [r0, #0]
{
 80045aa:	b085      	sub	sp, #20
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80045ac:	2100      	movs	r1, #0
{
 80045ae:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80045b0:	9300      	str	r3, [sp, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80045b2:	f7ff ffb6 	bl	8004522 <dir_sdi>
	if (res != FR_OK) return res;
 80045b6:	4606      	mov	r6, r0
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f040 8096 	bne.w	80046ea <dir_find+0x146>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80045be:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 80045c2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80045c6:	46c1      	mov	r9, r8
 80045c8:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
		res = move_window(fs, dp->sect);
 80045cc:	69e1      	ldr	r1, [r4, #28]
 80045ce:	9800      	ldr	r0, [sp, #0]
 80045d0:	f7ff fbfc 	bl	8003dcc <move_window>
		if (res != FR_OK) break;
 80045d4:	4606      	mov	r6, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f040 8087 	bne.w	80046ea <dir_find+0x146>
		c = dp->dir[DIR_Name];
 80045dc:	6a25      	ldr	r5, [r4, #32]
 80045de:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80045e0:	2f00      	cmp	r7, #0
 80045e2:	f000 8086 	beq.w	80046f2 <dir_find+0x14e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80045e6:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80045e8:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80045ea:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 80045ee:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80045f0:	d003      	beq.n	80045fa <dir_find+0x56>
 80045f2:	0710      	lsls	r0, r2, #28
 80045f4:	d504      	bpl.n	8004600 <dir_find+0x5c>
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d004      	beq.n	8004604 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80045fa:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
 80045fe:	e04e      	b.n	800469e <dir_find+0xfa>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d154      	bne.n	80046ae <dir_find+0x10a>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004604:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8004608:	0659      	lsls	r1, r3, #25
 800460a:	d43e      	bmi.n	800468a <dir_find+0xe6>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800460c:	067a      	lsls	r2, r7, #25
 800460e:	d544      	bpl.n	800469a <dir_find+0xf6>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004610:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004612:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						sum = dp->dir[LDIR_Chksum];
 8004616:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800461a:	6323      	str	r3, [r4, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800461c:	7b6b      	ldrb	r3, [r5, #13]
 800461e:	4543      	cmp	r3, r8
 8004620:	d13d      	bne.n	800469e <dir_find+0xfa>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004622:	8b6b      	ldrh	r3, [r5, #26]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <dir_find+0xfa>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004628:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800462a:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800462c:	9b00      	ldr	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800462e:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8004632:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 80046fc <dir_find+0x158>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004636:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800463a:	230d      	movs	r3, #13
 800463c:	3e01      	subs	r6, #1
 800463e:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004640:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 8004644:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 8004646:	b36a      	cbz	r2, 80046a4 <dir_find+0x100>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004648:	2efe      	cmp	r6, #254	@ 0xfe
 800464a:	d828      	bhi.n	800469e <dir_find+0xfa>
 800464c:	4618      	mov	r0, r3
 800464e:	9303      	str	r3, [sp, #12]
 8004650:	f000 fecc 	bl	80053ec <ff_wtoupper>
 8004654:	1c71      	adds	r1, r6, #1
 8004656:	9002      	str	r0, [sp, #8]
 8004658:	f83b 0016 	ldrh.w	r0, [fp, r6, lsl #1]
 800465c:	9101      	str	r1, [sp, #4]
 800465e:	f000 fec5 	bl	80053ec <ff_wtoupper>
 8004662:	9a02      	ldr	r2, [sp, #8]
 8004664:	4282      	cmp	r2, r0
 8004666:	d11a      	bne.n	800469e <dir_find+0xfa>
	rv = rv << 8 | ptr[0];
 8004668:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800466a:	9901      	ldr	r1, [sp, #4]
	rv = rv << 8 | ptr[0];
 800466c:	461a      	mov	r2, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800466e:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <dir_find+0x154>)
 8004672:	454b      	cmp	r3, r9
 8004674:	d1e4      	bne.n	8004640 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004676:	782b      	ldrb	r3, [r5, #0]
 8004678:	065b      	lsls	r3, r3, #25
 800467a:	d503      	bpl.n	8004684 <dir_find+0xe0>
 800467c:	b112      	cbz	r2, 8004684 <dir_find+0xe0>
 800467e:	f83b 3016 	ldrh.w	r3, [fp, r6, lsl #1]
 8004682:	b963      	cbnz	r3, 800469e <dir_find+0xfa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004684:	3f01      	subs	r7, #1
 8004686:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 800468a:	2100      	movs	r1, #0
 800468c:	4620      	mov	r0, r4
 800468e:	f7ff fed2 	bl	8004436 <dir_next>
	} while (res == FR_OK);
 8004692:	4606      	mov	r6, r0
 8004694:	2800      	cmp	r0, #0
 8004696:	d099      	beq.n	80045cc <dir_find+0x28>
 8004698:	e027      	b.n	80046ea <dir_find+0x146>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800469a:	45b9      	cmp	r9, r7
 800469c:	d0be      	beq.n	800461c <dir_find+0x78>
 800469e:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80046a2:	e7f2      	b.n	800468a <dir_find+0xe6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80046a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80046a8:	428b      	cmp	r3, r1
 80046aa:	d0e1      	beq.n	8004670 <dir_find+0xcc>
 80046ac:	e7f7      	b.n	800469e <dir_find+0xfa>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80046ae:	f1b9 0f00 	cmp.w	r9, #0
 80046b2:	d104      	bne.n	80046be <dir_find+0x11a>
 80046b4:	4628      	mov	r0, r5
 80046b6:	f7ff fb09 	bl	8003ccc <sum_sfn>
 80046ba:	4540      	cmp	r0, r8
 80046bc:	d015      	beq.n	80046ea <dir_find+0x146>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80046be:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
 80046c2:	f016 0601 	ands.w	r6, r6, #1
 80046c6:	d198      	bne.n	80045fa <dir_find+0x56>
 80046c8:	f104 0224 	add.w	r2, r4, #36	@ 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046cc:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 80046d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046d4:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 80046d8:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 80046da:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 80046de:	d002      	beq.n	80046e6 <dir_find+0x142>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f5      	beq.n	80046d0 <dir_find+0x12c>
 80046e4:	e789      	b.n	80045fa <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d187      	bne.n	80045fa <dir_find+0x56>
}
 80046ea:	4630      	mov	r0, r6
 80046ec:	b005      	add	sp, #20
 80046ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80046f2:	2604      	movs	r6, #4
 80046f4:	e7f9      	b.n	80046ea <dir_find+0x146>
 80046f6:	bf00      	nop
 80046f8:	08007467 	.word	0x08007467
 80046fc:	0800745a 	.word	0x0800745a

08004700 <dir_register>:
{
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004704:	f890 402f 	ldrb.w	r4, [r0, #47]	@ 0x2f
{
 8004708:	b089      	sub	sp, #36	@ 0x24
 800470a:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800470c:	f014 04a0 	ands.w	r4, r4, #160	@ 0xa0
 8004710:	f040 8132 	bne.w	8004978 <dir_register+0x278>
	FATFS *fs = dp->obj.fs;
 8004714:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004716:	68f2      	ldr	r2, [r6, #12]
 8004718:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d168      	bne.n	80047f2 <dir_register+0xf2>
	mem_cpy(sn, dp->fn, 12);
 8004720:	f105 0724 	add.w	r7, r5, #36	@ 0x24
	if (cnt) {
 8004724:	220c      	movs	r2, #12
 8004726:	a805      	add	r0, sp, #20
 8004728:	4639      	mov	r1, r7
 800472a:	f7ff fb3a 	bl	8003da2 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800472e:	f89d b01f 	ldrb.w	fp, [sp, #31]
 8004732:	f01b 0f01 	tst.w	fp, #1
 8004736:	d076      	beq.n	8004826 <dir_register+0x126>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004738:	2340      	movs	r3, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 800473a:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800473e:	f8df a240 	ldr.w	sl, [pc, #576]	@ 8004980 <dir_register+0x280>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004742:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004746:	220b      	movs	r2, #11
 8004748:	a905      	add	r1, sp, #20
 800474a:	4638      	mov	r0, r7
 800474c:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 8004750:	f7ff fb27 	bl	8003da2 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004754:	f1b8 0f05 	cmp.w	r8, #5
 8004758:	d95b      	bls.n	8004812 <dir_register+0x112>
 800475a:	f1a9 0102 	sub.w	r1, r9, #2
 800475e:	4643      	mov	r3, r8
		while (*lfn) {	/* Create a CRC */
 8004760:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8004764:	2a00      	cmp	r2, #0
 8004766:	d146      	bne.n	80047f6 <dir_register+0xf6>
 8004768:	a805      	add	r0, sp, #20
 800476a:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 800476c:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
 8004770:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 8004772:	f10c 0130 	add.w	r1, ip, #48	@ 0x30
		if (c > '9') c += 7;
 8004776:	2939      	cmp	r1, #57	@ 0x39
 8004778:	bf88      	it	hi
 800477a:	f10c 0137 	addhi.w	r1, ip, #55	@ 0x37
	} while (seq);
 800477e:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8004780:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
 8004784:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8004788:	d845      	bhi.n	8004816 <dir_register+0x116>
	ns[i] = '~';
 800478a:	f102 0320 	add.w	r3, r2, #32
 800478e:	217e      	movs	r1, #126	@ 0x7e
 8004790:	446b      	add	r3, sp
 8004792:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004796:	f105 0123 	add.w	r1, r5, #35	@ 0x23
 800479a:	2300      	movs	r3, #0
 800479c:	4608      	mov	r0, r1
 800479e:	429a      	cmp	r2, r3
 80047a0:	d006      	beq.n	80047b0 <dir_register+0xb0>
 80047a2:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 80047a6:	f103 0e01 	add.w	lr, r3, #1
 80047aa:	f1bc 0f20 	cmp.w	ip, #32
 80047ae:	d134      	bne.n	800481a <dir_register+0x11a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047b0:	2a07      	cmp	r2, #7
 80047b2:	f103 0301 	add.w	r3, r3, #1
 80047b6:	bf9b      	ittet	ls
 80047b8:	f102 0018 	addls.w	r0, r2, #24
 80047bc:	f102 0020 	addls.w	r0, r2, #32
 80047c0:	2020      	movhi	r0, #32
 80047c2:	3201      	addls	r2, #1
 80047c4:	bf9c      	itt	ls
 80047c6:	4468      	addls	r0, sp
 80047c8:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
 80047cc:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047ce:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
 80047d0:	d9ee      	bls.n	80047b0 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80047d2:	4628      	mov	r0, r5
 80047d4:	f7ff fee6 	bl	80045a4 <dir_find>
 80047d8:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 80047da:	bb00      	cbnz	r0, 800481e <dir_register+0x11e>
		for (n = 1; n < 100; n++) {
 80047dc:	f108 0801 	add.w	r8, r8, #1
 80047e0:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 80047e4:	d1af      	bne.n	8004746 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80047e6:	f04f 0907 	mov.w	r9, #7
}
 80047ea:	4648      	mov	r0, r9
 80047ec:	b009      	add	sp, #36	@ 0x24
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80047f2:	3401      	adds	r4, #1
 80047f4:	e790      	b.n	8004718 <dir_register+0x18>
 80047f6:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 80047f8:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 80047fc:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 80047fe:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8004802:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004806:	bf18      	it	ne
 8004808:	ea83 030a 	eorne.w	r3, r3, sl
			for (i = 0; i < 16; i++) {
 800480c:	3801      	subs	r0, #1
 800480e:	d1f3      	bne.n	80047f8 <dir_register+0xf8>
 8004810:	e7a6      	b.n	8004760 <dir_register+0x60>
 8004812:	4643      	mov	r3, r8
 8004814:	e7a8      	b.n	8004768 <dir_register+0x68>
		seq /= 16;
 8004816:	460b      	mov	r3, r1
 8004818:	e7a8      	b.n	800476c <dir_register+0x6c>
 800481a:	4673      	mov	r3, lr
 800481c:	e7bf      	b.n	800479e <dir_register+0x9e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800481e:	2804      	cmp	r0, #4
 8004820:	d1e3      	bne.n	80047ea <dir_register+0xea>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004822:	f885 b02f 	strb.w	fp, [r5, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004826:	f01b 0f02 	tst.w	fp, #2
	res = dir_sdi(dp, 0);
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	4628      	mov	r0, r5
	FATFS *fs = dp->obj.fs;
 8004830:	f8d5 a000 	ldr.w	sl, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004834:	bf1b      	ittet	ne
 8004836:	340c      	addne	r4, #12
 8004838:	230d      	movne	r3, #13
 800483a:	2401      	moveq	r4, #1
 800483c:	fbb4 f4f3 	udivne	r4, r4, r3
 8004840:	bf18      	it	ne
 8004842:	3401      	addne	r4, #1
	res = dir_sdi(dp, 0);
 8004844:	f7ff fe6d 	bl	8004522 <dir_sdi>
	if (res == FR_OK) {
 8004848:	4681      	mov	r9, r0
 800484a:	2800      	cmp	r0, #0
 800484c:	f040 808f 	bne.w	800496e <dir_register+0x26e>
		n = 0;
 8004850:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8004852:	69e9      	ldr	r1, [r5, #28]
 8004854:	4650      	mov	r0, sl
 8004856:	f7ff fab9 	bl	8003dcc <move_window>
			if (res != FR_OK) break;
 800485a:	4681      	mov	r9, r0
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 8086 	bne.w	800496e <dir_register+0x26e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004862:	6a2b      	ldr	r3, [r5, #32]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2be5      	cmp	r3, #229	@ 0xe5
 8004868:	d001      	beq.n	800486e <dir_register+0x16e>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d176      	bne.n	800495c <dir_register+0x25c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	4544      	cmp	r4, r8
 8004874:	d173      	bne.n	800495e <dir_register+0x25e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004876:	3c01      	subs	r4, #1
 8004878:	d055      	beq.n	8004926 <dir_register+0x226>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800487a:	6969      	ldr	r1, [r5, #20]
 800487c:	4628      	mov	r0, r5
 800487e:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8004882:	f7ff fe4e 	bl	8004522 <dir_sdi>
		if (res == FR_OK) {
 8004886:	4681      	mov	r9, r0
 8004888:	2800      	cmp	r0, #0
 800488a:	d1ae      	bne.n	80047ea <dir_register+0xea>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800488c:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004890:	4638      	mov	r0, r7
 8004892:	f7ff fa1b 	bl	8003ccc <sum_sfn>
 8004896:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8004898:	69e9      	ldr	r1, [r5, #28]
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff fa96 	bl	8003dcc <move_window>
 80048a0:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d1a1      	bne.n	80047ea <dir_register+0xea>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80048a6:	6a2b      	ldr	r3, [r5, #32]
 80048a8:	b2e1      	uxtb	r1, r4
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80048aa:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80048ac:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80048b0:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80048b4:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80048b6:	f04f 020f 	mov.w	r2, #15
 80048ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004984 <dir_register+0x284>
 80048be:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80048c0:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 80048c2:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80048c4:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 80048c8:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 80048ca:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 80048cc:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80048ce:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80048d0:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 80048d4:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80048d8:	bf18      	it	ne
 80048da:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80048de:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80048e2:	bf18      	it	ne
 80048e4:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80048e6:	f803 0009 	strb.w	r0, [r3, r9]
 80048ea:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80048ee:	2800      	cmp	r0, #0
 80048f0:	bf08      	it	eq
 80048f2:	4640      	moveq	r0, r8
	} while (++s < 13);
 80048f4:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 80048f8:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 80048fc:	d1e7      	bne.n	80048ce <dir_register+0x1ce>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80048fe:	4540      	cmp	r0, r8
 8004900:	d002      	beq.n	8004908 <dir_register+0x208>
 8004902:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8004906:	b90a      	cbnz	r2, 800490c <dir_register+0x20c>
 8004908:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800490c:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800490e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8004910:	2100      	movs	r1, #0
 8004912:	4628      	mov	r0, r5
				fs->wflag = 1;
 8004914:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004916:	f7ff fd8e 	bl	8004436 <dir_next>
			} while (res == FR_OK && --nent);
 800491a:	4681      	mov	r9, r0
 800491c:	2800      	cmp	r0, #0
 800491e:	f47f af64 	bne.w	80047ea <dir_register+0xea>
 8004922:	3c01      	subs	r4, #1
 8004924:	d1b8      	bne.n	8004898 <dir_register+0x198>
		res = move_window(fs, dp->sect);
 8004926:	69e9      	ldr	r1, [r5, #28]
 8004928:	4630      	mov	r0, r6
 800492a:	f7ff fa4f 	bl	8003dcc <move_window>
		if (res == FR_OK) {
 800492e:	4681      	mov	r9, r0
 8004930:	2800      	cmp	r0, #0
 8004932:	f47f af5a 	bne.w	80047ea <dir_register+0xea>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004936:	4601      	mov	r1, r0
 8004938:	2220      	movs	r2, #32
 800493a:	6a28      	ldr	r0, [r5, #32]
 800493c:	f7ff f8fc 	bl	8003b38 <mem_set>
	if (cnt) {
 8004940:	220b      	movs	r2, #11
 8004942:	4639      	mov	r1, r7
 8004944:	6a28      	ldr	r0, [r5, #32]
 8004946:	f7ff fa2c 	bl	8003da2 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800494a:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 800494e:	6a2a      	ldr	r2, [r5, #32]
 8004950:	f003 0318 	and.w	r3, r3, #24
 8004954:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	70f3      	strb	r3, [r6, #3]
 800495a:	e746      	b.n	80047ea <dir_register+0xea>
				n = 0;					/* Not a blank entry. Restart to search */
 800495c:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 800495e:	2101      	movs	r1, #1
 8004960:	4628      	mov	r0, r5
 8004962:	f7ff fd68 	bl	8004436 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004966:	4681      	mov	r9, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	f43f af72 	beq.w	8004852 <dir_register+0x152>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800496e:	f1b9 0f04 	cmp.w	r9, #4
 8004972:	f43f af38 	beq.w	80047e6 <dir_register+0xe6>
 8004976:	e738      	b.n	80047ea <dir_register+0xea>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004978:	f04f 0906 	mov.w	r9, #6
 800497c:	e735      	b.n	80047ea <dir_register+0xea>
 800497e:	bf00      	nop
 8004980:	00011021 	.word	0x00011021
 8004984:	0800745a 	.word	0x0800745a

08004988 <follow_path>:
{
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800498c:	6803      	ldr	r3, [r0, #0]
{
 800498e:	b085      	sub	sp, #20
 8004990:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8004992:	9301      	str	r3, [sp, #4]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004994:	4688      	mov	r8, r1
 8004996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499a:	2b2f      	cmp	r3, #47	@ 0x2f
 800499c:	d0fa      	beq.n	8004994 <follow_path+0xc>
 800499e:	2b5c      	cmp	r3, #92	@ 0x5c
 80049a0:	d0f8      	beq.n	8004994 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 80049a2:	f04f 0a00 	mov.w	sl, #0
 80049a6:	f8c6 a008 	str.w	sl, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80049aa:	f898 3000 	ldrb.w	r3, [r8]
 80049ae:	2b1f      	cmp	r3, #31
 80049b0:	f200 80b3 	bhi.w	8004b1a <follow_path+0x192>
		dp->fn[NSFLAG] = NS_NONAME;
 80049b4:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 80049b6:	4651      	mov	r1, sl
 80049b8:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 80049ba:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
}
 80049be:	b005      	add	sp, #20
 80049c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80049c4:	f7ff bdad 	b.w	8004522 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049c8:	3501      	adds	r5, #1
 80049ca:	e0b9      	b.n	8004b40 <follow_path+0x1b8>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80049cc:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80049d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049d4:	d00e      	beq.n	80049f4 <follow_path+0x6c>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80049d6:	2101      	movs	r1, #1
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 fceb 	bl	80053b4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80049de:	b148      	cbz	r0, 80049f4 <follow_path+0x6c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80049e0:	287f      	cmp	r0, #127	@ 0x7f
 80049e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049e6:	d807      	bhi.n	80049f8 <follow_path+0x70>
 80049e8:	4c7f      	ldr	r4, [pc, #508]	@ (8004be8 <follow_path+0x260>)
	while (*str && *str != chr) str++;
 80049ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ee:	b119      	cbz	r1, 80049f8 <follow_path+0x70>
 80049f0:	4288      	cmp	r0, r1
 80049f2:	d1fa      	bne.n	80049ea <follow_path+0x62>
				cf |= NS_LOSS | NS_LFN; break;
 80049f4:	2006      	movs	r0, #6
 80049f6:	e04a      	b.n	8004a8e <follow_path+0x106>
		w = p[si++];					/* Get a character */
 80049f8:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
 80049fa:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
 80049fe:	e095      	b.n	8004b2c <follow_path+0x1a4>
		w = lfn[di - 1];
 8004a00:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d002      	beq.n	8004a0e <follow_path+0x86>
 8004a08:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0a:	f040 80a5 	bne.w	8004b58 <follow_path+0x1d0>
		di--;
 8004a0e:	3f01      	subs	r7, #1
 8004a10:	e09f      	b.n	8004b52 <follow_path+0x1ca>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004a12:	3101      	adds	r1, #1
 8004a14:	e0ac      	b.n	8004b70 <follow_path+0x1e8>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004a16:	459b      	cmp	fp, r3
 8004a18:	d204      	bcs.n	8004a24 <follow_path+0x9c>
 8004a1a:	42ba      	cmp	r2, r7
 8004a1c:	d146      	bne.n	8004aac <follow_path+0x124>
			if (ni == 11) {				/* Long extension */
 8004a1e:	2b0b      	cmp	r3, #11
 8004a20:	d13d      	bne.n	8004a9e <follow_path+0x116>
 8004a22:	e001      	b.n	8004a28 <follow_path+0xa0>
 8004a24:	2b0b      	cmp	r3, #11
 8004a26:	d135      	bne.n	8004a94 <follow_path+0x10c>
				cf |= NS_LOSS | NS_LFN; break;
 8004a28:	f044 0403 	orr.w	r4, r4, #3
 8004a2c:	230b      	movs	r3, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004a2e:	f896 2024 	ldrb.w	r2, [r6, #36]	@ 0x24
 8004a32:	2ae5      	cmp	r2, #229	@ 0xe5
 8004a34:	bf04      	itt	eq
 8004a36:	2205      	moveq	r2, #5
 8004a38:	f886 2024 	strbeq.w	r2, [r6, #36]	@ 0x24
	if (ni == 8) b <<= 2;
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	bf04      	itt	eq
 8004a40:	00ad      	lsleq	r5, r5, #2
 8004a42:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004a44:	f005 030c 	and.w	r3, r5, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d003      	beq.n	8004a54 <follow_path+0xcc>
 8004a4c:	f005 0203 	and.w	r2, r5, #3
 8004a50:	2a03      	cmp	r2, #3
 8004a52:	d101      	bne.n	8004a58 <follow_path+0xd0>
 8004a54:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004a58:	07a1      	lsls	r1, r4, #30
 8004a5a:	d409      	bmi.n	8004a70 <follow_path+0xe8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004a5c:	f005 0503 	and.w	r5, r5, #3
 8004a60:	2d01      	cmp	r5, #1
 8004a62:	bf08      	it	eq
 8004a64:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	bf08      	it	eq
 8004a6c:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8004a70:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004a72:	f886 402f 	strb.w	r4, [r6, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8004a76:	f7ff fd95 	bl	80045a4 <dir_find>
			ns = dp->fn[NSFLAG];
 8004a7a:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d03a      	beq.n	8004af8 <follow_path+0x170>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004a82:	2804      	cmp	r0, #4
 8004a84:	d103      	bne.n	8004a8e <follow_path+0x106>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a86:	f013 0f04 	tst.w	r3, #4
 8004a8a:	bf08      	it	eq
 8004a8c:	2005      	moveq	r0, #5
}
 8004a8e:	b005      	add	sp, #20
 8004a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004a94:	42ba      	cmp	r2, r7
 8004a96:	d002      	beq.n	8004a9e <follow_path+0x116>
 8004a98:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8004a9c:	d8c7      	bhi.n	8004a2e <follow_path+0xa6>
			b <<= 2; continue;
 8004a9e:	00ad      	lsls	r5, r5, #2
 8004aa0:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004aa2:	230b      	movs	r3, #11
 8004aa4:	f04f 0b08 	mov.w	fp, #8
			b <<= 2; continue;
 8004aa8:	b2ed      	uxtb	r5, r5
 8004aaa:	e08b      	b.n	8004bc4 <follow_path+0x23c>
		if (w >= 0x80) {				/* Non ASCII character */
 8004aac:	287f      	cmp	r0, #127	@ 0x7f
 8004aae:	d90e      	bls.n	8004ace <follow_path+0x146>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004ab0:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
 8004ab2:	f044 0402 	orr.w	r4, r4, #2
 8004ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004aba:	f000 fc7b 	bl	80053b4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ac2:	b160      	cbz	r0, 8004ade <follow_path+0x156>
 8004ac4:	4949      	ldr	r1, [pc, #292]	@ (8004bec <follow_path+0x264>)
 8004ac6:	4401      	add	r1, r0
 8004ac8:	f811 0c73 	ldrb.w	r0, [r1, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004acc:	b138      	cbz	r0, 8004ade <follow_path+0x156>
	while (*str && *str != chr) str++;
 8004ace:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8004bf0 <follow_path+0x268>
 8004ad2:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d078      	beq.n	8004bcc <follow_path+0x244>
 8004ada:	4281      	cmp	r1, r0
 8004adc:	d1f9      	bne.n	8004ad2 <follow_path+0x14a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004ade:	f044 0403 	orr.w	r4, r4, #3
 8004ae2:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8004ae4:	eb06 010b 	add.w	r1, r6, fp
 8004ae8:	f10b 0b01 	add.w	fp, fp, #1
 8004aec:	f881 0024 	strb.w	r0, [r1, #36]	@ 0x24
 8004af0:	e068      	b.n	8004bc4 <follow_path+0x23c>
					b |= 2;
 8004af2:	f045 0502 	orr.w	r5, r5, #2
 8004af6:	e7f5      	b.n	8004ae4 <follow_path+0x15c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004af8:	075a      	lsls	r2, r3, #29
 8004afa:	d4c8      	bmi.n	8004a8e <follow_path+0x106>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004afc:	79b3      	ldrb	r3, [r6, #6]
 8004afe:	06db      	lsls	r3, r3, #27
 8004b00:	d562      	bpl.n	8004bc8 <follow_path+0x240>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b08:	6973      	ldr	r3, [r6, #20]
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	4419      	add	r1, r3
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	7818      	ldrb	r0, [r3, #0]
 8004b14:	f7ff fba2 	bl	800425c <ld_clust.isra.0>
 8004b18:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004b1a:	6833      	ldr	r3, [r6, #0]
 8004b1c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004b20:	2700      	movs	r7, #0
 8004b22:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8004b26:	f1a9 0b02 	sub.w	fp, r9, #2
 8004b2a:	465b      	mov	r3, fp
		w = p[si++];					/* Get a character */
 8004b2c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8004b30:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8004b32:	2c1f      	cmp	r4, #31
 8004b34:	d90c      	bls.n	8004b50 <follow_path+0x1c8>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004b36:	2c2f      	cmp	r4, #47	@ 0x2f
 8004b38:	d002      	beq.n	8004b40 <follow_path+0x1b8>
 8004b3a:	2c5c      	cmp	r4, #92	@ 0x5c
 8004b3c:	f47f af46 	bne.w	80049cc <follow_path+0x44>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b40:	f818 3005 	ldrb.w	r3, [r8, r5]
 8004b44:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b46:	f43f af3f 	beq.w	80049c8 <follow_path+0x40>
 8004b4a:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b4c:	f43f af3c 	beq.w	80049c8 <follow_path+0x40>
	*path = &p[si];						/* Return pointer to the next segment */
 8004b50:	44a8      	add	r8, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004b52:	2f00      	cmp	r7, #0
 8004b54:	f47f af54 	bne.w	8004a00 <follow_path+0x78>
	lfn[di] = 0;						/* LFN is created */
 8004b58:	f829 a017 	strh.w	sl, [r9, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f43f af49 	beq.w	80049f4 <follow_path+0x6c>
	mem_set(dp->fn, ' ', 11);
 8004b62:	2120      	movs	r1, #32
 8004b64:	220b      	movs	r2, #11
 8004b66:	f106 0024 	add.w	r0, r6, #36	@ 0x24
 8004b6a:	f7fe ffe5 	bl	8003b38 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	f43f af4c 	beq.w	8004a12 <follow_path+0x8a>
 8004b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b7c:	f43f af49 	beq.w	8004a12 <follow_path+0x8a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b80:	2c1f      	cmp	r4, #31
 8004b82:	bf8c      	ite	hi
 8004b84:	2400      	movhi	r4, #0
 8004b86:	2401      	movls	r4, #1
 8004b88:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 8004b8a:	b109      	cbz	r1, 8004b90 <follow_path+0x208>
 8004b8c:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004b90:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8004b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b96:	d001      	beq.n	8004b9c <follow_path+0x214>
 8004b98:	3f01      	subs	r7, #1
 8004b9a:	d1f9      	bne.n	8004b90 <follow_path+0x208>
		dp->fn[i++] = (BYTE)w;
 8004b9c:	f04f 0b00 	mov.w	fp, #0
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	465d      	mov	r5, fp
		w = lfn[si++];					/* Get an LFN character */
 8004ba4:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
 8004ba8:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f43f af3f 	beq.w	8004a2e <follow_path+0xa6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004bb0:	2820      	cmp	r0, #32
 8004bb2:	d005      	beq.n	8004bc0 <follow_path+0x238>
 8004bb4:	282e      	cmp	r0, #46	@ 0x2e
 8004bb6:	f47f af2e 	bne.w	8004a16 <follow_path+0x8e>
 8004bba:	42ba      	cmp	r2, r7
 8004bbc:	f43f af2b 	beq.w	8004a16 <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
 8004bc0:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	e7ed      	b.n	8004ba4 <follow_path+0x21c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004bc8:	2005      	movs	r0, #5
	return res;
 8004bca:	e760      	b.n	8004a8e <follow_path+0x106>
				if (IsUpper(w)) {		/* ASCII large capital */
 8004bcc:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8004bd0:	2919      	cmp	r1, #25
 8004bd2:	d98e      	bls.n	8004af2 <follow_path+0x16a>
					if (IsLower(w)) {	/* ASCII small capital */
 8004bd4:	f1a0 0161 	sub.w	r1, r0, #97	@ 0x61
 8004bd8:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8004bda:	bf9e      	ittt	ls
 8004bdc:	3820      	subls	r0, #32
 8004bde:	f045 0501 	orrls.w	r5, r5, #1
 8004be2:	b280      	uxthls	r0, r0
 8004be4:	e77e      	b.n	8004ae4 <follow_path+0x15c>
 8004be6:	bf00      	nop
 8004be8:	08007963 	.word	0x08007963
 8004bec:	0800745a 	.word	0x0800745a
 8004bf0:	0800796c 	.word	0x0800796c

08004bf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004bf4:	b530      	push	{r4, r5, lr}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004bfe:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8004c00:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004c02:	f7ff f872 	bl	8003cea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c06:	2800      	cmp	r0, #0
 8004c08:	db1b      	blt.n	8004c42 <f_mount+0x4e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004c0a:	490f      	ldr	r1, [pc, #60]	@ (8004c48 <f_mount+0x54>)
 8004c0c:	0085      	lsls	r5, r0, #2
 8004c0e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8004c12:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 8004c14:	b118      	cbz	r0, 8004c1e <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004c16:	f7ff f82f 	bl	8003c78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	b923      	cbnz	r3, 8004c2c <f_mount+0x38>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004c22:	4429      	add	r1, r5
 8004c24:	620b      	str	r3, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c26:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8004c28:	b005      	add	sp, #20
 8004c2a:	bd30      	pop	{r4, r5, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 8004c2c:	2200      	movs	r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8004c2e:	4429      	add	r1, r5
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c30:	2c01      	cmp	r4, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8004c32:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8004c34:	620b      	str	r3, [r1, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c36:	d1f6      	bne.n	8004c26 <f_mount+0x32>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004c38:	a901      	add	r1, sp, #4
 8004c3a:	4668      	mov	r0, sp
 8004c3c:	f7ff f91c 	bl	8003e78 <find_volume>
	LEAVE_FF(fs, res);
 8004c40:	e7f2      	b.n	8004c28 <f_mount+0x34>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c42:	200b      	movs	r0, #11
 8004c44:	e7f0      	b.n	8004c28 <f_mount+0x34>
 8004c46:	bf00      	nop
 8004c48:	20003858 	.word	0x20003858

08004c4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	b090      	sub	sp, #64	@ 0x40
 8004c52:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004c54:	4605      	mov	r5, r0
{
 8004c56:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 8100 	beq.w	8004e5e <f_open+0x212>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004c5e:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8004c62:	a902      	add	r1, sp, #8
 8004c64:	a801      	add	r0, sp, #4
 8004c66:	463a      	mov	r2, r7
 8004c68:	f7ff f906 	bl	8003e78 <find_volume>
	if (res == FR_OK) {
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d17f      	bne.n	8004d72 <f_open+0x126>
		dj.obj.fs = fs;
 8004c72:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
 8004c74:	f44f 7000 	mov.w	r0, #512	@ 0x200
		dj.obj.fs = fs;
 8004c78:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
 8004c7a:	f000 fb97 	bl	80053ac <ff_memalloc>
 8004c7e:	4680      	mov	r8, r0
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f000 80ee 	beq.w	8004e62 <f_open+0x216>
 8004c86:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c88:	a803      	add	r0, sp, #12
 8004c8a:	9901      	ldr	r1, [sp, #4]
 8004c8c:	f7ff fe7c 	bl	8004988 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004c90:	4604      	mov	r4, r0
 8004c92:	b960      	cbnz	r0, 8004cae <f_open+0x62>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004c94:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db70      	blt.n	8004d7e <f_open+0x132>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c9c:	f019 0f3e 	tst.w	r9, #62	@ 0x3e
 8004ca0:	a803      	add	r0, sp, #12
 8004ca2:	bf14      	ite	ne
 8004ca4:	2101      	movne	r1, #1
 8004ca6:	2100      	moveq	r1, #0
 8004ca8:	f7fe ff4c 	bl	8003b44 <chk_lock>
 8004cac:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004cae:	f019 0f1c 	tst.w	r9, #28
 8004cb2:	d070      	beq.n	8004d96 <f_open+0x14a>
			if (res != FR_OK) {					/* No file, create new */
 8004cb4:	2c00      	cmp	r4, #0
 8004cb6:	d064      	beq.n	8004d82 <f_open+0x136>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004cb8:	2c04      	cmp	r4, #4
 8004cba:	d156      	bne.n	8004d6a <f_open+0x11e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e68 <f_open+0x21c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	b11a      	cbz	r2, 8004cca <f_open+0x7e>
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 80c6 	bne.w	8004e56 <f_open+0x20a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004cca:	a803      	add	r0, sp, #12
 8004ccc:	f7ff fd18 	bl	8004700 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d149      	bne.n	8004d6a <f_open+0x11e>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004cd6:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004cda:	0738      	lsls	r0, r7, #28
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004cdc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004cde:	d536      	bpl.n	8004d4e <f_open+0x102>
				dw = GET_FATTIME();
 8004ce0:	f7fe ff1e 	bl	8003b20 <get_fattime>
 8004ce4:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	f104 000e 	add.w	r0, r4, #14
 8004cec:	f7fe ff1c 	bl	8003b28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	f104 0016 	add.w	r0, r4, #22
 8004cf6:	f7fe ff17 	bl	8003b28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004cfa:	2320      	movs	r3, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004cfc:	4621      	mov	r1, r4
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004cfe:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004d00:	7830      	ldrb	r0, [r6, #0]
 8004d02:	f7ff faab 	bl	800425c <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004d06:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004d08:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7ff f852 	bl	8003db4 <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 8004d10:	2200      	movs	r2, #0
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
 8004d12:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004d14:	7722      	strb	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d16:	7762      	strb	r2, [r4, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d18:	77a2      	strb	r2, [r4, #30]
	*ptr++ = (BYTE)val;
 8004d1a:	77e2      	strb	r2, [r4, #31]
					fs->wflag = 1;
 8004d1c:	70f3      	strb	r3, [r6, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004d1e:	f1b9 0f00 	cmp.w	r9, #0
 8004d22:	d010      	beq.n	8004d46 <f_open+0xfa>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8004d24:	4649      	mov	r1, r9
 8004d26:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8004d28:	f8d6 a030 	ldr.w	sl, [r6, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8004d2c:	f7ff faf4 	bl	8004318 <remove_chain>
						if (res == FR_OK) {
 8004d30:	4604      	mov	r4, r0
 8004d32:	b9d0      	cbnz	r0, 8004d6a <f_open+0x11e>
							res = move_window(fs, dw);
 8004d34:	4651      	mov	r1, sl
 8004d36:	4630      	mov	r0, r6
 8004d38:	f7ff f848 	bl	8003dcc <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004d3c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8004d40:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004d42:	6131      	str	r1, [r6, #16]
		if (res == FR_OK) {
 8004d44:	b988      	cbnz	r0, 8004d6a <f_open+0x11e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004d46:	0738      	lsls	r0, r7, #28
				mode |= FA_MODIFIED;
 8004d48:	bf48      	it	mi
 8004d4a:	f047 0740 	orrmi.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004d4e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
			fp->dir_ptr = dj.dir;
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004d50:	2f01      	cmp	r7, #1
			fp->dir_ptr = dj.dir;
 8004d52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004d54:	a803      	add	r0, sp, #12
 8004d56:	bf94      	ite	ls
 8004d58:	2100      	movls	r1, #0
 8004d5a:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004d5c:	626b      	str	r3, [r5, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004d5e:	62ac      	str	r4, [r5, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004d60:	f7fe ff2a 	bl	8003bb8 <inc_lock>
 8004d64:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004d66:	bb18      	cbnz	r0, 8004db0 <f_open+0x164>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
 8004d68:	2402      	movs	r4, #2
				}
			}
#endif
		}

		FREE_NAMBUF();
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f000 fb20 	bl	80053b0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004d70:	b10c      	cbz	r4, 8004d76 <f_open+0x12a>
 8004d72:	2300      	movs	r3, #0
 8004d74:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8004d76:	4620      	mov	r0, r4
 8004d78:	b010      	add	sp, #64	@ 0x40
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 8004d7e:	2406      	movs	r4, #6
 8004d80:	e795      	b.n	8004cae <f_open+0x62>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004d82:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004d86:	f013 0f11 	tst.w	r3, #17
 8004d8a:	d10f      	bne.n	8004dac <f_open+0x160>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004d8c:	f019 0f04 	tst.w	r9, #4
 8004d90:	d0a3      	beq.n	8004cda <f_open+0x8e>
 8004d92:	2408      	movs	r4, #8
 8004d94:	e7e9      	b.n	8004d6a <f_open+0x11e>
			if (res == FR_OK) {					/* Following succeeded */
 8004d96:	2c00      	cmp	r4, #0
 8004d98:	d1e7      	bne.n	8004d6a <f_open+0x11e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004d9a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004d9e:	06da      	lsls	r2, r3, #27
 8004da0:	d45b      	bmi.n	8004e5a <f_open+0x20e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004da2:	f019 0f02 	tst.w	r9, #2
 8004da6:	d0ce      	beq.n	8004d46 <f_open+0xfa>
 8004da8:	07dc      	lsls	r4, r3, #31
 8004daa:	d5cc      	bpl.n	8004d46 <f_open+0xfa>
					res = FR_DENIED;
 8004dac:	2407      	movs	r4, #7
 8004dae:	e7dc      	b.n	8004d6a <f_open+0x11e>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004db0:	7830      	ldrb	r0, [r6, #0]
 8004db2:	4621      	mov	r1, r4
 8004db4:	f7ff fa52 	bl	800425c <ld_clust.isra.0>
 8004db8:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004dba:	f104 001c 	add.w	r0, r4, #28
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004dbe:	f105 0930 	add.w	r9, r5, #48	@ 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004dc2:	f7fe feaf 	bl	8003b24 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004dc6:	2400      	movs	r4, #0
			fp->obj.id = fs->id;
 8004dc8:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004dce:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004dd4:	62ec      	str	r4, [r5, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004dd6:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8004dd8:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8004dda:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8004ddc:	756c      	strb	r4, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004dde:	622c      	str	r4, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004de0:	61ac      	str	r4, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004de2:	f7fe fea9 	bl	8003b38 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004de6:	06ba      	lsls	r2, r7, #26
 8004de8:	d401      	bmi.n	8004dee <f_open+0x1a2>
					res = FR_NO_FILE;
 8004dea:	2400      	movs	r4, #0
 8004dec:	e7bd      	b.n	8004d6a <f_open+0x11e>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004dee:	68ef      	ldr	r7, [r5, #12]
 8004df0:	2f00      	cmp	r7, #0
 8004df2:	d0fa      	beq.n	8004dea <f_open+0x19e>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004df4:	8973      	ldrh	r3, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004df6:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004df8:	ebb7 2f43 	cmp.w	r7, r3, lsl #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004dfc:	61af      	str	r7, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004dfe:	ea4f 2a43 	mov.w	sl, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004e02:	d90c      	bls.n	8004e1e <f_open+0x1d2>
					clst = get_fat(&fp->obj, clst);
 8004e04:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004e06:	eba7 070a 	sub.w	r7, r7, sl
					clst = get_fat(&fp->obj, clst);
 8004e0a:	f7ff fa2f 	bl	800426c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8004e0e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004e10:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004e12:	d91c      	bls.n	8004e4e <f_open+0x202>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d01c      	beq.n	8004e52 <f_open+0x206>
 8004e18:	4557      	cmp	r7, sl
 8004e1a:	d8f3      	bhi.n	8004e04 <f_open+0x1b8>
 8004e1c:	2400      	movs	r4, #0
				fp->clust = clst;
 8004e1e:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	d1a2      	bne.n	8004d6a <f_open+0x11e>
 8004e24:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0de      	beq.n	8004dea <f_open+0x19e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7fe ff31 	bl	8003c94 <clust2sect>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d098      	beq.n	8004d68 <f_open+0x11c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004e36:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004e3e:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004e40:	7870      	ldrb	r0, [r6, #1]
 8004e42:	f7fe fe43 	bl	8003acc <disk_read>
 8004e46:	1e04      	subs	r4, r0, #0
 8004e48:	bf18      	it	ne
 8004e4a:	2401      	movne	r4, #1
 8004e4c:	e78d      	b.n	8004d6a <f_open+0x11e>
					if (clst <= 1) res = FR_INT_ERR;
 8004e4e:	2402      	movs	r4, #2
 8004e50:	e7e5      	b.n	8004e1e <f_open+0x1d2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004e52:	2401      	movs	r4, #1
 8004e54:	e7e3      	b.n	8004e1e <f_open+0x1d2>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004e56:	2412      	movs	r4, #18
 8004e58:	e787      	b.n	8004d6a <f_open+0x11e>
					res = FR_NO_FILE;
 8004e5a:	2404      	movs	r4, #4
 8004e5c:	e785      	b.n	8004d6a <f_open+0x11e>
	if (!fp) return FR_INVALID_OBJECT;
 8004e5e:	2409      	movs	r4, #9
 8004e60:	e789      	b.n	8004d76 <f_open+0x12a>
		INIT_NAMBUF(fs);
 8004e62:	2411      	movs	r4, #17
 8004e64:	e787      	b.n	8004d76 <f_open+0x12a>
 8004e66:	bf00      	nop
 8004e68:	20003858 	.word	0x20003858

08004e6c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	469b      	mov	fp, r3
 8004e72:	b087      	sub	sp, #28
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8004e74:	2300      	movs	r3, #0
{
 8004e76:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004e78:	a905      	add	r1, sp, #20
{
 8004e7a:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 8004e7c:	f8cb 3000 	str.w	r3, [fp]
{
 8004e80:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004e82:	f7fe ff4f 	bl	8003d24 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e86:	4605      	mov	r5, r0
 8004e88:	bb28      	cbnz	r0, 8004ed6 <f_read+0x6a>
 8004e8a:	7d65      	ldrb	r5, [r4, #21]
 8004e8c:	bb1d      	cbnz	r5, 8004ed6 <f_read+0x6a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004e8e:	7d23      	ldrb	r3, [r4, #20]
 8004e90:	f013 0301 	ands.w	r3, r3, #1
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	f000 809d 	beq.w	8004fd4 <f_read+0x168>
	remain = fp->obj.objsize - fp->fptr;
 8004e9a:	69a3      	ldr	r3, [r4, #24]
 8004e9c:	68e6      	ldr	r6, [r4, #12]
 8004e9e:	1af6      	subs	r6, r6, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004ea0:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8004ea4:	42be      	cmp	r6, r7
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	bf28      	it	cs
 8004eaa:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
 8004eac:	b19e      	cbz	r6, 8004ed6 <f_read+0x6a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004eae:	69a1      	ldr	r1, [r4, #24]
 8004eb0:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d17e      	bne.n	8004fb6 <f_read+0x14a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004eb8:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004ebc:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 8004ec0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
			if (csect == 0) {					/* On the cluster boundary? */
 8004ec4:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 8004ec8:	d11b      	bne.n	8004f02 <f_read+0x96>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004eca:	b941      	cbnz	r1, 8004ede <f_read+0x72>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004ecc:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004ece:	2801      	cmp	r0, #1
 8004ed0:	d810      	bhi.n	8004ef4 <f_read+0x88>
 8004ed2:	2502      	movs	r5, #2
 8004ed4:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	b007      	add	sp, #28
 8004eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8004ede:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ee0:	b11b      	cbz	r3, 8004eea <f_read+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7fe fee1 	bl	8003caa <clmt_clust>
 8004ee8:	e7f1      	b.n	8004ece <f_read+0x62>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004eea:	69e1      	ldr	r1, [r4, #28]
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	f7ff f9bd 	bl	800426c <get_fat.isra.0>
 8004ef2:	e7ec      	b.n	8004ece <f_read+0x62>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d103      	bne.n	8004f00 <f_read+0x94>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	9d01      	ldr	r5, [sp, #4]
 8004efc:	7563      	strb	r3, [r4, #21]
 8004efe:	e7ea      	b.n	8004ed6 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 8004f00:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004f02:	69e1      	ldr	r1, [r4, #28]
 8004f04:	4650      	mov	r0, sl
 8004f06:	f7fe fec5 	bl	8003c94 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d0e1      	beq.n	8004ed2 <f_read+0x66>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f0e:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8004f12:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f16:	d32f      	bcc.n	8004f78 <f_read+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004f18:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8004f1c:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004f20:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f22:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004f26:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f28:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8004f2a:	bf88      	it	hi
 8004f2c:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f30:	463a      	mov	r2, r7
 8004f32:	9303      	str	r3, [sp, #12]
 8004f34:	f7fe fdca 	bl	8003acc <disk_read>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d1dd      	bne.n	8004ef8 <f_read+0x8c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004f3c:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	da0c      	bge.n	8004f60 <f_read+0xf4>
 8004f46:	6a20      	ldr	r0, [r4, #32]
 8004f48:	1bc0      	subs	r0, r0, r7
 8004f4a:	4298      	cmp	r0, r3
 8004f4c:	d208      	bcs.n	8004f60 <f_read+0xf4>
	if (cnt) {
 8004f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f52:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8004f56:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8004f5a:	f7fe ff22 	bl	8003da2 <mem_cpy.part.0>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004f60:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004f62:	69a3      	ldr	r3, [r4, #24]
 8004f64:	44b9      	add	r9, r7
 8004f66:	1bf6      	subs	r6, r6, r7
 8004f68:	443b      	add	r3, r7
 8004f6a:	61a3      	str	r3, [r4, #24]
 8004f6c:	f8db 3000 	ldr.w	r3, [fp]
 8004f70:	443b      	add	r3, r7
 8004f72:	f8cb 3000 	str.w	r3, [fp]
 8004f76:	e799      	b.n	8004eac <f_read+0x40>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004f78:	6a22      	ldr	r2, [r4, #32]
 8004f7a:	42ba      	cmp	r2, r7
 8004f7c:	d01a      	beq.n	8004fb4 <f_read+0x148>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004f7e:	f994 3014 	ldrsb.w	r3, [r4, #20]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004f82:	f104 0830 	add.w	r8, r4, #48	@ 0x30
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f86:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da09      	bge.n	8004fa2 <f_read+0x136>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4641      	mov	r1, r8
 8004f92:	f7fe fda9 	bl	8003ae8 <disk_write>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1ae      	bne.n	8004ef8 <f_read+0x8c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004f9a:	7d23      	ldrb	r3, [r4, #20]
 8004f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa0:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	463a      	mov	r2, r7
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8004fac:	f7fe fd8e 	bl	8003acc <disk_read>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d1a1      	bne.n	8004ef8 <f_read+0x8c>
			fp->sect = sect;
 8004fb4:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004fb6:	69a1      	ldr	r1, [r4, #24]
 8004fb8:	4648      	mov	r0, r9
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fc0:	f5c1 7700 	rsb	r7, r1, #512	@ 0x200
 8004fc4:	4419      	add	r1, r3
 8004fc6:	42b7      	cmp	r7, r6
 8004fc8:	bf28      	it	cs
 8004fca:	4637      	movcs	r7, r6
	if (cnt) {
 8004fcc:	463a      	mov	r2, r7
 8004fce:	f7fe fee8 	bl	8003da2 <mem_cpy.part.0>
}
 8004fd2:	e7c6      	b.n	8004f62 <f_read+0xf6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004fd4:	2507      	movs	r5, #7
 8004fd6:	e77e      	b.n	8004ed6 <f_read+0x6a>

08004fd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	469a      	mov	sl, r3
 8004fde:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004fe0:	2300      	movs	r3, #0
{
 8004fe2:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004fe4:	a903      	add	r1, sp, #12
{
 8004fe6:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8004fe8:	f8ca 3000 	str.w	r3, [sl]
{
 8004fec:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004fee:	f7fe fe99 	bl	8003d24 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	bb68      	cbnz	r0, 8005052 <f_write+0x7a>
 8004ff6:	7d65      	ldrb	r5, [r4, #21]
 8004ff8:	bb5d      	cbnz	r5, 8005052 <f_write+0x7a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004ffa:	7d23      	ldrb	r3, [r4, #20]
 8004ffc:	079a      	lsls	r2, r3, #30
 8004ffe:	f140 80b3 	bpl.w	8005168 <f_write+0x190>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005002:	69a3      	ldr	r3, [r4, #24]
 8005004:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005006:	bf28      	it	cs
 8005008:	43de      	mvncs	r6, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800500a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800500e:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8005010:	b1de      	cbz	r6, 800504a <f_write+0x72>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005012:	69a1      	ldr	r1, [r4, #24]
 8005014:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 8092 	bne.w	8005142 <f_write+0x16a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800501e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005022:	f8b9 700a 	ldrh.w	r7, [r9, #10]
 8005026:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8005028:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800502c:	d124      	bne.n	8005078 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800502e:	b931      	cbnz	r1, 800503e <f_write+0x66>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005030:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8005032:	b9a0      	cbnz	r0, 800505e <f_write+0x86>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005034:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005036:	4620      	mov	r0, r4
 8005038:	f7ff f9a5 	bl	8004386 <create_chain>
 800503c:	e004      	b.n	8005048 <f_write+0x70>
					if (fp->cltbl) {
 800503e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005040:	b15b      	cbz	r3, 800505a <f_write+0x82>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005042:	4620      	mov	r0, r4
 8005044:	f7fe fe31 	bl	8003caa <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005048:	b948      	cbnz	r0, 800505e <f_write+0x86>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800504a:	7d23      	ldrb	r3, [r4, #20]
 800504c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005050:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8005052:	4628      	mov	r0, r5
 8005054:	b005      	add	sp, #20
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800505a:	69e1      	ldr	r1, [r4, #28]
 800505c:	e7eb      	b.n	8005036 <f_write+0x5e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800505e:	2801      	cmp	r0, #1
 8005060:	d102      	bne.n	8005068 <f_write+0x90>
 8005062:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005064:	7565      	strb	r5, [r4, #21]
 8005066:	e7f4      	b.n	8005052 <f_write+0x7a>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d101      	bne.n	8005070 <f_write+0x98>
 800506c:	2501      	movs	r5, #1
 800506e:	e7f9      	b.n	8005064 <f_write+0x8c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005070:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8005072:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005074:	b903      	cbnz	r3, 8005078 <f_write+0xa0>
 8005076:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005078:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da0d      	bge.n	800509c <f_write+0xc4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005080:	2301      	movs	r3, #1
 8005082:	6a22      	ldr	r2, [r4, #32]
 8005084:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8005088:	f899 0001 	ldrb.w	r0, [r9, #1]
 800508c:	f7fe fd2c 	bl	8003ae8 <disk_write>
 8005090:	2800      	cmp	r0, #0
 8005092:	d1eb      	bne.n	800506c <f_write+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005094:	7d23      	ldrb	r3, [r4, #20]
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800509c:	69e1      	ldr	r1, [r4, #28]
 800509e:	4648      	mov	r0, r9
 80050a0:	f7fe fdf8 	bl	8003c94 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d0dc      	beq.n	8005062 <f_write+0x8a>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050a8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 80050ac:	eb07 0b00 	add.w	fp, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050b0:	d334      	bcc.n	800511c <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80050b2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80050b6:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80050ba:	0a73      	lsrs	r3, r6, #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050bc:	465a      	mov	r2, fp
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80050be:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050c0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 80050c4:	bf88      	it	hi
 80050c6:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050c8:	4641      	mov	r1, r8
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f7fe fd0c 	bl	8003ae8 <disk_write>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1cb      	bne.n	800506c <f_write+0x94>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80050d4:	6a21      	ldr	r1, [r4, #32]
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	eba1 010b 	sub.w	r1, r1, fp
 80050dc:	4299      	cmp	r1, r3
 80050de:	d20c      	bcs.n	80050fa <f_write+0x122>
	if (cnt) {
 80050e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e4:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80050e8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80050ec:	f7fe fe59 	bl	8003da2 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80050f0:	7d22      	ldrb	r2, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f8:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80050fa:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80050fc:	69a3      	ldr	r3, [r4, #24]
 80050fe:	44b8      	add	r8, r7
 8005100:	68e2      	ldr	r2, [r4, #12]
 8005102:	1bf6      	subs	r6, r6, r7
 8005104:	443b      	add	r3, r7
 8005106:	61a3      	str	r3, [r4, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	bf2c      	ite	cs
 800510c:	60e2      	strcs	r2, [r4, #12]
 800510e:	60e3      	strcc	r3, [r4, #12]
 8005110:	f8da 3000 	ldr.w	r3, [sl]
 8005114:	443b      	add	r3, r7
 8005116:	f8ca 3000 	str.w	r3, [sl]
 800511a:	e779      	b.n	8005010 <f_write+0x38>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800511c:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 800511e:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005120:	4559      	cmp	r1, fp
 8005122:	d00c      	beq.n	800513e <f_write+0x166>
 8005124:	68e1      	ldr	r1, [r4, #12]
 8005126:	4299      	cmp	r1, r3
 8005128:	d909      	bls.n	800513e <f_write+0x166>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800512a:	2301      	movs	r3, #1
 800512c:	465a      	mov	r2, fp
 800512e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8005132:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005136:	f7fe fcc9 	bl	8003acc <disk_read>
				fp->fptr < fp->obj.objsize &&
 800513a:	2800      	cmp	r0, #0
 800513c:	d196      	bne.n	800506c <f_write+0x94>
			fp->sect = sect;
 800513e:	f8c4 b020 	str.w	fp, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005142:	69a0      	ldr	r0, [r4, #24]
 8005144:	4641      	mov	r1, r8
 8005146:	9b00      	ldr	r3, [sp, #0]
 8005148:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800514c:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
 8005150:	4418      	add	r0, r3
 8005152:	42b7      	cmp	r7, r6
 8005154:	bf28      	it	cs
 8005156:	4637      	movcs	r7, r6
	if (cnt) {
 8005158:	463a      	mov	r2, r7
 800515a:	f7fe fe22 	bl	8003da2 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800515e:	7d23      	ldrb	r3, [r4, #20]
 8005160:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005164:	7523      	strb	r3, [r4, #20]
 8005166:	e7c9      	b.n	80050fc <f_write+0x124>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005168:	2507      	movs	r5, #7
 800516a:	e772      	b.n	8005052 <f_write+0x7a>

0800516c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800516c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005170:	a901      	add	r1, sp, #4
{
 8005172:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005174:	f7fe fdd6 	bl	8003d24 <validate>
	if (res == FR_OK) {
 8005178:	4604      	mov	r4, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	d13b      	bne.n	80051f6 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800517e:	7d2b      	ldrb	r3, [r5, #20]
 8005180:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8005184:	d037      	beq.n	80051f6 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005186:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005188:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800518a:	d50b      	bpl.n	80051a4 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800518c:	2301      	movs	r3, #1
 800518e:	6a2a      	ldr	r2, [r5, #32]
 8005190:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8005194:	7878      	ldrb	r0, [r7, #1]
 8005196:	f7fe fca7 	bl	8003ae8 <disk_write>
 800519a:	bb80      	cbnz	r0, 80051fe <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
 800519c:	7d2b      	ldrb	r3, [r5, #20]
 800519e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a2:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80051a4:	f7fe fcbc 	bl	8003b20 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80051a8:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 80051aa:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7fe fe0d 	bl	8003dcc <move_window>
				if (res == FR_OK) {
 80051b2:	4604      	mov	r4, r0
 80051b4:	b9f8      	cbnz	r0, 80051f6 <f_sync+0x8a>
					dir = fp->dir_ptr;
 80051b6:	6aae      	ldr	r6, [r5, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80051b8:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80051ba:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80051bc:	f043 0320 	orr.w	r3, r3, #32
 80051c0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80051c2:	68aa      	ldr	r2, [r5, #8]
 80051c4:	6828      	ldr	r0, [r5, #0]
 80051c6:	f7fe fdf5 	bl	8003db4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80051ca:	68e9      	ldr	r1, [r5, #12]
 80051cc:	f106 001c 	add.w	r0, r6, #28
 80051d0:	f7fe fcaa 	bl	8003b28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80051d4:	4641      	mov	r1, r8
 80051d6:	f106 0016 	add.w	r0, r6, #22
 80051da:	f7fe fca5 	bl	8003b28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80051de:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80051e0:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
 80051e2:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
 80051e4:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80051e6:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80051e8:	f7fe ffed 	bl	80041c6 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80051ec:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 80051ee:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80051f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f4:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80051f6:	4620      	mov	r0, r4
 80051f8:	b002      	add	sp, #8
 80051fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80051fe:	2401      	movs	r4, #1
 8005200:	e7f9      	b.n	80051f6 <f_sync+0x8a>

08005202 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005202:	b513      	push	{r0, r1, r4, lr}
 8005204:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005206:	f7ff ffb1 	bl	800516c <f_sync>
	if (res == FR_OK)
 800520a:	b948      	cbnz	r0, 8005220 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800520c:	a901      	add	r1, sp, #4
 800520e:	4620      	mov	r0, r4
 8005210:	f7fe fd88 	bl	8003d24 <validate>
		if (res == FR_OK) {
 8005214:	b920      	cbnz	r0, 8005220 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005216:	6920      	ldr	r0, [r4, #16]
 8005218:	f7fe fd10 	bl	8003c3c <dec_lock>
			if (res == FR_OK)
 800521c:	b900      	cbnz	r0, 8005220 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800521e:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8005220:	b002      	add	sp, #8
 8005222:	bd10      	pop	{r4, pc}

08005224 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8005224:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <FATFS_LinkDriverEx+0x40>)
{
 8005226:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8005228:	7b9c      	ldrb	r4, [r3, #14]
 800522a:	2c01      	cmp	r4, #1
 800522c:	d817      	bhi.n	800525e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800522e:	7b9d      	ldrb	r5, [r3, #14]
 8005230:	2400      	movs	r4, #0
 8005232:	b2ed      	uxtb	r5, r5
 8005234:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8005236:	7b9d      	ldrb	r5, [r3, #14]
 8005238:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800523c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800523e:	7b98      	ldrb	r0, [r3, #14]
 8005240:	4418      	add	r0, r3
 8005242:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8005244:	7b9a      	ldrb	r2, [r3, #14]
 8005246:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8005248:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800524a:	b2c0      	uxtb	r0, r0
 800524c:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 800524e:	233a      	movs	r3, #58	@ 0x3a
    path[2] = '/';
    path[3] = 0;
 8005250:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8005252:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8005254:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8005256:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 8005258:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800525a:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800525c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800525e:	2001      	movs	r0, #1
 8005260:	e7fc      	b.n	800525c <FATFS_LinkDriverEx+0x38>
 8005262:	bf00      	nop
 8005264:	20003884 	.word	0x20003884

08005268 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005268:	2200      	movs	r2, #0
 800526a:	f7ff bfdb 	b.w	8005224 <FATFS_LinkDriverEx>
	...

08005270 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8005270:	4a0a      	ldr	r2, [pc, #40]	@ (800529c <FATFS_UnLinkDriverEx+0x2c>)
 8005272:	7b93      	ldrb	r3, [r2, #14]
 8005274:	b17b      	cbz	r3, 8005296 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8005276:	7803      	ldrb	r3, [r0, #0]
 8005278:	3b30      	subs	r3, #48	@ 0x30
    if(disk.drv[DiskNum] != 0)
 800527a:	b2db      	uxtb	r3, r3
 800527c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005280:	6848      	ldr	r0, [r1, #4]
 8005282:	b140      	cbz	r0, 8005296 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
 8005284:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8005286:	4413      	add	r3, r2
 8005288:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 800528a:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 800528c:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800528e:	3b01      	subs	r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	7393      	strb	r3, [r2, #14]
      ret = 0;
 8005294:	4770      	bx	lr
  uint8_t ret = 1;
 8005296:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20003884 	.word	0x20003884

080052a0 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 80052a0:	2100      	movs	r1, #0
 80052a2:	f7ff bfe5 	b.w	8005270 <FATFS_UnLinkDriverEx>

080052a6 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 80052a6:	2000      	movs	r0, #0
 80052a8:	4770      	bx	lr
	...

080052ac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80052ac:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80052ae:	4804      	ldr	r0, [pc, #16]	@ (80052c0 <USBH_status+0x14>)
{
 80052b0:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80052b2:	f000 fae0 	bl	8005876 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80052b6:	fab0 f080 	clz	r0, r0
 80052ba:	0940      	lsrs	r0, r0, #5
 80052bc:	bd08      	pop	{r3, pc}
 80052be:	bf00      	nop
 80052c0:	20002a54 	.word	0x20002a54

080052c4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4614      	mov	r4, r2
 80052c8:	b08e      	sub	sp, #56	@ 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 80052ca:	2903      	cmp	r1, #3
 80052cc:	d825      	bhi.n	800531a <USBH_ioctl+0x56>
 80052ce:	e8df f001 	tbb	[pc, r1]
 80052d2:	020d      	.short	0x020d
 80052d4:	190f      	.short	0x190f
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80052d6:	4601      	mov	r1, r0
 80052d8:	aa01      	add	r2, sp, #4
 80052da:	4811      	ldr	r0, [pc, #68]	@ (8005320 <USBH_ioctl+0x5c>)
 80052dc:	f000 fade 	bl	800589c <USBH_MSC_GetLUNInfo>
 80052e0:	b110      	cbz	r0, 80052e8 <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_nbr;
      res = RES_OK;
    }
    else
    {
      res = RES_ERROR;
 80052e2:	2001      	movs	r0, #1
  default:
    res = RES_PARERR;
  }

  return res;
}
 80052e4:	b00e      	add	sp, #56	@ 0x38
 80052e6:	bd10      	pop	{r4, pc}
      *(DWORD*)buff = info.capacity.block_nbr;
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80052ec:	2000      	movs	r0, #0
 80052ee:	e7f9      	b.n	80052e4 <USBH_ioctl+0x20>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80052f0:	4601      	mov	r1, r0
 80052f2:	aa01      	add	r2, sp, #4
 80052f4:	480a      	ldr	r0, [pc, #40]	@ (8005320 <USBH_ioctl+0x5c>)
 80052f6:	f000 fad1 	bl	800589c <USBH_MSC_GetLUNInfo>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d1f1      	bne.n	80052e2 <USBH_ioctl+0x1e>
      *(DWORD*)buff = info.capacity.block_size;
 80052fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005302:	e7f2      	b.n	80052ea <USBH_ioctl+0x26>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005304:	4601      	mov	r1, r0
 8005306:	aa01      	add	r2, sp, #4
 8005308:	4805      	ldr	r0, [pc, #20]	@ (8005320 <USBH_ioctl+0x5c>)
 800530a:	f000 fac7 	bl	800589c <USBH_MSC_GetLUNInfo>
 800530e:	2800      	cmp	r0, #0
 8005310:	d1e7      	bne.n	80052e2 <USBH_ioctl+0x1e>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005312:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005316:	0a5b      	lsrs	r3, r3, #9
 8005318:	e7e7      	b.n	80052ea <USBH_ioctl+0x26>
    res = RES_PARERR;
 800531a:	2004      	movs	r0, #4
 800531c:	e7e2      	b.n	80052e4 <USBH_ioctl+0x20>
 800531e:	bf00      	nop
 8005320:	20002a54 	.word	0x20002a54

08005324 <USBH_read>:
{
 8005324:	b510      	push	{r4, lr}
 8005326:	b090      	sub	sp, #64	@ 0x40
 8005328:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	460b      	mov	r3, r1
 800532e:	4601      	mov	r1, r0
 8005330:	480b      	ldr	r0, [pc, #44]	@ (8005360 <USBH_read+0x3c>)
 8005332:	f000 facb 	bl	80058cc <USBH_MSC_Read>
 8005336:	b170      	cbz	r0, 8005356 <USBH_read+0x32>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005338:	aa03      	add	r2, sp, #12
 800533a:	4621      	mov	r1, r4
 800533c:	4808      	ldr	r0, [pc, #32]	@ (8005360 <USBH_read+0x3c>)
 800533e:	f000 faad 	bl	800589c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8005342:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005346:	2b28      	cmp	r3, #40	@ 0x28
 8005348:	d007      	beq.n	800535a <USBH_read+0x36>
 800534a:	2b3a      	cmp	r3, #58	@ 0x3a
 800534c:	d005      	beq.n	800535a <USBH_read+0x36>
 800534e:	2b04      	cmp	r3, #4
 8005350:	bf0c      	ite	eq
 8005352:	2003      	moveq	r0, #3
 8005354:	2001      	movne	r0, #1
}
 8005356:	b010      	add	sp, #64	@ 0x40
 8005358:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 800535a:	2003      	movs	r0, #3
 800535c:	e7fb      	b.n	8005356 <USBH_read+0x32>
 800535e:	bf00      	nop
 8005360:	20002a54 	.word	0x20002a54

08005364 <USBH_write>:
{
 8005364:	b510      	push	{r4, lr}
 8005366:	b090      	sub	sp, #64	@ 0x40
 8005368:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	460b      	mov	r3, r1
 800536e:	4601      	mov	r1, r0
 8005370:	480d      	ldr	r0, [pc, #52]	@ (80053a8 <USBH_write+0x44>)
 8005372:	f000 fae8 	bl	8005946 <USBH_MSC_Write>
 8005376:	b168      	cbz	r0, 8005394 <USBH_write+0x30>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005378:	aa03      	add	r2, sp, #12
 800537a:	4621      	mov	r1, r4
 800537c:	480a      	ldr	r0, [pc, #40]	@ (80053a8 <USBH_write+0x44>)
 800537e:	f000 fa8d 	bl	800589c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8005382:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005386:	2b27      	cmp	r3, #39	@ 0x27
 8005388:	d00a      	beq.n	80053a0 <USBH_write+0x3c>
 800538a:	d805      	bhi.n	8005398 <USBH_write+0x34>
      res = RES_ERROR;
 800538c:	2b04      	cmp	r3, #4
 800538e:	bf0c      	ite	eq
 8005390:	2003      	moveq	r0, #3
 8005392:	2001      	movne	r0, #1
}
 8005394:	b010      	add	sp, #64	@ 0x40
 8005396:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 8005398:	2b28      	cmp	r3, #40	@ 0x28
 800539a:	d003      	beq.n	80053a4 <USBH_write+0x40>
      res = RES_ERROR;
 800539c:	2b3a      	cmp	r3, #58	@ 0x3a
 800539e:	e7f6      	b.n	800538e <USBH_write+0x2a>
      res = RES_WRPRT;
 80053a0:	2002      	movs	r0, #2
 80053a2:	e7f7      	b.n	8005394 <USBH_write+0x30>
    switch (info.sense.asc)
 80053a4:	2003      	movs	r0, #3
 80053a6:	e7f5      	b.n	8005394 <USBH_write+0x30>
 80053a8:	20002a54 	.word	0x20002a54

080053ac <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80053ac:	f001 bb72 	b.w	8006a94 <malloc>

080053b0 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80053b0:	f001 bb78 	b.w	8006aa4 <free>

080053b4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80053b4:	287f      	cmp	r0, #127	@ 0x7f
 80053b6:	d915      	bls.n	80053e4 <ff_convert+0x30>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80053b8:	b131      	cbz	r1, 80053c8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80053ba:	28ff      	cmp	r0, #255	@ 0xff
 80053bc:	d811      	bhi.n	80053e2 <ff_convert+0x2e>
 80053be:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <ff_convert+0x34>)
 80053c0:	3880      	subs	r0, #128	@ 0x80
 80053c2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80053c6:	4770      	bx	lr
 80053c8:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 80053ca:	f833 2b02 	ldrh.w	r2, [r3], #2
 80053ce:	4282      	cmp	r2, r0
 80053d0:	d005      	beq.n	80053de <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 80053d2:	3101      	adds	r1, #1
 80053d4:	2980      	cmp	r1, #128	@ 0x80
 80053d6:	d1f8      	bne.n	80053ca <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 80053d8:	3180      	adds	r1, #128	@ 0x80
 80053da:	b2c8      	uxtb	r0, r1
 80053dc:	4770      	bx	lr
 80053de:	b289      	uxth	r1, r1
 80053e0:	e7fa      	b.n	80053d8 <ff_convert+0x24>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80053e2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	08007518 	.word	0x08007518

080053ec <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <ff_wtoupper+0x80>)
 80053ee:	f1a2 03bc 	sub.w	r3, r2, #188	@ 0xbc
 80053f2:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80053f6:	bf38      	it	cc
 80053f8:	4613      	movcc	r3, r2
{
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 80053fe:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8005402:	460a      	mov	r2, r1
 8005404:	b1ab      	cbz	r3, 8005432 <ff_wtoupper+0x46>
 8005406:	4298      	cmp	r0, r3
 8005408:	d313      	bcc.n	8005432 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800540a:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 800540e:	0a25      	lsrs	r5, r4, #8
 8005410:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8005412:	fa53 f484 	uxtab	r4, r3, r4
 8005416:	42a0      	cmp	r0, r4
 8005418:	da21      	bge.n	800545e <ff_wtoupper+0x72>
			switch (cmd) {
 800541a:	2d08      	cmp	r5, #8
 800541c:	d809      	bhi.n	8005432 <ff_wtoupper+0x46>
 800541e:	e8df f005 	tbb	[pc, r5]
 8005422:	0905      	.short	0x0905
 8005424:	1513110f 	.word	0x1513110f
 8005428:	1917      	.short	0x1917
 800542a:	1b          	.byte	0x1b
 800542b:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800542c:	1ac0      	subs	r0, r0, r3
 800542e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8005432:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005434:	1ac3      	subs	r3, r0, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	1ac0      	subs	r0, r0, r3
			case 7: chr -= 80; break;				/* Shift -80 */
 800543c:	b280      	uxth	r0, r0
 800543e:	e7f8      	b.n	8005432 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005440:	3810      	subs	r0, #16
 8005442:	e7fb      	b.n	800543c <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005444:	3820      	subs	r0, #32
 8005446:	e7f9      	b.n	800543c <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005448:	3830      	subs	r0, #48	@ 0x30
 800544a:	e7f7      	b.n	800543c <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800544c:	381a      	subs	r0, #26
 800544e:	e7f5      	b.n	800543c <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005450:	3008      	adds	r0, #8
 8005452:	e7f3      	b.n	800543c <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005454:	3850      	subs	r0, #80	@ 0x50
 8005456:	e7f1      	b.n	800543c <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005458:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800545c:	e7ee      	b.n	800543c <ff_wtoupper+0x50>
		if (!cmd) p += nc;
 800545e:	3104      	adds	r1, #4
 8005460:	2d00      	cmp	r5, #0
 8005462:	d1cc      	bne.n	80053fe <ff_wtoupper+0x12>
 8005464:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8005468:	e7c8      	b.n	80053fc <ff_wtoupper+0x10>
 800546a:	bf00      	nop
 800546c:	080076d4 	.word	0x080076d4

08005470 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8005470:	2000      	movs	r0, #0
 8005472:	4770      	bx	lr

08005474 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005474:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005478:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800547a:	69dc      	ldr	r4, [r3, #28]
{
 800547c:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 800547e:	7b23      	ldrb	r3, [r4, #12]
 8005480:	2b01      	cmp	r3, #1
 8005482:	f000 80da 	beq.w	800563a <USBH_MSC_Process+0x1c6>
 8005486:	2b0a      	cmp	r3, #10
 8005488:	f000 80b9 	beq.w	80055fe <USBH_MSC_Process+0x18a>
 800548c:	b9fb      	cbnz	r3, 80054ce <USBH_MSC_Process+0x5a>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800548e:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	@ 0xf8
 8005492:	7822      	ldrb	r2, [r4, #0]
 8005494:	428a      	cmp	r2, r1
 8005496:	f240 80ad 	bls.w	80055f4 <USBH_MSC_Process+0x180>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800549a:	2534      	movs	r5, #52	@ 0x34
 800549c:	2201      	movs	r2, #1
 800549e:	fb05 4301 	mla	r3, r5, r1, r4
 80054a2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80054a6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d80f      	bhi.n	80054ce <USBH_MSC_Process+0x5a>
 80054ae:	e8df f003 	tbb	[pc, r3]
 80054b2:	0e05      	.short	0x0e05
 80054b4:	6d105320 	.word	0x6d105320
 80054b8:	0e0e      	.short	0x0e0e
 80054ba:	9d          	.byte	0x9d
 80054bb:	00          	.byte	0x00
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80054bc:	2304      	movs	r3, #4
 80054be:	fb05 4101 	mla	r1, r5, r1, r4
 80054c2:	f881 3090 	strb.w	r3, [r1, #144]	@ 0x90
            MSC_Handle->timer = phost->Timer;
 80054c6:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	@ 0x4c4
 80054ca:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  USBH_StatusTypeDef error = USBH_BUSY;
 80054ce:	2001      	movs	r0, #1
}
 80054d0:	bd70      	pop	{r4, r5, r6, pc}
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80054d2:	fb05 4201 	mla	r2, r5, r1, r4
 80054d6:	b2c9      	uxtb	r1, r1
 80054d8:	329f      	adds	r2, #159	@ 0x9f
 80054da:	f000 fbc5 	bl	8005c68 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 80054de:	2800      	cmp	r0, #0
 80054e0:	d14c      	bne.n	800557c <USBH_MSC_Process+0x108>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80054e2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 80054e6:	2202      	movs	r2, #2
 80054e8:	fb05 4303 	mla	r3, r5, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80054ec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 80054f0:	e7ed      	b.n	80054ce <USBH_MSC_Process+0x5a>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80054f2:	b2c9      	uxtb	r1, r1
 80054f4:	f000 fb62 	bl	8005bbc <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80054f8:	b988      	cbnz	r0, 800551e <USBH_MSC_Process+0xaa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80054fa:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 80054fe:	2234      	movs	r2, #52	@ 0x34
 8005500:	fb02 4303 	mla	r3, r2, r3, r4
 8005504:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8005508:	3a00      	subs	r2, #0
 800550a:	bf18      	it	ne
 800550c:	2201      	movne	r2, #1
 800550e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005512:	2203      	movs	r2, #3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005514:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005518:	f883 0092 	strb.w	r0, [r3, #146]	@ 0x92
 800551c:	e7d7      	b.n	80054ce <USBH_MSC_Process+0x5a>
            else if (ready_status == USBH_FAIL)
 800551e:	2802      	cmp	r0, #2
 8005520:	d10e      	bne.n	8005540 <USBH_MSC_Process+0xcc>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005522:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 8005526:	2234      	movs	r2, #52	@ 0x34
 8005528:	fb02 4303 	mla	r3, r2, r3, r4
 800552c:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8005530:	3a02      	subs	r2, #2
 8005532:	bf18      	it	ne
 8005534:	2201      	movne	r2, #1
 8005536:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800553a:	f240 1205 	movw	r2, #261	@ 0x105
 800553e:	e7e9      	b.n	8005514 <USBH_MSC_Process+0xa0>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005540:	2804      	cmp	r0, #4
 8005542:	d1c4      	bne.n	80054ce <USBH_MSC_Process+0x5a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005544:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 8005548:	2234      	movs	r2, #52	@ 0x34
 800554a:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800554e:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8005552:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
 8005556:	e7ba      	b.n	80054ce <USBH_MSC_Process+0x5a>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8005558:	fb05 4201 	mla	r2, r5, r1, r4
 800555c:	b2c9      	uxtb	r1, r1
 800555e:	3294      	adds	r2, #148	@ 0x94
 8005560:	f000 fb4f 	bl	8005c02 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8005564:	b950      	cbnz	r0, 800557c <USBH_MSC_Process+0x108>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8005566:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800556a:	2201      	movs	r2, #1
 800556c:	fb05 4503 	mla	r5, r5, r3, r4
              MSC_Handle->current_lun++;
 8005570:	4413      	add	r3, r2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005572:	f8a5 2090 	strh.w	r2, [r5, #144]	@ 0x90
              MSC_Handle->current_lun++;
 8005576:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 800557a:	e7a8      	b.n	80054ce <USBH_MSC_Process+0x5a>
            else if (scsi_status == USBH_FAIL)
 800557c:	2802      	cmp	r0, #2
 800557e:	d131      	bne.n	80055e4 <USBH_MSC_Process+0x170>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005580:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 8005584:	2205      	movs	r2, #5
 8005586:	fb05 4303 	mla	r3, r5, r3, r4
 800558a:	e7af      	b.n	80054ec <USBH_MSC_Process+0x78>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800558c:	fb05 4201 	mla	r2, r5, r1, r4
 8005590:	b2c9      	uxtb	r1, r1
 8005592:	329c      	adds	r2, #156	@ 0x9c
 8005594:	f000 fbc6 	bl	8005d24 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8005598:	b9e8      	cbnz	r0, 80055d6 <USBH_MSC_Process+0x162>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800559a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 800559e:	fb05 4503 	mla	r5, r5, r3, r4
 80055a2:	f895 209c 	ldrb.w	r2, [r5, #156]	@ 0x9c
 80055a6:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 80055aa:	2a02      	cmp	r2, #2
 80055ac:	d10b      	bne.n	80055c6 <USBH_MSC_Process+0x152>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80055ae:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 80055b2:	f8d6 14c4 	ldr.w	r1, [r6, #1220]	@ 0x4c4
 80055b6:	1a09      	subs	r1, r1, r0
 80055b8:	f242 700f 	movw	r0, #9999	@ 0x270f
 80055bc:	4281      	cmp	r1, r0
 80055be:	d802      	bhi.n	80055c6 <USBH_MSC_Process+0x152>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80055c0:	f885 2090 	strb.w	r2, [r5, #144]	@ 0x90
                  break;
 80055c4:	e783      	b.n	80054ce <USBH_MSC_Process+0x5a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80055c6:	2234      	movs	r2, #52	@ 0x34
 80055c8:	2101      	movs	r1, #1
 80055ca:	fb02 4203 	mla	r2, r2, r3, r4
              MSC_Handle->current_lun++;
 80055ce:	440b      	add	r3, r1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80055d0:	f882 1090 	strb.w	r1, [r2, #144]	@ 0x90
              MSC_Handle->current_lun++;
 80055d4:	e7cf      	b.n	8005576 <USBH_MSC_Process+0x102>
            else if (scsi_status == USBH_FAIL)
 80055d6:	2802      	cmp	r0, #2
 80055d8:	d104      	bne.n	80055e4 <USBH_MSC_Process+0x170>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80055da:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	@ 0xf8
 80055de:	fb05 4303 	mla	r3, r5, r3, r4
 80055e2:	e7b4      	b.n	800554e <USBH_MSC_Process+0xda>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80055e4:	2804      	cmp	r0, #4
 80055e6:	f47f af72 	bne.w	80054ce <USBH_MSC_Process+0x5a>
 80055ea:	e7f6      	b.n	80055da <USBH_MSC_Process+0x166>
            MSC_Handle->current_lun++;
 80055ec:	3101      	adds	r1, #1
 80055ee:	f8a4 10f8 	strh.w	r1, [r4, #248]	@ 0xf8
            break;
 80055f2:	e76c      	b.n	80054ce <USBH_MSC_Process+0x5a>
        MSC_Handle->current_lun = 0U;
 80055f4:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80055f8:	230a      	movs	r3, #10
        MSC_Handle->state = MSC_IDLE;
 80055fa:	7323      	strb	r3, [r4, #12]
 80055fc:	e767      	b.n	80054ce <USBH_MSC_Process+0x5a>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80055fe:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8005602:	7822      	ldrb	r2, [r4, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d913      	bls.n	8005630 <USBH_MSC_Process+0x1bc>
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8005608:	2134      	movs	r1, #52	@ 0x34
        MSC_Handle->current_lun = MSC_Handle->lun;
 800560a:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800560e:	f8d0 24d4 	ldr.w	r2, [r0, #1236]	@ 0x4d4
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8005612:	fb01 4303 	mla	r3, r1, r3, r4
 8005616:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800561a:	b93b      	cbnz	r3, 800562c <USBH_MSC_Process+0x1b8>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800561c:	2102      	movs	r1, #2
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800561e:	4790      	blx	r2
        MSC_Handle->lun++;
 8005620:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8005624:	3301      	adds	r3, #1
 8005626:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 800562a:	e750      	b.n	80054ce <USBH_MSC_Process+0x5a>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800562c:	2106      	movs	r1, #6
 800562e:	e7f6      	b.n	800561e <USBH_MSC_Process+0x1aa>
        MSC_Handle->lun = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8005636:	2301      	movs	r3, #1
 8005638:	e7df      	b.n	80055fa <USBH_MSC_Process+0x186>
  switch (MSC_Handle->state)
 800563a:	2000      	movs	r0, #0
 800563c:	e748      	b.n	80054d0 <USBH_MSC_Process+0x5c>

0800563e <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800563e:	f8d0 247c 	ldr.w	r2, [r0, #1148]	@ 0x47c
{
 8005642:	4603      	mov	r3, r0
 8005644:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005646:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8005648:	7ba2      	ldrb	r2, [r4, #14]
 800564a:	2a02      	cmp	r2, #2
 800564c:	d004      	beq.n	8005658 <USBH_MSC_ClassRequest+0x1a>
 800564e:	2a03      	cmp	r2, #3
 8005650:	d022      	beq.n	8005698 <USBH_MSC_ClassRequest+0x5a>
 8005652:	b10a      	cbz	r2, 8005658 <USBH_MSC_ClassRequest+0x1a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005654:	2001      	movs	r0, #1
}
 8005656:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005658:	4621      	mov	r1, r4
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f9b8 	bl	80059d0 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8005660:	2803      	cmp	r0, #3
 8005662:	d116      	bne.n	8005692 <USBH_MSC_ClassRequest+0x54>
        MSC_Handle->max_lun = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005668:	7823      	ldrb	r3, [r4, #0]
 800566a:	2202      	movs	r2, #2
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800566c:	2100      	movs	r1, #0
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800566e:	2000      	movs	r0, #0
 8005670:	2b02      	cmp	r3, #2
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8005672:	f884 2092 	strb.w	r2, [r4, #146]	@ 0x92
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8005676:	f884 10c1 	strb.w	r1, [r4, #193]	@ 0xc1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800567a:	bf96      	itet	ls
 800567c:	3301      	addls	r3, #1
 800567e:	4613      	movhi	r3, r2
 8005680:	b2db      	uxtbls	r3, r3
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8005682:	2b01      	cmp	r3, #1
 8005684:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8005686:	bf1c      	itt	ne
 8005688:	f884 20c6 	strbne.w	r2, [r4, #198]	@ 0xc6
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800568c:	f884 10f5 	strbne.w	r1, [r4, #245]	@ 0xf5
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8005690:	e7e1      	b.n	8005656 <USBH_MSC_ClassRequest+0x18>
      if (status == USBH_OK)
 8005692:	2800      	cmp	r0, #0
 8005694:	d1df      	bne.n	8005656 <USBH_MSC_ClassRequest+0x18>
 8005696:	e7e7      	b.n	8005668 <USBH_MSC_ClassRequest+0x2a>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005698:	2100      	movs	r1, #0
 800569a:	f001 f959 	bl	8006950 <USBH_ClrFeature>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d1d8      	bne.n	8005654 <USBH_MSC_ClassRequest+0x16>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80056a2:	7be3      	ldrb	r3, [r4, #15]
 80056a4:	73a3      	strb	r3, [r4, #14]
 80056a6:	e7d5      	b.n	8005654 <USBH_MSC_ClassRequest+0x16>

080056a8 <USBH_MSC_InterfaceDeInit>:
{
 80056a8:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80056aa:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 80056ae:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80056b0:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 80056b2:	7969      	ldrb	r1, [r5, #5]
 80056b4:	b139      	cbz	r1, 80056c6 <USBH_MSC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80056b6:	f001 f9c5 	bl	8006a44 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80056ba:	7969      	ldrb	r1, [r5, #5]
 80056bc:	4620      	mov	r0, r4
 80056be:	f001 f9dd 	bl	8006a7c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80056c2:	2300      	movs	r3, #0
 80056c4:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 80056c6:	7929      	ldrb	r1, [r5, #4]
 80056c8:	b141      	cbz	r1, 80056dc <USBH_MSC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80056ca:	4620      	mov	r0, r4
 80056cc:	f001 f9ba 	bl	8006a44 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80056d0:	7929      	ldrb	r1, [r5, #4]
 80056d2:	4620      	mov	r0, r4
 80056d4:	f001 f9d2 	bl	8006a7c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80056d8:	2300      	movs	r3, #0
 80056da:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 80056dc:	f8d4 347c 	ldr.w	r3, [r4, #1148]	@ 0x47c
 80056e0:	69d8      	ldr	r0, [r3, #28]
 80056e2:	b128      	cbz	r0, 80056f0 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 80056e4:	f001 f9de 	bl	8006aa4 <free>
    phost->pActiveClass->pData = 0U;
 80056e8:	f8d4 347c 	ldr.w	r3, [r4, #1148]	@ 0x47c
 80056ec:	2200      	movs	r2, #0
 80056ee:	61da      	str	r2, [r3, #28]
}
 80056f0:	2000      	movs	r0, #0
 80056f2:	bd38      	pop	{r3, r4, r5, pc}

080056f4 <USBH_MSC_InterfaceInit>:
{
 80056f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80056f8:	f8d0 147c 	ldr.w	r1, [r0, #1148]	@ 0x47c
 80056fc:	2350      	movs	r3, #80	@ 0x50
 80056fe:	2206      	movs	r2, #6
{
 8005700:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005702:	7909      	ldrb	r1, [r1, #4]
 8005704:	f000 fc42 	bl	8005f8c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005708:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800570a:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800570c:	d904      	bls.n	8005718 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 800570e:	2702      	movs	r7, #2
}
 8005710:	4638      	mov	r0, r7
 8005712:	b004      	add	sp, #16
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 8005718:	4601      	mov	r1, r0
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fc2d 	bl	8005f7a <USBH_SelectInterface>
  if (status != USBH_OK)
 8005720:	4607      	mov	r7, r0
 8005722:	2800      	cmp	r0, #0
 8005724:	d1f3      	bne.n	800570e <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005726:	f8d5 847c 	ldr.w	r8, [r5, #1148]	@ 0x47c
 800572a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800572e:	f001 f9b1 	bl	8006a94 <malloc>
 8005732:	4604      	mov	r4, r0
 8005734:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8005738:	2800      	cmp	r0, #0
 800573a:	d0e8      	beq.n	800570e <USBH_MSC_InterfaceInit+0x1a>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800573c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005740:	4639      	mov	r1, r7
 8005742:	f001 fa85 	bl	8006c50 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005746:	221a      	movs	r2, #26
 8005748:	fb02 5306 	mla	r3, r2, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800574c:	fb02 5606 	mla	r6, r2, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005750:	f993 044e 	ldrsb.w	r0, [r3, #1102]	@ 0x44e
 8005754:	f893 144e 	ldrb.w	r1, [r3, #1102]	@ 0x44e
 8005758:	2800      	cmp	r0, #0
 800575a:	f8b3 3450 	ldrh.w	r3, [r3, #1104]	@ 0x450
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800575e:	f896 2456 	ldrb.w	r2, [r6, #1110]	@ 0x456
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005762:	4628      	mov	r0, r5
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005764:	bfac      	ite	ge
 8005766:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005768:	71e1      	strblt	r1, [r4, #7]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800576a:	f996 1456 	ldrsb.w	r1, [r6, #1110]	@ 0x456
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800576e:	bfb4      	ite	lt
 8005770:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005772:	8123      	strhge	r3, [r4, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005774:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005776:	f8b6 3458 	ldrh.w	r3, [r6, #1112]	@ 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800577a:	bfad      	iteet	ge
 800577c:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800577e:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005780:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005782:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005784:	79a1      	ldrb	r1, [r4, #6]
 8005786:	f001 f962 	bl	8006a4e <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800578a:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800578c:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800578e:	4628      	mov	r0, r5
 8005790:	f001 f95d 	bl	8006a4e <USBH_AllocPipe>
 8005794:	7120      	strb	r0, [r4, #4]
  (void)USBH_MSC_BOT_Init(phost);
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f924 	bl	80059e4 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800579c:	79a2      	ldrb	r2, [r4, #6]
 800579e:	b90a      	cbnz	r2, 80057a4 <USBH_MSC_InterfaceInit+0xb0>
    return USBH_NOT_SUPPORTED;
 80057a0:	2703      	movs	r7, #3
 80057a2:	e7b5      	b.n	8005710 <USBH_MSC_InterfaceInit+0x1c>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80057a4:	8923      	ldrh	r3, [r4, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0fa      	beq.n	80057a0 <USBH_MSC_InterfaceInit+0xac>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80057aa:	2602      	movs	r6, #2
 80057ac:	9302      	str	r3, [sp, #8]
 80057ae:	4628      	mov	r0, r5
 80057b0:	9601      	str	r6, [sp, #4]
 80057b2:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 80057bc:	7961      	ldrb	r1, [r4, #5]
 80057be:	f001 f932 	bl	8006a26 <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80057c2:	79e2      	ldrb	r2, [r4, #7]
 80057c4:	2a00      	cmp	r2, #0
 80057c6:	d0eb      	beq.n	80057a0 <USBH_MSC_InterfaceInit+0xac>
 80057c8:	8963      	ldrh	r3, [r4, #10]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0e8      	beq.n	80057a0 <USBH_MSC_InterfaceInit+0xac>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80057ce:	4628      	mov	r0, r5
 80057d0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80057d4:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 80057de:	7921      	ldrb	r1, [r4, #4]
 80057e0:	f001 f921 	bl	8006a26 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80057e4:	7921      	ldrb	r1, [r4, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7fb fae9 	bl	8000dc0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80057ee:	2200      	movs	r2, #0
 80057f0:	7961      	ldrb	r1, [r4, #5]
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7fb fae4 	bl	8000dc0 <USBH_LL_SetToggle>
  return USBH_OK;
 80057f8:	e78a      	b.n	8005710 <USBH_MSC_InterfaceInit+0x1c>

080057fa <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057fa:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
  USBH_StatusTypeDef error = USBH_BUSY;
  USBH_StatusTypeDef scsi_status = USBH_BUSY;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80057fe:	2234      	movs	r2, #52	@ 0x34
{
 8005800:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005802:	69dd      	ldr	r5, [r3, #28]
{
 8005804:	460e      	mov	r6, r1
  switch (MSC_Handle->unit[lun].state)
 8005806:	fb02 5401 	mla	r4, r2, r1, r5
 800580a:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 800580e:	2b06      	cmp	r3, #6
 8005810:	d00e      	beq.n	8005830 <USBH_MSC_RdWrProcess+0x36>
 8005812:	2b07      	cmp	r3, #7
 8005814:	d01b      	beq.n	800584e <USBH_MSC_RdWrProcess+0x54>
 8005816:	2b05      	cmp	r3, #5
 8005818:	d124      	bne.n	8005864 <USBH_MSC_RdWrProcess+0x6a>
#endif
#endif
      break;

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800581a:	fb02 5201 	mla	r2, r2, r1, r5
 800581e:	329c      	adds	r2, #156	@ 0x9c
 8005820:	f000 fa80 	bl	8005d24 <USBH_MSC_SCSI_RequestSense>

      if (scsi_status == USBH_OK)
 8005824:	bb00      	cbnz	r0, 8005868 <USBH_MSC_RdWrProcess+0x6e>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005826:	f240 2301 	movw	r3, #513	@ 0x201
 800582a:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;

        error = USBH_FAIL;
 800582e:	e020      	b.n	8005872 <USBH_MSC_RdWrProcess+0x78>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005830:	2300      	movs	r3, #0
 8005832:	461a      	mov	r2, r3
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	f000 fafc 	bl	8005e32 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 800583a:	b970      	cbnz	r0, 800585a <USBH_MSC_RdWrProcess+0x60>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800583c:	2334      	movs	r3, #52	@ 0x34
 800583e:	2201      	movs	r2, #1
        error = USBH_OK;
 8005840:	2000      	movs	r0, #0
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005842:	fb03 5306 	mla	r3, r3, r6, r5
 8005846:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    default:
      break;

  }
  return error;
}
 800584a:	b002      	add	sp, #8
 800584c:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800584e:	2300      	movs	r3, #0
 8005850:	461a      	mov	r2, r3
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	f000 faa8 	bl	8005da8 <USBH_MSC_SCSI_Write>
 8005858:	e7ef      	b.n	800583a <USBH_MSC_RdWrProcess+0x40>
      else if (scsi_status == USBH_FAIL)
 800585a:	2802      	cmp	r0, #2
 800585c:	d104      	bne.n	8005868 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800585e:	2305      	movs	r3, #5
 8005860:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8005864:	2001      	movs	r0, #1
 8005866:	e7f0      	b.n	800584a <USBH_MSC_RdWrProcess+0x50>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005868:	2804      	cmp	r0, #4
 800586a:	d1fb      	bne.n	8005864 <USBH_MSC_RdWrProcess+0x6a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800586c:	2308      	movs	r3, #8
 800586e:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
          error = USBH_FAIL;
 8005872:	2002      	movs	r0, #2
 8005874:	e7e9      	b.n	800584a <USBH_MSC_RdWrProcess+0x50>

08005876 <USBH_MSC_UnitIsReady>:
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005876:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
 800587a:	69db      	ldr	r3, [r3, #28]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800587c:	f8a3 10f8 	strh.w	r1, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005880:	7802      	ldrb	r2, [r0, #0]
 8005882:	2a0b      	cmp	r2, #11
 8005884:	bf01      	itttt	eq
 8005886:	2234      	moveq	r2, #52	@ 0x34
 8005888:	fb02 3301 	mlaeq	r3, r2, r1, r3
 800588c:	f893 0091 	ldrbeq.w	r0, [r3, #145]	@ 0x91
 8005890:	fab0 f080 	clzeq	r0, r0
 8005894:	bf0c      	ite	eq
 8005896:	0940      	lsreq	r0, r0, #5
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8005898:	2000      	movne	r0, #0
  }

  return res;
}
 800589a:	4770      	bx	lr

0800589c <USBH_MSC_GetLUNInfo>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800589c:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
 80058a0:	69db      	ldr	r3, [r3, #28]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80058a2:	f8a3 10f8 	strh.w	r1, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 80058a6:	7800      	ldrb	r0, [r0, #0]
 80058a8:	280b      	cmp	r0, #11
 80058aa:	d10d      	bne.n	80058c8 <USBH_MSC_GetLUNInfo+0x2c>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80058ac:	2034      	movs	r0, #52	@ 0x34
 80058ae:	fb00 3101 	mla	r1, r0, r1, r3
 80058b2:	f101 0390 	add.w	r3, r1, #144	@ 0x90
 80058b6:	31c4      	adds	r1, #196	@ 0xc4
 80058b8:	f853 0b04 	ldr.w	r0, [r3], #4
 80058bc:	428b      	cmp	r3, r1
 80058be:	f842 0b04 	str.w	r0, [r2], #4
 80058c2:	d1f9      	bne.n	80058b8 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 80058c4:	2000      	movs	r0, #0
 80058c6:	4770      	bx	lr
  }
  else
  {
    return USBH_FAIL;
 80058c8:	2002      	movs	r0, #2
  }
}
 80058ca:	4770      	bx	lr

080058cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80058cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058ce:	f8d0 647c 	ldr.w	r6, [r0, #1148]	@ 0x47c
{
 80058d2:	4604      	mov	r4, r0
 80058d4:	460d      	mov	r5, r1
 80058d6:	9f08      	ldr	r7, [sp, #32]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058d8:	69f6      	ldr	r6, [r6, #28]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80058da:	f8a6 10f8 	strh.w	r1, [r6, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80058de:	f890 c420 	ldrb.w	ip, [r0, #1056]	@ 0x420
 80058e2:	f1bc 0f00 	cmp.w	ip, #0
 80058e6:	d102      	bne.n	80058ee <USBH_MSC_Read+0x22>
      (phost->gState != HOST_CLASS) ||
      (MSC_Handle->unit[lun].state != MSC_IDLE))
  {
    return  USBH_FAIL;
 80058e8:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }

  return USBH_OK;
}
 80058ea:	b003      	add	sp, #12
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (phost->gState != HOST_CLASS) ||
 80058ee:	f890 c000 	ldrb.w	ip, [r0]
  if ((phost->device.is_connected == 0U) ||
 80058f2:	f1bc 0f0b 	cmp.w	ip, #11
 80058f6:	d1f7      	bne.n	80058e8 <USBH_MSC_Read+0x1c>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80058f8:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 80058fc:	fb0c 6601 	mla	r6, ip, r1, r6
      (phost->gState != HOST_CLASS) ||
 8005900:	f896 c090 	ldrb.w	ip, [r6, #144]	@ 0x90
 8005904:	f1bc 0f01 	cmp.w	ip, #1
 8005908:	d1ee      	bne.n	80058e8 <USBH_MSC_Read+0x1c>
  MSC_Handle->unit[lun].state = MSC_READ;
 800590a:	f04f 0c06 	mov.w	ip, #6
 800590e:	f886 c090 	strb.w	ip, [r6, #144]	@ 0x90
  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8005912:	9700      	str	r7, [sp, #0]
 8005914:	f000 fa8d 	bl	8005e32 <USBH_MSC_SCSI_Read>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005918:	f242 7310 	movw	r3, #10000	@ 0x2710
  timeout = phost->Timer;
 800591c:	f8d4 64c4 	ldr.w	r6, [r4, #1220]	@ 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005920:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005922:	4629      	mov	r1, r5
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff ff68 	bl	80057fa <USBH_MSC_RdWrProcess>
 800592a:	2801      	cmp	r0, #1
 800592c:	d001      	beq.n	8005932 <USBH_MSC_Read+0x66>
  return USBH_OK;
 800592e:	2000      	movs	r0, #0
 8005930:	e7db      	b.n	80058ea <USBH_MSC_Read+0x1e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005932:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	@ 0x4c4
 8005936:	1b9b      	subs	r3, r3, r6
 8005938:	42bb      	cmp	r3, r7
 800593a:	d8d5      	bhi.n	80058e8 <USBH_MSC_Read+0x1c>
 800593c:	f894 3420 	ldrb.w	r3, [r4, #1056]	@ 0x420
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ee      	bne.n	8005922 <USBH_MSC_Read+0x56>
 8005944:	e7d0      	b.n	80058e8 <USBH_MSC_Read+0x1c>

08005946 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8005946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005948:	f8d0 647c 	ldr.w	r6, [r0, #1148]	@ 0x47c
{
 800594c:	4604      	mov	r4, r0
 800594e:	460d      	mov	r5, r1
 8005950:	9f08      	ldr	r7, [sp, #32]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005952:	69f6      	ldr	r6, [r6, #28]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8005954:	f8a6 10f8 	strh.w	r1, [r6, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8005958:	f890 c420 	ldrb.w	ip, [r0, #1056]	@ 0x420
 800595c:	f1bc 0f00 	cmp.w	ip, #0
 8005960:	d102      	bne.n	8005968 <USBH_MSC_Write+0x22>
      (phost->gState != HOST_CLASS) ||
      (MSC_Handle->unit[lun].state != MSC_IDLE))
  {
    return  USBH_FAIL;
 8005962:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }

  return USBH_OK;
}
 8005964:	b003      	add	sp, #12
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (phost->gState != HOST_CLASS) ||
 8005968:	f890 c000 	ldrb.w	ip, [r0]
  if ((phost->device.is_connected == 0U) ||
 800596c:	f1bc 0f0b 	cmp.w	ip, #11
 8005970:	d1f7      	bne.n	8005962 <USBH_MSC_Write+0x1c>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005972:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8005976:	fb0c 6601 	mla	r6, ip, r1, r6
      (phost->gState != HOST_CLASS) ||
 800597a:	f896 c090 	ldrb.w	ip, [r6, #144]	@ 0x90
 800597e:	f1bc 0f01 	cmp.w	ip, #1
 8005982:	d1ee      	bne.n	8005962 <USBH_MSC_Write+0x1c>
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8005984:	f04f 0c07 	mov.w	ip, #7
 8005988:	f886 c090 	strb.w	ip, [r6, #144]	@ 0x90
  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800598c:	9700      	str	r7, [sp, #0]
 800598e:	f000 fa0b 	bl	8005da8 <USBH_MSC_SCSI_Write>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005992:	f242 7310 	movw	r3, #10000	@ 0x2710
  timeout = phost->Timer;
 8005996:	f8d4 64c4 	ldr.w	r6, [r4, #1220]	@ 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800599a:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff ff2b 	bl	80057fa <USBH_MSC_RdWrProcess>
 80059a4:	2801      	cmp	r0, #1
 80059a6:	d001      	beq.n	80059ac <USBH_MSC_Write+0x66>
  return USBH_OK;
 80059a8:	2000      	movs	r0, #0
 80059aa:	e7db      	b.n	8005964 <USBH_MSC_Write+0x1e>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80059ac:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	@ 0x4c4
 80059b0:	1b9b      	subs	r3, r3, r6
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	d8d5      	bhi.n	8005962 <USBH_MSC_Write+0x1c>
 80059b6:	f894 3420 	ldrb.w	r3, [r4, #1056]	@ 0x420
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ee      	bne.n	800599c <USBH_MSC_Write+0x56>
 80059be:	e7d0      	b.n	8005962 <USBH_MSC_Write+0x1c>

080059c0 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 80059c0:	f64f 7121 	movw	r1, #65313	@ 0xff21
 80059c4:	2200      	movs	r2, #0
 80059c6:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 80059ca:	4611      	mov	r1, r2
 80059cc:	f000 bd21 	b.w	8006412 <USBH_CtlReq>

080059d0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 80059d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80059d4:	f64f 6ca1 	movw	ip, #65185	@ 0xfea1
 80059d8:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 80059dc:	2201      	movs	r2, #1
 80059de:	f000 bd18 	b.w	8006412 <USBH_CtlReq>
	...

080059e4 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059e4:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 80059e8:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80059ea:	4905      	ldr	r1, [pc, #20]	@ (8005a00 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059ec:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80059ee:	4a05      	ldr	r2, [pc, #20]	@ (8005a04 <USBH_MSC_BOT_Init+0x20>)
 80059f0:	e9c3 1215 	strd	r1, r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80059fa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
}
 80059fe:	4770      	bx	lr
 8005a00:	43425355 	.word	0x43425355
 8005a04:	20304050 	.word	0x20304050

08005a08 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a08:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a0e:	69dc      	ldr	r4, [r3, #28]
{
 8005a10:	4605      	mov	r5, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8005a12:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005a16:	3b01      	subs	r3, #1
 8005a18:	2b0a      	cmp	r3, #10
 8005a1a:	d825      	bhi.n	8005a68 <USBH_MSC_BOT_Process+0x60>
 8005a1c:	e8df f003 	tbb	[pc, r3]
 8005a20:	332b1506 	.word	0x332b1506
 8005a24:	79715248 	.word	0x79715248
 8005a28:	a89e      	.short	0xa89e
 8005a2a:	c0          	.byte	0xc0
 8005a2b:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005a2c:	2302      	movs	r3, #2
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005a2e:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005a30:	f884 1061 	strb.w	r1, [r4, #97]	@ 0x61
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005a34:	f104 0154 	add.w	r1, r4, #84	@ 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005a38:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005a3c:	7963      	ldrb	r3, [r4, #5]
 8005a3e:	9200      	str	r2, [sp, #0]
 8005a40:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 ffc8 	bl	80069d8 <USBH_BulkSendData>
 8005a48:	e00e      	b.n	8005a68 <USBH_MSC_BOT_Process+0x60>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005a4a:	7961      	ldrb	r1, [r4, #5]
 8005a4c:	f7fb f9a3 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005a50:	2801      	cmp	r0, #1
 8005a52:	d10c      	bne.n	8005a6e <USBH_MSC_BOT_Process+0x66>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005a54:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d049      	beq.n	8005aee <USBH_MSC_BOT_Process+0xe6>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8005a5a:	f994 3060 	ldrsb.w	r3, [r4, #96]	@ 0x60
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da49      	bge.n	8005af6 <USBH_MSC_BOT_Process+0xee>
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005a62:	2303      	movs	r3, #3
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a64:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005a68:	2001      	movs	r0, #1

    default:
      break;
  }
  return status;
}
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
      else if (URB_Status == USBH_URB_NOTREADY)
 8005a6e:	2802      	cmp	r0, #2
 8005a70:	d143      	bne.n	8005afa <USBH_MSC_BOT_Process+0xf2>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7f6      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005a76:	7923      	ldrb	r3, [r4, #4]
 8005a78:	8962      	ldrh	r2, [r4, #10]
 8005a7a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8005a7e:	f000 ffc2 	bl	8006a06 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005a82:	2304      	movs	r3, #4
 8005a84:	e7ee      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005a86:	7921      	ldrb	r1, [r4, #4]
 8005a88:	f7fb f985 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005a8c:	2801      	cmp	r0, #1
 8005a8e:	d161      	bne.n	8005b54 <USBH_MSC_BOT_Process+0x14c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005a90:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a92:	8962      	ldrh	r2, [r4, #10]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d928      	bls.n	8005aea <USBH_MSC_BOT_Process+0xe2>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005a98:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005a9c:	1a9b      	subs	r3, r3, r2
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005a9e:	4628      	mov	r0, r5
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005aa0:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005aa2:	65e3      	str	r3, [r4, #92]	@ 0x5c
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005aa4:	7923      	ldrb	r3, [r4, #4]
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005aa6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005aaa:	f000 ffac 	bl	8006a06 <USBH_BulkReceiveData>
 8005aae:	e7db      	b.n	8005a68 <USBH_MSC_BOT_Process+0x60>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	7963      	ldrb	r3, [r4, #5]
 8005ab4:	8922      	ldrh	r2, [r4, #8]
 8005ab6:	9100      	str	r1, [sp, #0]
 8005ab8:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8005abc:	f000 ff8c 	bl	80069d8 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005ac0:	2306      	movs	r3, #6
 8005ac2:	e7cf      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005ac4:	7961      	ldrb	r1, [r4, #5]
 8005ac6:	f7fb f966 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005aca:	2801      	cmp	r0, #1
 8005acc:	d111      	bne.n	8005af2 <USBH_MSC_BOT_Process+0xea>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005ace:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ad0:	8922      	ldrh	r2, [r4, #8]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d909      	bls.n	8005aea <USBH_MSC_BOT_Process+0xe2>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005ad6:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005ada:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005adc:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005ade:	65e3      	str	r3, [r4, #92]	@ 0x5c
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005ae0:	7963      	ldrb	r3, [r4, #5]
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005ae2:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005ae6:	9000      	str	r0, [sp, #0]
 8005ae8:	e7ab      	b.n	8005a42 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	65e3      	str	r3, [r4, #92]	@ 0x5c
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005aee:	2307      	movs	r3, #7
 8005af0:	e7b8      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005af2:	2802      	cmp	r0, #2
 8005af4:	d101      	bne.n	8005afa <USBH_MSC_BOT_Process+0xf2>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005af6:	2305      	movs	r3, #5
 8005af8:	e7b4      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      else if (URB_Status == USBH_URB_STALL)
 8005afa:	2805      	cmp	r0, #5
 8005afc:	d1b4      	bne.n	8005a68 <USBH_MSC_BOT_Process+0x60>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8005afe:	230a      	movs	r3, #10
 8005b00:	e7b0      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005b02:	7923      	ldrb	r3, [r4, #4]
 8005b04:	220d      	movs	r2, #13
 8005b06:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 8005b0a:	f000 ff7c 	bl	8006a06 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8005b0e:	2308      	movs	r3, #8
 8005b10:	e7a8      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005b12:	7921      	ldrb	r1, [r4, #4]
 8005b14:	f7fb f93f 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005b18:	2801      	cmp	r0, #1
 8005b1a:	d11b      	bne.n	8005b54 <USBH_MSC_BOT_Process+0x14c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b1c:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005b20:	f884 0052 	strb.w	r0, [r4, #82]	@ 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005b24:	4628      	mov	r0, r5
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b26:	f8d5 347c 	ldr.w	r3, [r5, #1148]	@ 0x47c
 8005b2a:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005b2c:	7921      	ldrb	r1, [r4, #4]
 8005b2e:	f7fb f903 	bl	8000d38 <USBH_LL_GetLastXferSize>
 8005b32:	280d      	cmp	r0, #13
 8005b34:	d13d      	bne.n	8005bb2 <USBH_MSC_BOT_Process+0x1aa>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005b36:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8005b38:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb8 <USBH_MSC_BOT_Process+0x1b0>)
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d139      	bne.n	8005bb2 <USBH_MSC_BOT_Process+0x1aa>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005b3e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005b40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d135      	bne.n	8005bb2 <USBH_MSC_BOT_Process+0x1aa>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005b46:	f894 0084 	ldrb.w	r0, [r4, #132]	@ 0x84
 8005b4a:	3800      	subs	r0, #0
 8005b4c:	bf18      	it	ne
 8005b4e:	2001      	movne	r0, #1
 8005b50:	0040      	lsls	r0, r0, #1
 8005b52:	e78a      	b.n	8005a6a <USBH_MSC_BOT_Process+0x62>
      else if (URB_Status == USBH_URB_STALL)
 8005b54:	2805      	cmp	r0, #5
 8005b56:	d187      	bne.n	8005a68 <USBH_MSC_BOT_Process+0x60>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005b58:	2309      	movs	r3, #9
 8005b5a:	e783      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005b5c:	79e1      	ldrb	r1, [r4, #7]
 8005b5e:	f000 fef7 	bl	8006950 <USBH_ClrFeature>
      if (error == USBH_OK)
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0c3      	beq.n	8005aee <USBH_MSC_BOT_Process+0xe6>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005b66:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 8005b68:	f47f af7e 	bne.w	8005a68 <USBH_MSC_BOT_Process+0x60>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005b6c:	230b      	movs	r3, #11
 8005b6e:	e779      	b.n	8005a64 <USBH_MSC_BOT_Process+0x5c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005b70:	79a1      	ldrb	r1, [r4, #6]
 8005b72:	f000 feed 	bl	8006950 <USBH_ClrFeature>
      if (error == USBH_OK)
 8005b76:	4606      	mov	r6, r0
 8005b78:	b980      	cbnz	r0, 8005b9c <USBH_MSC_BOT_Process+0x194>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005b7a:	7961      	ldrb	r1, [r4, #5]
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f7fb f92f 	bl	8000de0 <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005b82:	f1c0 0201 	rsb	r2, r0, #1
 8005b86:	7961      	ldrb	r1, [r4, #5]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	f7fb f918 	bl	8000dc0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005b90:	4632      	mov	r2, r6
 8005b92:	7921      	ldrb	r1, [r4, #4]
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7fb f913 	bl	8000dc0 <USBH_LL_SetToggle>
 8005b9a:	e7dd      	b.n	8005b58 <USBH_MSC_BOT_Process+0x150>
        if (error == USBH_UNRECOVERED_ERROR)
 8005b9c:	2804      	cmp	r0, #4
 8005b9e:	e7e3      	b.n	8005b68 <USBH_MSC_BOT_Process+0x160>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005ba0:	f7ff ff0e 	bl	80059c0 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f47f af60 	bne.w	8005a6a <USBH_MSC_BOT_Process+0x62>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8005bb0:	e75b      	b.n	8005a6a <USBH_MSC_BOT_Process+0x62>
          status = USBH_FAIL;
 8005bb2:	2002      	movs	r0, #2
 8005bb4:	e759      	b.n	8005a6a <USBH_MSC_BOT_Process+0x62>
 8005bb6:	bf00      	nop
 8005bb8:	53425355 	.word	0x53425355

08005bbc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005bbc:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bbe:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
 8005bc2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005bc4:	f894 5052 	ldrb.w	r5, [r4, #82]	@ 0x52
 8005bc8:	2d01      	cmp	r5, #1
 8005bca:	d004      	beq.n	8005bd6 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8005bcc:	2d02      	cmp	r5, #2
 8005bce:	d014      	beq.n	8005bfa <USBH_MSC_SCSI_TestUnitReady+0x3e>
 8005bd0:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005bd6:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005bd8:	230a      	movs	r3, #10
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005bda:	2210      	movs	r2, #16
 8005bdc:	f104 0063 	add.w	r0, r4, #99	@ 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005be0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005be4:	65e1      	str	r1, [r4, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005be6:	f884 1060 	strb.w	r1, [r4, #96]	@ 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005bea:	f001 f831 	bl	8006c50 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005bee:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005bf0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005bf4:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      break;
 8005bf8:	e7eb      	b.n	8005bd2 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 8005bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8005bfe:	f7ff bf03 	b.w	8005a08 <USBH_MSC_BOT_Process>

08005c02 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef error = USBH_BUSY;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c02:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005c06:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c08:	69dc      	ldr	r4, [r3, #28]
{
 8005c0a:	4615      	mov	r5, r2

  switch (MSC_Handle->hbot.cmd_state)
 8005c0c:	f894 6052 	ldrb.w	r6, [r4, #82]	@ 0x52
 8005c10:	2e01      	cmp	r6, #1
 8005c12:	d003      	beq.n	8005c1c <USBH_MSC_SCSI_ReadCapacity+0x1a>
 8005c14:	2e02      	cmp	r6, #2
 8005c16:	d01a      	beq.n	8005c4e <USBH_MSC_SCSI_ReadCapacity+0x4c>
{
 8005c18:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005c1c:	2308      	movs	r3, #8
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c1e:	220f      	movs	r2, #15
 8005c20:	2100      	movs	r1, #0
 8005c22:	f104 0064 	add.w	r0, r4, #100	@ 0x64
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005c26:	65e3      	str	r3, [r4, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c2e:	f001 f80f 	bl	8006c50 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c32:	f242 530a 	movw	r3, #9482	@ 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c36:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c3a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005c44:	f104 0310 	add.w	r3, r4, #16
 8005c48:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      break;
 8005c4c:	e7e4      	b.n	8005c18 <USBH_MSC_SCSI_ReadCapacity+0x16>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c4e:	f7ff fedb 	bl	8005a08 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1e1      	bne.n	8005c1a <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005c56:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	ba1b      	rev	r3, r3
 8005c5e:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005c60:	88d3      	ldrh	r3, [r2, #6]
 8005c62:	ba5b      	rev16	r3, r3
 8005c64:	80ab      	strh	r3, [r5, #4]
 8005c66:	e7d8      	b.n	8005c1a <USBH_MSC_SCSI_ReadCapacity+0x18>

08005c68 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c6c:	f8d0 247c 	ldr.w	r2, [r0, #1148]	@ 0x47c
{
 8005c70:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c72:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005c74:	f894 5052 	ldrb.w	r5, [r4, #82]	@ 0x52
 8005c78:	2d01      	cmp	r5, #1
 8005c7a:	d004      	beq.n	8005c86 <USBH_MSC_SCSI_Inquiry+0x1e>
 8005c7c:	2d02      	cmp	r5, #2
 8005c7e:	d01f      	beq.n	8005cc0 <USBH_MSC_SCSI_Inquiry+0x58>
 8005c80:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005c82:	4628      	mov	r0, r5
 8005c84:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c86:	2180      	movs	r1, #128	@ 0x80
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8005c88:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005c8a:	2224      	movs	r2, #36	@ 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c8c:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c90:	f884 1060 	strb.w	r1, [r4, #96]	@ 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005c94:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8005c96:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c9a:	2302      	movs	r3, #2
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005c9c:	f8c4 1065 	str.w	r1, [r4, #101]	@ 0x65
 8005ca0:	f8c4 1069 	str.w	r1, [r4, #105]	@ 0x69
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005ca4:	f241 210a 	movw	r1, #4618	@ 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ca8:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005cac:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005cb0:	65e2      	str	r2, [r4, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005cb2:	f8a4 1062 	strh.w	r1, [r4, #98]	@ 0x62
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8005cb6:	f884 2067 	strb.w	r2, [r4, #103]	@ 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005cba:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      break;
 8005cbe:	e7e0      	b.n	8005c82 <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005cc0:	f7ff fea2 	bl	8005a08 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d1db      	bne.n	8005c82 <USBH_MSC_SCSI_Inquiry+0x1a>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005cca:	4601      	mov	r1, r0
 8005ccc:	2222      	movs	r2, #34	@ 0x22
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f000 ffbe 	bl	8006c50 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005cd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005cd8:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	f002 021f 	and.w	r2, r2, #31
 8005ce2:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	0952      	lsrs	r2, r2, #5
 8005ce8:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005cea:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8005cee:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
 8005cf0:	bfbc      	itt	lt
 8005cf2:	2201      	movlt	r2, #1
 8005cf4:	70b2      	strblt	r2, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	f8c6 2003 	str.w	r2, [r6, #3]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	f8c6 2007 	str.w	r2, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005d02:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005d06:	f103 0210 	add.w	r2, r3, #16
 8005d0a:	3320      	adds	r3, #32
 8005d0c:	f852 0b04 	ldr.w	r0, [r2], #4
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f841 0b04 	str.w	r0, [r1], #4
 8005d16:	d1f9      	bne.n	8005d0c <USBH_MSC_SCSI_Inquiry+0xa4>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005d18:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f8c6 301d 	str.w	r3, [r6, #29]
 8005d22:	e7ae      	b.n	8005c82 <USBH_MSC_SCSI_Inquiry+0x1a>

08005d24 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d26:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	4615      	mov	r5, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d2e:	69df      	ldr	r7, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005d30:	f897 4052 	ldrb.w	r4, [r7, #82]	@ 0x52
 8005d34:	2c01      	cmp	r4, #1
 8005d36:	d004      	beq.n	8005d42 <USBH_MSC_SCSI_RequestSense+0x1e>
 8005d38:	2c02      	cmp	r4, #2
 8005d3a:	d020      	beq.n	8005d7e <USBH_MSC_SCSI_RequestSense+0x5a>
 8005d3c:	2402      	movs	r4, #2
    default:
      break;
  }

  return error;
}
 8005d3e:	4620      	mov	r0, r4
 8005d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005d42:	250e      	movs	r5, #14
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005d44:	2380      	movs	r3, #128	@ 0x80
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d46:	2100      	movs	r1, #0
 8005d48:	f107 0065 	add.w	r0, r7, #101	@ 0x65
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005d4c:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d50:	462a      	mov	r2, r5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005d52:	65fd      	str	r5, [r7, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8005d54:	0176      	lsls	r6, r6, #5
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d56:	f000 ff7b 	bl	8006c50 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d5a:	f240 330a 	movw	r3, #778	@ 0x30a
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8005d5e:	f887 6064 	strb.w	r6, [r7, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d62:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d66:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8005d68:	f887 5067 	strb.w	r5, [r7, #103]	@ 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d6c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005d70:	f107 0310 	add.w	r3, r7, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d74:	f887 4050 	strb.w	r4, [r7, #80]	@ 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      break;
 8005d7c:	e7df      	b.n	8005d3e <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d7e:	f7ff fe43 	bl	8005a08 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005d82:	4604      	mov	r4, r0
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d1da      	bne.n	8005d3e <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8c:	789a      	ldrb	r2, [r3, #2]
 8005d8e:	f002 020f 	and.w	r2, r2, #15
 8005d92:	702a      	strb	r2, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005d94:	7b1c      	ldrb	r4, [r3, #12]
 8005d96:	706c      	strb	r4, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005d98:	7b5b      	ldrb	r3, [r3, #13]
 8005d9a:	70ab      	strb	r3, [r5, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8005d9c:	f1a4 033a 	sub.w	r3, r4, #58	@ 0x3a
 8005da0:	425c      	negs	r4, r3
 8005da2:	415c      	adcs	r4, r3
 8005da4:	00a4      	lsls	r4, r4, #2
 8005da6:	e7ca      	b.n	8005d3e <USBH_MSC_SCSI_RequestSense+0x1a>

08005da8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dac:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dae:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005db2:	4615      	mov	r5, r2
 8005db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005db8:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005dba:	f894 6052 	ldrb.w	r6, [r4, #82]	@ 0x52
 8005dbe:	2e01      	cmp	r6, #1
 8005dc0:	d005      	beq.n	8005dce <USBH_MSC_SCSI_Write+0x26>
 8005dc2:	2e02      	cmp	r6, #2
 8005dc4:	d031      	beq.n	8005e2a <USBH_MSC_SCSI_Write+0x82>
 8005dc6:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 8005dc8:	4630      	mov	r0, r6
 8005dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005dce:	2334      	movs	r3, #52	@ 0x34
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005dd0:	f104 0064 	add.w	r0, r4, #100	@ 0x64
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005dd4:	fb03 4701 	mla	r7, r3, r1, r4
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005dd8:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005dda:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005dde:	f884 1060 	strb.w	r1, [r4, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005de2:	fb09 f202 	mul.w	r2, r9, r2
 8005de6:	65e2      	str	r2, [r4, #92]	@ 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005de8:	220f      	movs	r2, #15
 8005dea:	f000 ff31 	bl	8006c50 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005dee:	f642 230a 	movw	r3, #10762	@ 0x2a0a
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8005df2:	fa99 f299 	rev16.w	r2, r9
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8005df6:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005dfa:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8005dfe:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8005e02:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8005e06:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8005e0a:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005e0e:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8005e12:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8005e16:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
 8005e1a:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8005e1e:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005e22:	2302      	movs	r3, #2
 8005e24:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      break;
 8005e28:	e7ce      	b.n	8005dc8 <USBH_MSC_SCSI_Write+0x20>
}
 8005e2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8005e2e:	f7ff bdeb 	b.w	8005a08 <USBH_MSC_BOT_Process>

08005e32 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005e32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e36:	4698      	mov	r8, r3
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e38:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
{
 8005e3c:	4615      	mov	r5, r2
 8005e3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e42:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005e44:	f894 6052 	ldrb.w	r6, [r4, #82]	@ 0x52
 8005e48:	2e01      	cmp	r6, #1
 8005e4a:	d005      	beq.n	8005e58 <USBH_MSC_SCSI_Read+0x26>
 8005e4c:	2e02      	cmp	r6, #2
 8005e4e:	d032      	beq.n	8005eb6 <USBH_MSC_SCSI_Read+0x84>
 8005e50:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 8005e52:	4630      	mov	r0, r6
 8005e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005e58:	2334      	movs	r3, #52	@ 0x34
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005e5a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005e5e:	fb03 4701 	mla	r7, r3, r1, r4
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005e62:	2380      	movs	r3, #128	@ 0x80
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005e64:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005e66:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005e6a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8005e6e:	fb09 f202 	mul.w	r2, r9, r2
 8005e72:	65e2      	str	r2, [r4, #92]	@ 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005e74:	220f      	movs	r2, #15
 8005e76:	f000 feeb 	bl	8006c50 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005e7a:	f642 030a 	movw	r3, #10250	@ 0x280a
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8005e7e:	fa99 f299 	rev16.w	r2, r9
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8005e82:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005e86:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8005e8a:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8005e8e:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8005e92:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8005e96:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005e9a:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8005e9e:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8005ea2:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
 8005ea6:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8005eaa:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      break;
 8005eb4:	e7cd      	b.n	8005e52 <USBH_MSC_SCSI_Read+0x20>
}
 8005eb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8005eba:	f7ff bda5 	b.w	8005a08 <USBH_MSC_BOT_Process>

08005ebe <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8005ebe:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8005ec0:	2640      	movs	r6, #64	@ 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8005ec2:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f200 4084 	addw	r0, r0, #1156	@ 0x484
 8005eca:	4632      	mov	r2, r6
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
 8005ecc:	2500      	movs	r5, #0
    phost->Pipes[i] = 0U;
 8005ece:	f000 febf 	bl	8006c50 <memset>
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8005ed2:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ed4:	71a6      	strb	r6, [r4, #6]
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005ed6:	f44f 7600 	mov.w	r6, #512	@ 0x200
  phost->RequestState = CMD_SEND;
 8005eda:	70a3      	strb	r3, [r4, #2]
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005edc:	4629      	mov	r1, r5
  phost->Control.state = CTRL_SETUP;
 8005ede:	8323      	strh	r3, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005ee4:	4632      	mov	r2, r6
  phost->gState = HOST_IDLE;
 8005ee6:	7025      	strb	r5, [r4, #0]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ee8:	f8c4 341c 	str.w	r3, [r4, #1052]	@ 0x41c
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005eec:	f104 001c 	add.w	r0, r4, #28
  phost->EnumState = ENUM_IDLE;
 8005ef0:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 8005ef2:	f8c4 54c4 	str.w	r5, [r4, #1220]	@ 0x4c4
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005ef6:	f000 feab 	bl	8006c50 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8005efa:	4632      	mov	r2, r6
 8005efc:	4629      	mov	r1, r5
 8005efe:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8005f02:	f000 fea5 	bl	8006c50 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8005f06:	4629      	mov	r1, r5
 8005f08:	2212      	movs	r2, #18
 8005f0a:	f204 4026 	addw	r0, r4, #1062	@ 0x426
 8005f0e:	f000 fe9f 	bl	8006c50 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8005f12:	4629      	mov	r1, r5
 8005f14:	f504 6087 	add.w	r0, r4, #1080	@ 0x438
 8005f18:	223e      	movs	r2, #62	@ 0x3e

  return USBH_OK;
}
 8005f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8005f1e:	f000 be97 	b.w	8006c50 <memset>

08005f22 <USBH_Init>:
{
 8005f22:	b570      	push	{r4, r5, r6, lr}
 8005f24:	460e      	mov	r6, r1
  if (phost == NULL)
 8005f26:	4604      	mov	r4, r0
 8005f28:	b1c0      	cbz	r0, 8005f5c <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 8005f2a:	2500      	movs	r5, #0
  phost->id = id;
 8005f2c:	f880 24cc 	strb.w	r2, [r0, #1228]	@ 0x4cc
  phost->pActiveClass = NULL;
 8005f30:	f8c0 547c 	str.w	r5, [r0, #1148]	@ 0x47c
  phost->ClassNumber = 0U;
 8005f34:	f8c0 5480 	str.w	r5, [r0, #1152]	@ 0x480
  (void)DeInitStateMachine(phost);
 8005f38:	f7ff ffc1 	bl	8005ebe <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 8005f3c:	f884 5420 	strb.w	r5, [r4, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
 8005f40:	f884 5423 	strb.w	r5, [r4, #1059]	@ 0x423
  phost->device.is_disconnected = 0U;
 8005f44:	f884 5421 	strb.w	r5, [r4, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 8005f48:	f884 5422 	strb.w	r5, [r4, #1058]	@ 0x422
  if (pUsrFunc != NULL)
 8005f4c:	b10e      	cbz	r6, 8005f52 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8005f4e:	f8c4 64d4 	str.w	r6, [r4, #1236]	@ 0x4d4
  (void)USBH_LL_Init(phost);
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7fa feac 	bl	8000cb0 <USBH_LL_Init>
  return USBH_OK;
 8005f58:	2000      	movs	r0, #0
}
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	e7fc      	b.n	8005f5a <USBH_Init+0x38>

08005f60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f60:	4603      	mov	r3, r0
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8005f62:	b141      	cbz	r1, 8005f76 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f64:	f8d0 0480 	ldr.w	r0, [r0, #1152]	@ 0x480
 8005f68:	b928      	cbnz	r0, 8005f76 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f8c3 1478 	str.w	r1, [r3, #1144]	@ 0x478
 8005f70:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 8005f74:	4770      	bx	lr
      status = USBH_OK;
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f76:	2002      	movs	r0, #2
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8005f78:	4770      	bx	lr

08005f7a <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f7a:	f890 343c 	ldrb.w	r3, [r0, #1084]	@ 0x43c
 8005f7e:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8005f80:	bf86      	itte	hi
 8005f82:	f880 1424 	strbhi.w	r1, [r0, #1060]	@ 0x424
  USBH_StatusTypeDef status = USBH_OK;
 8005f86:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f88:	2002      	movls	r0, #2
  }

  return status;
}
 8005f8a:	4770      	bx	lr

08005f8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4604      	mov	r4, r0
 8005f90:	2500      	movs	r5, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f92:	f894 6447 	ldrb.w	r6, [r4, #1095]	@ 0x447
 8005f96:	b2e8      	uxtb	r0, r5
 8005f98:	428e      	cmp	r6, r1
 8005f9a:	d001      	beq.n	8005fa0 <USBH_FindInterface+0x14>
 8005f9c:	29ff      	cmp	r1, #255	@ 0xff
 8005f9e:	d10b      	bne.n	8005fb8 <USBH_FindInterface+0x2c>
 8005fa0:	f894 6448 	ldrb.w	r6, [r4, #1096]	@ 0x448
 8005fa4:	4296      	cmp	r6, r2
 8005fa6:	d001      	beq.n	8005fac <USBH_FindInterface+0x20>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fa8:	2aff      	cmp	r2, #255	@ 0xff
 8005faa:	d105      	bne.n	8005fb8 <USBH_FindInterface+0x2c>
 8005fac:	f894 6449 	ldrb.w	r6, [r4, #1097]	@ 0x449
 8005fb0:	429e      	cmp	r6, r3
 8005fb2:	d004      	beq.n	8005fbe <USBH_FindInterface+0x32>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fb4:	2bff      	cmp	r3, #255	@ 0xff
 8005fb6:	d002      	beq.n	8005fbe <USBH_FindInterface+0x32>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fb8:	341a      	adds	r4, #26
 8005fba:	b10d      	cbz	r5, 8005fc0 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8005fbc:	20ff      	movs	r0, #255	@ 0xff
}
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	2501      	movs	r5, #1
 8005fc2:	e7e6      	b.n	8005f92 <USBH_FindInterface+0x6>

08005fc4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005fc8:	f7fa fe96 	bl	8000cf8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7fa fee6 	bl	8000da0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	bd10      	pop	{r4, pc}

08005fd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8005fd8:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005fda:	2302      	movs	r3, #2
{
 8005fdc:	b087      	sub	sp, #28
 8005fde:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005fe0:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005fe4:	f890 3421 	ldrb.w	r3, [r0, #1057]	@ 0x421
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005fec:	2303      	movs	r3, #3
 8005fee:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 8005ff0:	7823      	ldrb	r3, [r4, #0]
 8005ff2:	2b0b      	cmp	r3, #11
 8005ff4:	d81d      	bhi.n	8006032 <USBH_Process+0x5a>
 8005ff6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ffa:	000c      	.short	0x000c
 8005ffc:	0041001f 	.word	0x0041001f
 8006000:	001c01b0 	.word	0x001c01b0
 8006004:	01920077 	.word	0x01920077
 8006008:	01500147 	.word	0x01500147
 800600c:	016f015a 	.word	0x016f015a
 8006010:	01a7      	.short	0x01a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006012:	f894 3420 	ldrb.w	r3, [r4, #1056]	@ 0x420
 8006016:	b163      	cbz	r3, 8006032 <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006018:	2301      	movs	r3, #1
        USBH_Delay(200U);
 800601a:	20c8      	movs	r0, #200	@ 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800601c:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 800601e:	f7fa feed 	bl	8000dfc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006022:	4620      	mov	r0, r4
 8006024:	f7fa fe81 	bl	8000d2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006028:	2300      	movs	r3, #0
 800602a:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        phost->Timeout = 0U;
 800602e:	f8c4 34c8 	str.w	r3, [r4, #1224]	@ 0x4c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 8006032:	2000      	movs	r0, #0
 8006034:	b007      	add	sp, #28
 8006036:	bd30      	pop	{r4, r5, pc}
      if (phost->device.PortEnabled == 1U)
 8006038:	f894 3423 	ldrb.w	r3, [r4, #1059]	@ 0x423
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 8006046:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 8006048:	7023      	strb	r3, [r4, #0]
 800604a:	e7f2      	b.n	8006032 <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800604c:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	@ 0x4c8
 8006050:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006054:	d90b      	bls.n	800606e <USBH_Process+0x96>
          phost->device.RstCnt++;
 8006056:	f894 341f 	ldrb.w	r3, [r4, #1055]	@ 0x41f
 800605a:	3301      	adds	r3, #1
 800605c:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800605e:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 8006060:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
          if (phost->device.RstCnt > 3U)
 8006064:	d901      	bls.n	800606a <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8006066:	230d      	movs	r3, #13
 8006068:	e7ee      	b.n	8006048 <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 800606a:	2300      	movs	r3, #0
 800606c:	e7ec      	b.n	8006048 <USBH_Process+0x70>
          phost->Timeout += 10U;
 800606e:	330a      	adds	r3, #10
          USBH_Delay(10U);
 8006070:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 8006072:	f8c4 34c8 	str.w	r3, [r4, #1224]	@ 0x4c8
          USBH_Delay(10U);
 8006076:	f7fa fec1 	bl	8000dfc <USBH_Delay>
 800607a:	e7da      	b.n	8006032 <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 800607c:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	@ 0x4d4
 8006080:	b113      	cbz	r3, 8006088 <USBH_Process+0xb0>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006082:	2104      	movs	r1, #4
 8006084:	4620      	mov	r0, r4
 8006086:	4798      	blx	r3
      USBH_Delay(100U);
 8006088:	2064      	movs	r0, #100	@ 0x64
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800608a:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800608c:	f7fa feb6 	bl	8000dfc <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006090:	4620      	mov	r0, r4
 8006092:	f7fa fe3f 	bl	8000d14 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8006096:	2305      	movs	r3, #5
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006098:	f884 041d 	strb.w	r0, [r4, #1053]	@ 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800609c:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 800609e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fcd4 	bl	8006a4e <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060a6:	2180      	movs	r1, #128	@ 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80060a8:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fccf 	bl	8006a4e <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060b0:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060b2:	7120      	strb	r0, [r4, #4]
 80060b4:	4601      	mov	r1, r0
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060b6:	9302      	str	r3, [sp, #8]
 80060b8:	2280      	movs	r2, #128	@ 0x80
 80060ba:	9501      	str	r5, [sp, #4]
 80060bc:	4620      	mov	r0, r4
 80060be:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 80060c8:	f000 fcad 	bl	8006a26 <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060cc:	79a3      	ldrb	r3, [r4, #6]
 80060ce:	462a      	mov	r2, r5
 80060d0:	4620      	mov	r0, r4
 80060d2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80060d6:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 80060e0:	7961      	ldrb	r1, [r4, #5]
 80060e2:	f000 fca0 	bl	8006a26 <USBH_OpenPipe>
      break;
 80060e6:	e7a4      	b.n	8006032 <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 80060e8:	7863      	ldrb	r3, [r4, #1]
 80060ea:	2b07      	cmp	r3, #7
 80060ec:	d840      	bhi.n	8006170 <USBH_Process+0x198>
 80060ee:	e8df f003 	tbb	[pc, r3]
 80060f2:	5104      	.short	0x5104
 80060f4:	9a91896e 	.word	0x9a91896e
 80060f8:	b8a9      	.short	0xb8a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80060fa:	2108      	movs	r1, #8
 80060fc:	4620      	mov	r0, r4
 80060fe:	f000 fa5d 	bl	80065bc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8006102:	4605      	mov	r5, r0
 8006104:	b9f0      	cbnz	r0, 8006144 <USBH_Process+0x16c>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006106:	f894 342d 	ldrb.w	r3, [r4, #1069]	@ 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800610a:	2201      	movs	r2, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800610c:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800610e:	7062      	strb	r2, [r4, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006110:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8006114:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800611e:	7921      	ldrb	r1, [r4, #4]
 8006120:	2280      	movs	r2, #128	@ 0x80
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fc7f 	bl	8006a26 <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006128:	79a3      	ldrb	r3, [r4, #6]
 800612a:	462a      	mov	r2, r5
 800612c:	4620      	mov	r0, r4
 800612e:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8006132:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 800613c:	7961      	ldrb	r1, [r4, #5]
 800613e:	f000 fc72 	bl	8006a26 <USBH_OpenPipe>
 8006142:	e015      	b.n	8006170 <USBH_Process+0x198>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006144:	2803      	cmp	r0, #3
 8006146:	d113      	bne.n	8006170 <USBH_Process+0x198>
        phost->device.EnumCnt++;
 8006148:	f894 341e 	ldrb.w	r3, [r4, #1054]	@ 0x41e
 800614c:	3301      	adds	r3, #1
 800614e:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8006150:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8006152:	f884 341e 	strb.w	r3, [r4, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 8006156:	d901      	bls.n	800615c <USBH_Process+0x184>
          phost->gState = HOST_ABORT_STATE;
 8006158:	230d      	movs	r3, #13
 800615a:	e008      	b.n	800616e <USBH_Process+0x196>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800615c:	7961      	ldrb	r1, [r4, #5]
 800615e:	4620      	mov	r0, r4
 8006160:	f000 fc8c 	bl	8006a7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006164:	7921      	ldrb	r1, [r4, #4]
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fc88 	bl	8006a7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800616c:	2300      	movs	r3, #0
          phost->gState = HOST_ABORT_STATE;
 800616e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006170:	2001      	movs	r0, #1
      status = USBH_HandleEnum(phost);
 8006172:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 8006176:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800617a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800617e:	2b00      	cmp	r3, #0
 8006180:	f47f af57 	bne.w	8006032 <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006184:	f894 3437 	ldrb.w	r3, [r4, #1079]	@ 0x437
        phost->device.current_interface = 0U;
 8006188:	f884 2424 	strb.w	r2, [r4, #1060]	@ 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800618c:	2b01      	cmp	r3, #1
 800618e:	d179      	bne.n	8006284 <USBH_Process+0x2ac>
        phost->gState = HOST_SET_CONFIGURATION;
 8006190:	2308      	movs	r3, #8
 8006192:	e759      	b.n	8006048 <USBH_Process+0x70>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006194:	2112      	movs	r1, #18
 8006196:	4620      	mov	r0, r4
 8006198:	f000 fa10 	bl	80065bc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800619c:	b910      	cbnz	r0, 80061a4 <USBH_Process+0x1cc>
        phost->EnumState = ENUM_SET_ADDR;
 800619e:	2302      	movs	r3, #2
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061a0:	7063      	strb	r3, [r4, #1]
 80061a2:	e7e5      	b.n	8006170 <USBH_Process+0x198>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061a4:	2803      	cmp	r0, #3
 80061a6:	d1e3      	bne.n	8006170 <USBH_Process+0x198>
        phost->device.EnumCnt++;
 80061a8:	f894 341e 	ldrb.w	r3, [r4, #1054]	@ 0x41e
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80061b0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80061b2:	f884 341e 	strb.w	r3, [r4, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 80061b6:	d8cf      	bhi.n	8006158 <USBH_Process+0x180>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80061b8:	7961      	ldrb	r1, [r4, #5]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fc5e 	bl	8006a7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80061c0:	7921      	ldrb	r1, [r4, #4]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 fc5a 	bl	8006a7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80061cc:	e7cf      	b.n	800616e <USBH_Process+0x196>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80061ce:	2101      	movs	r1, #1
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fb96 	bl	8006902 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 80061d6:	4605      	mov	r5, r0
 80061d8:	b970      	cbnz	r0, 80061f8 <USBH_Process+0x220>
        USBH_Delay(2U);
 80061da:	2002      	movs	r0, #2
 80061dc:	f7fa fe0e 	bl	8000dfc <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80061e0:	2203      	movs	r2, #3
        phost->device.address = USBH_DEVICE_ADDRESS;
 80061e2:	2301      	movs	r3, #1
        phost->EnumState = ENUM_GET_CFG_DESC;
 80061e4:	7062      	strb	r2, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80061e6:	79a2      	ldrb	r2, [r4, #6]
        phost->device.address = USBH_DEVICE_ADDRESS;
 80061e8:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80061ec:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80061f0:	f894 241d 	ldrb.w	r2, [r4, #1053]	@ 0x41d
 80061f4:	9200      	str	r2, [sp, #0]
 80061f6:	e792      	b.n	800611e <USBH_Process+0x146>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061f8:	2803      	cmp	r0, #3
 80061fa:	d1b9      	bne.n	8006170 <USBH_Process+0x198>
        phost->gState = HOST_ABORT_STATE;
 80061fc:	230d      	movs	r3, #13
 80061fe:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8006200:	2300      	movs	r3, #0
 8006202:	e7cd      	b.n	80061a0 <USBH_Process+0x1c8>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006204:	2109      	movs	r1, #9
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fa44 	bl	8006694 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800620c:	2800      	cmp	r0, #0
 800620e:	d1c9      	bne.n	80061a4 <USBH_Process+0x1cc>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006210:	2304      	movs	r3, #4
 8006212:	e7c5      	b.n	80061a0 <USBH_Process+0x1c8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006214:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	@ 0x43a
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fa3b 	bl	8006694 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800621e:	2800      	cmp	r0, #0
 8006220:	d1c0      	bne.n	80061a4 <USBH_Process+0x1cc>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006222:	2305      	movs	r3, #5
 8006224:	e7bc      	b.n	80061a0 <USBH_Process+0x1c8>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006226:	f894 1434 	ldrb.w	r1, [r4, #1076]	@ 0x434
 800622a:	b131      	cbz	r1, 800623a <USBH_Process+0x262>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800622c:	23ff      	movs	r3, #255	@ 0xff
 800622e:	f504 7207 	add.w	r2, r4, #540	@ 0x21c
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fb38 	bl	80068a8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8006238:	b908      	cbnz	r0, 800623e <USBH_Process+0x266>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800623a:	2306      	movs	r3, #6
 800623c:	e7b0      	b.n	80061a0 <USBH_Process+0x1c8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800623e:	2803      	cmp	r0, #3
 8006240:	d196      	bne.n	8006170 <USBH_Process+0x198>
 8006242:	e7fa      	b.n	800623a <USBH_Process+0x262>
      if (phost->device.DevDesc.iProduct != 0U)
 8006244:	f894 1435 	ldrb.w	r1, [r4, #1077]	@ 0x435
 8006248:	b131      	cbz	r1, 8006258 <USBH_Process+0x280>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800624a:	23ff      	movs	r3, #255	@ 0xff
 800624c:	f504 7207 	add.w	r2, r4, #540	@ 0x21c
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fb29 	bl	80068a8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8006256:	b908      	cbnz	r0, 800625c <USBH_Process+0x284>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006258:	2307      	movs	r3, #7
 800625a:	e7a1      	b.n	80061a0 <USBH_Process+0x1c8>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800625c:	2803      	cmp	r0, #3
 800625e:	d187      	bne.n	8006170 <USBH_Process+0x198>
 8006260:	e7fa      	b.n	8006258 <USBH_Process+0x280>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006262:	f894 1436 	ldrb.w	r1, [r4, #1078]	@ 0x436
 8006266:	b909      	cbnz	r1, 800626c <USBH_Process+0x294>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8006268:	2000      	movs	r0, #0
 800626a:	e782      	b.n	8006172 <USBH_Process+0x19a>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800626c:	23ff      	movs	r3, #255	@ 0xff
 800626e:	f504 7207 	add.w	r2, r4, #540	@ 0x21c
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fb18 	bl	80068a8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8006278:	2800      	cmp	r0, #0
 800627a:	d0f5      	beq.n	8006268 <USBH_Process+0x290>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800627c:	3803      	subs	r0, #3
 800627e:	bf18      	it	ne
 8006280:	2001      	movne	r0, #1
 8006282:	e776      	b.n	8006172 <USBH_Process+0x19a>
          phost->gState = HOST_INPUT;
 8006284:	2307      	movs	r3, #7
 8006286:	e6df      	b.n	8006048 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8006288:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	@ 0x4d4
 800628c:	2b00      	cmp	r3, #0
 800628e:	f43f aed0 	beq.w	8006032 <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006292:	2101      	movs	r1, #1
 8006294:	4620      	mov	r0, r4
 8006296:	4798      	blx	r3
 8006298:	e77a      	b.n	8006190 <USBH_Process+0x1b8>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800629a:	f894 143d 	ldrb.w	r1, [r4, #1085]	@ 0x43d
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 fb3c 	bl	800691c <USBH_SetCfg>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f47f aec4 	bne.w	8006032 <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80062aa:	2309      	movs	r3, #9
 80062ac:	e6cc      	b.n	8006048 <USBH_Process+0x70>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80062ae:	f894 343f 	ldrb.w	r3, [r4, #1087]	@ 0x43f
 80062b2:	069b      	lsls	r3, r3, #26
 80062b4:	d508      	bpl.n	80062c8 <USBH_Process+0x2f0>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80062b6:	2101      	movs	r1, #1
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fb3c 	bl	8006936 <USBH_SetFeature>
 80062be:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80062c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80062c6:	b90b      	cbnz	r3, 80062cc <USBH_Process+0x2f4>
        phost->gState = HOST_CHECK_CLASS;
 80062c8:	230a      	movs	r3, #10
 80062ca:	e6bd      	b.n	8006048 <USBH_Process+0x70>
        else if (status == USBH_NOT_SUPPORTED)
 80062cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	f47f aeae 	bne.w	8006032 <USBH_Process+0x5a>
 80062d6:	e7f7      	b.n	80062c8 <USBH_Process+0x2f0>
      if (phost->ClassNumber == 0U)
 80062d8:	f8d4 3480 	ldr.w	r3, [r4, #1152]	@ 0x480
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f43f aea8 	beq.w	8006032 <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 80062e2:	2300      	movs	r3, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062e4:	f894 1447 	ldrb.w	r1, [r4, #1095]	@ 0x447
        phost->pActiveClass = NULL;
 80062e8:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062ec:	f8d4 3478 	ldr.w	r3, [r4, #1144]	@ 0x478
 80062f0:	791a      	ldrb	r2, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 80062f2:	4291      	cmp	r1, r2
 80062f4:	bf18      	it	ne
 80062f6:	2300      	movne	r3, #0
 80062f8:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
        if (phost->pActiveClass != NULL)
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f43f aeb2 	beq.w	8006066 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4620      	mov	r0, r4
 8006306:	4798      	blx	r3
 8006308:	2800      	cmp	r0, #0
 800630a:	f47f aeac 	bne.w	8006066 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 800630e:	2306      	movs	r3, #6
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006310:	2103      	movs	r1, #3
 8006312:	4620      	mov	r0, r4
            phost->gState = HOST_CLASS_REQUEST;
 8006314:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006316:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	@ 0x4d4
 800631a:	4798      	blx	r3
 800631c:	e689      	b.n	8006032 <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 800631e:	f8d4 347c 	ldr.w	r3, [r4, #1148]	@ 0x47c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f43f ae9f 	beq.w	8006066 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	4620      	mov	r0, r4
 800632c:	4798      	blx	r3
 800632e:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8006332:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006336:	b90b      	cbnz	r3, 800633c <USBH_Process+0x364>
          phost->gState = HOST_CLASS;
 8006338:	230b      	movs	r3, #11
 800633a:	e685      	b.n	8006048 <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 800633c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006340:	2b02      	cmp	r3, #2
 8006342:	f47f ae76 	bne.w	8006032 <USBH_Process+0x5a>
 8006346:	e68e      	b.n	8006066 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8006348:	f8d4 347c 	ldr.w	r3, [r4, #1148]	@ 0x47c
 800634c:	2b00      	cmp	r3, #0
 800634e:	f43f ae70 	beq.w	8006032 <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	4620      	mov	r0, r4
 8006356:	4798      	blx	r3
 8006358:	e66b      	b.n	8006032 <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 800635a:	2500      	movs	r5, #0
      (void)DeInitStateMachine(phost);
 800635c:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 800635e:	f884 5421 	strb.w	r5, [r4, #1057]	@ 0x421
      (void)DeInitStateMachine(phost);
 8006362:	f7ff fdac 	bl	8005ebe <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 8006366:	f8d4 347c 	ldr.w	r3, [r4, #1148]	@ 0x47c
 800636a:	b123      	cbz	r3, 8006376 <USBH_Process+0x39e>
        phost->pActiveClass->DeInit(phost);
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4620      	mov	r0, r4
 8006370:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006372:	f8c4 547c 	str.w	r5, [r4, #1148]	@ 0x47c
      if (phost->pUser != NULL)
 8006376:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	@ 0x4d4
 800637a:	b113      	cbz	r3, 8006382 <USBH_Process+0x3aa>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800637c:	2105      	movs	r1, #5
 800637e:	4620      	mov	r0, r4
 8006380:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8006382:	f894 3422 	ldrb.w	r3, [r4, #1058]	@ 0x422
 8006386:	2b01      	cmp	r3, #1
 8006388:	d106      	bne.n	8006398 <USBH_Process+0x3c0>
        phost->device.is_ReEnumerated = 0U;
 800638a:	2300      	movs	r3, #0
        (void)USBH_Start(phost);
 800638c:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 800638e:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
        (void)USBH_Start(phost);
 8006392:	f7ff fe17 	bl	8005fc4 <USBH_Start>
 8006396:	e64c      	b.n	8006032 <USBH_Process+0x5a>
        (void)USBH_LL_Start(phost);
 8006398:	4620      	mov	r0, r4
 800639a:	f7fa fcad 	bl	8000cf8 <USBH_LL_Start>
 800639e:	e648      	b.n	8006032 <USBH_Process+0x5a>

080063a0 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 80063a0:	f8c0 14c4 	str.w	r1, [r0, #1220]	@ 0x4c4
}
 80063a4:	4770      	bx	lr

080063a6 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 80063a6:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	@ 0x4c4
 80063aa:	3201      	adds	r2, #1
 80063ac:	f8c0 24c4 	str.w	r2, [r0, #1220]	@ 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80063b0:	7802      	ldrb	r2, [r0, #0]
 80063b2:	2a0b      	cmp	r2, #11
 80063b4:	d104      	bne.n	80063c0 <USBH_LL_IncTimer+0x1a>
 80063b6:	f8d0 347c 	ldr.w	r3, [r0, #1148]	@ 0x47c
 80063ba:	b10b      	cbz	r3, 80063c0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	4718      	bx	r3
}
 80063c0:	4770      	bx	lr

080063c2 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f880 3423 	strb.w	r3, [r0, #1059]	@ 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 80063c8:	4770      	bx	lr

080063ca <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f880 3423 	strb.w	r3, [r0, #1059]	@ 0x423

  return;
}
 80063d0:	4770      	bx	lr

080063d2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 80063d2:	2201      	movs	r2, #1
{
 80063d4:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 80063d6:	f880 2420 	strb.w	r2, [r0, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
 80063da:	2000      	movs	r0, #0
 80063dc:	f883 0421 	strb.w	r0, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 80063e0:	f883 0422 	strb.w	r0, [r3, #1058]	@ 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80063e4:	4770      	bx	lr

080063e6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80063e6:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80063e8:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 80063ea:	2500      	movs	r5, #0
{
 80063ec:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 80063ee:	f880 3421 	strb.w	r3, [r0, #1057]	@ 0x421
  phost->device.PortEnabled = 0U;
 80063f2:	f880 5423 	strb.w	r5, [r0, #1059]	@ 0x423
  phost->device.is_connected = 0U;
 80063f6:	f880 5420 	strb.w	r5, [r0, #1056]	@ 0x420

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80063fa:	f7fa fc84 	bl	8000d06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063fe:	7921      	ldrb	r1, [r4, #4]
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fb3b 	bl	8006a7c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006406:	7961      	ldrb	r1, [r4, #5]
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fb37 	bl	8006a7c <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 800640e:	4628      	mov	r0, r5
 8006410:	bd38      	pop	{r3, r4, r5, pc}

08006412 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006412:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8006414:	7885      	ldrb	r5, [r0, #2]
{
 8006416:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8006418:	2d01      	cmp	r5, #1
 800641a:	d005      	beq.n	8006428 <USBH_CtlReq+0x16>
 800641c:	2d02      	cmp	r5, #2
 800641e:	d009      	beq.n	8006434 <USBH_CtlReq+0x22>
      /* Start a SETUP transfer */
      phost->Control.buff = buff;
      phost->Control.length = length;
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_WAIT;
      status = USBH_BUSY;
 8006420:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8006422:	4628      	mov	r0, r5
 8006424:	b002      	add	sp, #8
 8006426:	bd70      	pop	{r4, r5, r6, pc}
      phost->RequestState = CMD_WAIT;
 8006428:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 800642a:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800642c:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 800642e:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8006430:	70a3      	strb	r3, [r4, #2]
      break;
 8006432:	e7f5      	b.n	8006420 <USBH_CtlReq+0xe>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8006434:	7e03      	ldrb	r3, [r0, #24]
 8006436:	2201      	movs	r2, #1
 8006438:	3b01      	subs	r3, #1
 800643a:	2b0a      	cmp	r3, #10
 800643c:	d8f0      	bhi.n	8006420 <USBH_CtlReq+0xe>
 800643e:	e8df f003 	tbb	[pc, r3]
 8006442:	0e06      	.short	0x0e06
 8006444:	473c3329 	.word	0x473c3329
 8006448:	7f74675d 	.word	0x7f74675d
 800644c:	87          	.byte	0x87
 800644d:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800644e:	7942      	ldrb	r2, [r0, #5]
 8006450:	f100 0110 	add.w	r1, r0, #16
 8006454:	f000 fa89 	bl	800696a <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006458:	2302      	movs	r3, #2

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800645a:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800645c:	e7e0      	b.n	8006420 <USBH_CtlReq+0xe>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800645e:	7941      	ldrb	r1, [r0, #5]
 8006460:	f7fa fc99 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006464:	2801      	cmp	r0, #1
 8006466:	d10f      	bne.n	8006488 <USBH_CtlReq+0x76>
        if (phost->Control.setup.b.wLength.w != 0U)
 8006468:	8ae2      	ldrh	r2, [r4, #22]
 800646a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800646e:	b12a      	cbz	r2, 800647c <USBH_CtlReq+0x6a>
          if (direction == USB_D2H)
 8006470:	2b00      	cmp	r3, #0
 8006472:	da01      	bge.n	8006478 <USBH_CtlReq+0x66>
            phost->Control.state = CTRL_DATA_IN;
 8006474:	2303      	movs	r3, #3
 8006476:	e7f0      	b.n	800645a <USBH_CtlReq+0x48>
            phost->Control.state = CTRL_DATA_OUT;
 8006478:	2305      	movs	r3, #5
 800647a:	e7ee      	b.n	800645a <USBH_CtlReq+0x48>
          if (direction == USB_D2H)
 800647c:	2b00      	cmp	r3, #0
 800647e:	da01      	bge.n	8006484 <USBH_CtlReq+0x72>
            phost->Control.state = CTRL_STATUS_OUT;
 8006480:	2309      	movs	r3, #9
 8006482:	e7ea      	b.n	800645a <USBH_CtlReq+0x48>
            phost->Control.state = CTRL_STATUS_IN;
 8006484:	2307      	movs	r3, #7
 8006486:	e7e8      	b.n	800645a <USBH_CtlReq+0x48>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006488:	2804      	cmp	r0, #4
 800648a:	d001      	beq.n	8006490 <USBH_CtlReq+0x7e>
 800648c:	2802      	cmp	r0, #2
 800648e:	d1c7      	bne.n	8006420 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8006490:	230b      	movs	r3, #11
 8006492:	e7e2      	b.n	800645a <USBH_CtlReq+0x48>
      phost->Control.timer = (uint16_t)phost->Timer;
 8006494:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	@ 0x4c4
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006498:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 800649a:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800649c:	6881      	ldr	r1, [r0, #8]
 800649e:	7903      	ldrb	r3, [r0, #4]
 80064a0:	f000 fa8a 	bl	80069b8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80064a4:	2304      	movs	r3, #4
 80064a6:	e7d8      	b.n	800645a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80064a8:	7901      	ldrb	r1, [r0, #4]
 80064aa:	f7fa fc74 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80064ae:	2801      	cmp	r0, #1
 80064b0:	d0e6      	beq.n	8006480 <USBH_CtlReq+0x6e>
      if (URB_Status == USBH_URB_STALL)
 80064b2:	2805      	cmp	r0, #5
 80064b4:	d013      	beq.n	80064de <USBH_CtlReq+0xcc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 80064b6:	2804      	cmp	r0, #4
 80064b8:	e7e9      	b.n	800648e <USBH_CtlReq+0x7c>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80064ba:	9200      	str	r2, [sp, #0]
 80064bc:	7943      	ldrb	r3, [r0, #5]
 80064be:	8982      	ldrh	r2, [r0, #12]
 80064c0:	6881      	ldr	r1, [r0, #8]
 80064c2:	f000 fa62 	bl	800698a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80064c6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	@ 0x4c4
 80064ca:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80064cc:	2306      	movs	r3, #6
 80064ce:	e7c4      	b.n	800645a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064d0:	7941      	ldrb	r1, [r0, #5]
 80064d2:	f7fa fc60 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80064d6:	2801      	cmp	r0, #1
 80064d8:	d0d4      	beq.n	8006484 <USBH_CtlReq+0x72>
      else if (URB_Status == USBH_URB_STALL)
 80064da:	2805      	cmp	r0, #5
 80064dc:	d105      	bne.n	80064ea <USBH_CtlReq+0xd8>
{
 80064de:	2503      	movs	r5, #3
        phost->RequestState = CMD_SEND;
 80064e0:	2301      	movs	r3, #1
 80064e2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	7623      	strb	r3, [r4, #24]
 80064e8:	e79b      	b.n	8006422 <USBH_CtlReq+0x10>
      else if (URB_Status == USBH_URB_NOTREADY)
 80064ea:	2802      	cmp	r0, #2
 80064ec:	d0c4      	beq.n	8006478 <USBH_CtlReq+0x66>
        if (URB_Status == USBH_URB_ERROR)
 80064ee:	2804      	cmp	r0, #4
 80064f0:	d196      	bne.n	8006420 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 80064f2:	230b      	movs	r3, #11
 80064f4:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80064f6:	2301      	movs	r3, #1
 80064f8:	70a3      	strb	r3, [r4, #2]
  return status;
 80064fa:	e792      	b.n	8006422 <USBH_CtlReq+0x10>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80064fc:	2200      	movs	r2, #0
 80064fe:	7903      	ldrb	r3, [r0, #4]
 8006500:	4611      	mov	r1, r2
 8006502:	f000 fa59 	bl	80069b8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8006506:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	@ 0x4c4
 800650a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800650c:	2308      	movs	r3, #8
 800650e:	e7a4      	b.n	800645a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006510:	7901      	ldrb	r1, [r0, #4]
 8006512:	f7fa fc40 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006516:	2801      	cmp	r0, #1
 8006518:	d101      	bne.n	800651e <USBH_CtlReq+0x10c>
        status = USBH_OK;
 800651a:	2500      	movs	r5, #0
 800651c:	e7e0      	b.n	80064e0 <USBH_CtlReq+0xce>
      else if (URB_Status == USBH_URB_ERROR)
 800651e:	2804      	cmp	r0, #4
 8006520:	d0b6      	beq.n	8006490 <USBH_CtlReq+0x7e>
        if (URB_Status == USBH_URB_STALL)
 8006522:	2805      	cmp	r0, #5
 8006524:	f47f af7c 	bne.w	8006420 <USBH_CtlReq+0xe>
 8006528:	e7d9      	b.n	80064de <USBH_CtlReq+0xcc>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800652a:	9200      	str	r2, [sp, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	7943      	ldrb	r3, [r0, #5]
 8006530:	4611      	mov	r1, r2
 8006532:	f000 fa2a 	bl	800698a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8006536:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	@ 0x4c4
 800653a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800653c:	230a      	movs	r3, #10
 800653e:	e78c      	b.n	800645a <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006540:	7941      	ldrb	r1, [r0, #5]
 8006542:	f7fa fc28 	bl	8000d96 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006546:	2801      	cmp	r0, #1
 8006548:	d0e7      	beq.n	800651a <USBH_CtlReq+0x108>
      else if (URB_Status == USBH_URB_NOTREADY)
 800654a:	2802      	cmp	r0, #2
 800654c:	d1b3      	bne.n	80064b6 <USBH_CtlReq+0xa4>
 800654e:	e797      	b.n	8006480 <USBH_CtlReq+0x6e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006550:	7e43      	ldrb	r3, [r0, #25]
 8006552:	3301      	adds	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	7643      	strb	r3, [r0, #25]
 800655a:	d802      	bhi.n	8006562 <USBH_CtlReq+0x150>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800655c:	2301      	movs	r3, #1
 800655e:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 8006560:	e766      	b.n	8006430 <USBH_CtlReq+0x1e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 8006562:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006564:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	@ 0x4d4
 8006568:	2106      	movs	r1, #6
 800656a:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800656c:	7961      	ldrb	r1, [r4, #5]
 800656e:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 8006570:	7666      	strb	r6, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006572:	f000 fa83 	bl	8006a7c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006576:	7921      	ldrb	r1, [r4, #4]
 8006578:	4620      	mov	r0, r4
 800657a:	f000 fa7f 	bl	8006a7c <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800657e:	7026      	strb	r6, [r4, #0]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006580:	e7b9      	b.n	80064f6 <USBH_CtlReq+0xe4>

08006582 <USBH_GetDescriptor>:
{
 8006582:	b430      	push	{r4, r5}
 8006584:	460d      	mov	r5, r1
 8006586:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8006588:	7883      	ldrb	r3, [r0, #2]
{
 800658a:	4614      	mov	r4, r2
 800658c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <USBH_GetDescriptor+0x32>
    phost->Control.setup.b.wValue.w = value_idx;
 8006594:	8244      	strh	r4, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006596:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800659a:	2306      	movs	r3, #6
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800659c:	f065 057f 	orn	r5, r5, #127	@ 0x7f
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80065a0:	f5b4 7f40 	cmp.w	r4, #768	@ 0x300
    phost->Control.setup.b.wLength.w = length;
 80065a4:	82c2      	strh	r2, [r0, #22]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80065a6:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80065a8:	f240 4309 	movw	r3, #1033	@ 0x409
 80065ac:	bf18      	it	ne
 80065ae:	2300      	movne	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80065b0:	7405      	strb	r5, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80065b2:	8283      	strh	r3, [r0, #20]
}
 80065b4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80065b6:	f7ff bf2c 	b.w	8006412 <USBH_CtlReq>
	...

080065bc <USBH_Get_DevDesc>:
  if (length > sizeof(phost->device.Data))
 80065bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 80065c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	460d      	mov	r5, r1
  if (length > sizeof(phost->device.Data))
 80065c6:	d860      	bhi.n	800668a <USBH_Get_DevDesc+0xce>
  status = USBH_GetDescriptor(phost,
 80065c8:	9100      	str	r1, [sp, #0]
 80065ca:	f500 7307 	add.w	r3, r0, #540	@ 0x21c
 80065ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065d2:	2100      	movs	r1, #0
 80065d4:	f7ff ffd5 	bl	8006582 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80065d8:	2800      	cmp	r0, #0
 80065da:	d148      	bne.n	800666e <USBH_Get_DevDesc+0xb2>
  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80065dc:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80065e0:	f894 241d 	ldrb.w	r2, [r4, #1053]	@ 0x41d
  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80065e4:	f884 3426 	strb.w	r3, [r4, #1062]	@ 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80065e8:	f894 321d 	ldrb.w	r3, [r4, #541]	@ 0x21d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80065ec:	2a01      	cmp	r2, #1
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80065ee:	f884 3427 	strb.w	r3, [r4, #1063]	@ 0x427
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80065f2:	f8b4 321e 	ldrh.w	r3, [r4, #542]	@ 0x21e
 80065f6:	f8a4 3428 	strh.w	r3, [r4, #1064]	@ 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80065fa:	f894 3220 	ldrb.w	r3, [r4, #544]	@ 0x220
 80065fe:	f884 342a 	strb.w	r3, [r4, #1066]	@ 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006602:	f894 3221 	ldrb.w	r3, [r4, #545]	@ 0x221
 8006606:	f884 342b 	strb.w	r3, [r4, #1067]	@ 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800660a:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 800660e:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006612:	f894 3223 	ldrb.w	r3, [r4, #547]	@ 0x223
 8006616:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800661a:	d830      	bhi.n	800667e <USBH_Get_DevDesc+0xc2>
    switch (dev_desc->bMaxPacketSize)
 800661c:	2b20      	cmp	r3, #32
 800661e:	d828      	bhi.n	8006672 <USBH_Get_DevDesc+0xb6>
 8006620:	2b07      	cmp	r3, #7
 8006622:	d928      	bls.n	8006676 <USBH_Get_DevDesc+0xba>
 8006624:	3b08      	subs	r3, #8
 8006626:	4a1a      	ldr	r2, [pc, #104]	@ (8006690 <USBH_Get_DevDesc+0xd4>)
 8006628:	b2db      	uxtb	r3, r3
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	07db      	lsls	r3, r3, #31
 8006630:	d521      	bpl.n	8006676 <USBH_Get_DevDesc+0xba>
  if (length > 8U)
 8006632:	2d08      	cmp	r5, #8
 8006634:	d91b      	bls.n	800666e <USBH_Get_DevDesc+0xb2>
    dev_desc->idVendor           = LE16(buf +  8U);
 8006636:	f8b4 3224 	ldrh.w	r3, [r4, #548]	@ 0x224
 800663a:	f8a4 342e 	strh.w	r3, [r4, #1070]	@ 0x42e
    dev_desc->idProduct          = LE16(buf + 10U);
 800663e:	f8b4 3226 	ldrh.w	r3, [r4, #550]	@ 0x226
 8006642:	f8a4 3430 	strh.w	r3, [r4, #1072]	@ 0x430
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8006646:	f8b4 3228 	ldrh.w	r3, [r4, #552]	@ 0x228
 800664a:	f8a4 3432 	strh.w	r3, [r4, #1074]	@ 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800664e:	f894 322a 	ldrb.w	r3, [r4, #554]	@ 0x22a
 8006652:	f884 3434 	strb.w	r3, [r4, #1076]	@ 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8006656:	f894 322b 	ldrb.w	r3, [r4, #555]	@ 0x22b
 800665a:	f884 3435 	strb.w	r3, [r4, #1077]	@ 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800665e:	f894 322c 	ldrb.w	r3, [r4, #556]	@ 0x22c
 8006662:	f884 3436 	strb.w	r3, [r4, #1078]	@ 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8006666:	f894 322d 	ldrb.w	r3, [r4, #557]	@ 0x22d
 800666a:	f884 3437 	strb.w	r3, [r4, #1079]	@ 0x437
}
 800666e:	b003      	add	sp, #12
 8006670:	bd30      	pop	{r4, r5, pc}
    switch (dev_desc->bMaxPacketSize)
 8006672:	2b40      	cmp	r3, #64	@ 0x40
    if (dev_desc->bMaxPacketSize != 8U)
 8006674:	d0dd      	beq.n	8006632 <USBH_Get_DevDesc+0x76>
      dev_desc->bMaxPacketSize = 8U;
 8006676:	2308      	movs	r3, #8
 8006678:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
 800667c:	e7d9      	b.n	8006632 <USBH_Get_DevDesc+0x76>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800667e:	2a02      	cmp	r2, #2
 8006680:	d101      	bne.n	8006686 <USBH_Get_DevDesc+0xca>
    if (dev_desc->bMaxPacketSize != 8U)
 8006682:	2b08      	cmp	r3, #8
 8006684:	e7f6      	b.n	8006674 <USBH_Get_DevDesc+0xb8>
    status = USBH_NOT_SUPPORTED;
 8006686:	2003      	movs	r0, #3
 8006688:	e7d3      	b.n	8006632 <USBH_Get_DevDesc+0x76>
    return USBH_NOT_SUPPORTED;
 800668a:	2003      	movs	r0, #3
 800668c:	e7ef      	b.n	800666e <USBH_Get_DevDesc+0xb2>
 800668e:	bf00      	nop
 8006690:	01000101 	.word	0x01000101

08006694 <USBH_Get_CfgDesc>:
  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006694:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4605      	mov	r5, r0
 800669e:	b087      	sub	sp, #28
 80066a0:	460e      	mov	r6, r1
  if (length > sizeof(phost->device.CfgDesc_Raw))
 80066a2:	d903      	bls.n	80066ac <USBH_Get_CfgDesc+0x18>
    return USBH_NOT_SUPPORTED;
 80066a4:	2003      	movs	r0, #3
}
 80066a6:	b007      	add	sp, #28
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80066ac:	f100 041c 	add.w	r4, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80066b0:	9100      	str	r1, [sp, #0]
 80066b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066b6:	2100      	movs	r1, #0
 80066b8:	4623      	mov	r3, r4
 80066ba:	f7ff ff62 	bl	8006582 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80066be:	2800      	cmp	r0, #0
 80066c0:	d1f1      	bne.n	80066a6 <USBH_Get_CfgDesc+0x12>
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80066c2:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80066c4:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80066c8:	2b09      	cmp	r3, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80066ca:	f895 b020 	ldrb.w	fp, [r5, #32]
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80066ce:	bf18      	it	ne
 80066d0:	2309      	movne	r3, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80066d2:	f885 b43c 	strb.w	fp, [r5, #1084]	@ 0x43c
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80066d6:	bf18      	it	ne
 80066d8:	772b      	strbne	r3, [r5, #28]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80066da:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80066de:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80066e0:	bf28      	it	cs
 80066e2:	f44f 7800 	movcs.w	r8, #512	@ 0x200
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80066e6:	2e09      	cmp	r6, #9
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80066e8:	f885 3438 	strb.w	r3, [r5, #1080]	@ 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80066ec:	7f6b      	ldrb	r3, [r5, #29]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80066ee:	f8a5 843a 	strh.w	r8, [r5, #1082]	@ 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80066f2:	f885 3439 	strb.w	r3, [r5, #1081]	@ 0x439
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80066f6:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80066fa:	f885 343d 	strb.w	r3, [r5, #1085]	@ 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80066fe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8006702:	f885 343e 	strb.w	r3, [r5, #1086]	@ 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006706:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 800670a:	f885 343f 	strb.w	r3, [r5, #1087]	@ 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800670e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8006712:	f885 3440 	strb.w	r3, [r5, #1088]	@ 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006716:	f240 80c5 	bls.w	80068a4 <USBH_Get_CfgDesc+0x210>
  USBH_StatusTypeDef           status = USBH_OK;
 800671a:	2000      	movs	r0, #0
 800671c:	462a      	mov	r2, r5
    ptr = USB_LEN_CFG_DESC;
 800671e:	2109      	movs	r1, #9
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006720:	4684      	mov	ip, r0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006722:	f1bc 0f02 	cmp.w	ip, #2
 8006726:	d0be      	beq.n	80066a6 <USBH_Get_CfgDesc+0x12>
 8006728:	4588      	cmp	r8, r1
 800672a:	d808      	bhi.n	800673e <USBH_Get_CfgDesc+0xaa>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800672c:	465b      	mov	r3, fp
 800672e:	fa5f fc8c 	uxtb.w	ip, ip
 8006732:	2b02      	cmp	r3, #2
 8006734:	bf28      	it	cs
 8006736:	2302      	movcs	r3, #2
 8006738:	459c      	cmp	ip, r3
 800673a:	d2b4      	bcs.n	80066a6 <USBH_Get_CfgDesc+0x12>
 800673c:	e7b2      	b.n	80066a4 <USBH_Get_CfgDesc+0x10>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800673e:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006740:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006742:	4419      	add	r1, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006744:	7863      	ldrb	r3, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006746:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006748:	2b04      	cmp	r3, #4
 800674a:	d1ea      	bne.n	8006722 <USBH_Get_CfgDesc+0x8e>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800674c:	7823      	ldrb	r3, [r4, #0]
        ep_ix = 0U;
 800674e:	f04f 0e00 	mov.w	lr, #0
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006752:	2b09      	cmp	r3, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006754:	bf1c      	itt	ne
 8006756:	2309      	movne	r3, #9
 8006758:	7023      	strbne	r3, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800675a:	7823      	ldrb	r3, [r4, #0]
 800675c:	f882 3442 	strb.w	r3, [r2, #1090]	@ 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8006760:	7863      	ldrb	r3, [r4, #1]
 8006762:	f882 3443 	strb.w	r3, [r2, #1091]	@ 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8006766:	78a3      	ldrb	r3, [r4, #2]
 8006768:	f882 3444 	strb.w	r3, [r2, #1092]	@ 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800676c:	78e3      	ldrb	r3, [r4, #3]
 800676e:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8006772:	7923      	ldrb	r3, [r4, #4]
 8006774:	2b02      	cmp	r3, #2
 8006776:	bf28      	it	cs
 8006778:	2302      	movcs	r3, #2
 800677a:	f882 3446 	strb.w	r3, [r2, #1094]	@ 0x446
 800677e:	9302      	str	r3, [sp, #8]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8006780:	7963      	ldrb	r3, [r4, #5]
 8006782:	f882 3447 	strb.w	r3, [r2, #1095]	@ 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8006786:	f894 a006 	ldrb.w	sl, [r4, #6]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800678a:	9303      	str	r3, [sp, #12]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800678c:	f882 a448 	strb.w	sl, [r2, #1096]	@ 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8006790:	79e3      	ldrb	r3, [r4, #7]
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	f882 3449 	strb.w	r3, [r2, #1097]	@ 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8006798:	7a23      	ldrb	r3, [r4, #8]
 800679a:	f882 344a 	strb.w	r3, [r2, #1098]	@ 0x44a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800679e:	231a      	movs	r3, #26
 80067a0:	fb03 f30c 	mul.w	r3, r3, ip
 80067a4:	9305      	str	r3, [sp, #20]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067a6:	9b02      	ldr	r3, [sp, #8]
 80067a8:	459e      	cmp	lr, r3
 80067aa:	d277      	bcs.n	800689c <USBH_Get_CfgDesc+0x208>
 80067ac:	4588      	cmp	r8, r1
 80067ae:	f67f af79 	bls.w	80066a4 <USBH_Get_CfgDesc+0x10>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80067b2:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80067b4:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80067b6:	4419      	add	r1, r3
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067b8:	7863      	ldrb	r3, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80067ba:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067bc:	2b05      	cmp	r3, #5
 80067be:	d1f2      	bne.n	80067a6 <USBH_Get_CfgDesc+0x112>
            if ((pif->bInterfaceClass == 0x01U) &&
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d13a      	bne.n	800683c <USBH_Get_CfgDesc+0x1a8>
 80067c6:	f1aa 0302 	sub.w	r3, sl, #2
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d836      	bhi.n	800683c <USBH_Get_CfgDesc+0x1a8>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	b923      	cbnz	r3, 80067dc <USBH_Get_CfgDesc+0x148>
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d001      	beq.n	80067dc <USBH_Get_CfgDesc+0x148>
                pdesc->bLength = 0x09U;
 80067d8:	2309      	movs	r3, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80067da:	7023      	strb	r3, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80067dc:	9e05      	ldr	r6, [sp, #20]
 80067de:	f10e 0001 	add.w	r0, lr, #1
 80067e2:	7823      	ldrb	r3, [r4, #0]
 80067e4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 80067e8:	4428      	add	r0, r5
 80067ea:	f880 3444 	strb.w	r3, [r0, #1092]	@ 0x444
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80067ee:	7863      	ldrb	r3, [r4, #1]
 80067f0:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80067f4:	78a3      	ldrb	r3, [r4, #2]
 80067f6:	f880 3446 	strb.w	r3, [r0, #1094]	@ 0x446
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80067fa:	78e3      	ldrb	r3, [r4, #3]
 80067fc:	f880 3447 	strb.w	r3, [r0, #1095]	@ 0x447
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8006800:	88a6      	ldrh	r6, [r4, #4]
 8006802:	f8a0 6448 	strh.w	r6, [r0, #1096]	@ 0x448
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8006806:	79a7      	ldrb	r7, [r4, #6]
 8006808:	f880 744a 	strb.w	r7, [r0, #1098]	@ 0x44a
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800680c:	1e70      	subs	r0, r6, #1
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800680e:	f895 941d 	ldrb.w	r9, [r5, #1053]	@ 0x41d
    status = USBH_NOT_SUPPORTED;
 8006812:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8006816:	bf34      	ite	cc
 8006818:	2000      	movcc	r0, #0
 800681a:	2003      	movcs	r0, #3
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800681c:	f1b9 0f00 	cmp.w	r9, #0
 8006820:	d117      	bne.n	8006852 <USBH_Get_CfgDesc+0x1be>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d10b      	bne.n	8006842 <USBH_Get_CfgDesc+0x1ae>
        status = USBH_NOT_SUPPORTED;
 800682a:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800682e:	bf88      	it	hi
 8006830:	2003      	movhi	r0, #3
            ep_ix++;
 8006832:	f10e 0e01 	add.w	lr, lr, #1
 8006836:	fa5f fe8e 	uxtb.w	lr, lr
 800683a:	e7b4      	b.n	80067a6 <USBH_Get_CfgDesc+0x112>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800683c:	f04f 0307 	mov.w	r3, #7
 8006840:	e7cb      	b.n	80067da <USBH_Get_CfgDesc+0x146>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006842:	b91b      	cbnz	r3, 800684c <USBH_Get_CfgDesc+0x1b8>
        status = USBH_NOT_SUPPORTED;
 8006844:	2e41      	cmp	r6, #65	@ 0x41
 8006846:	bf28      	it	cs
 8006848:	2003      	movcs	r0, #3
 800684a:	e7f2      	b.n	8006832 <USBH_Get_CfgDesc+0x19e>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800684c:	3f01      	subs	r7, #1
        status = USBH_NOT_SUPPORTED;
 800684e:	2f0f      	cmp	r7, #15
 8006850:	e7ed      	b.n	800682e <USBH_Get_CfgDesc+0x19a>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8006852:	f1b9 0f01 	cmp.w	r9, #1
 8006856:	d110      	bne.n	800687a <USBH_Get_CfgDesc+0x1e6>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006858:	f013 0f01 	tst.w	r3, #1
 800685c:	d0f2      	beq.n	8006844 <USBH_Get_CfgDesc+0x1b0>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d104      	bne.n	8006870 <USBH_Get_CfgDesc+0x1dc>
      if ((ep_descriptor->bInterval == 0U) ||
 8006866:	3f01      	subs	r7, #1
 8006868:	2f0f      	cmp	r7, #15
 800686a:	d9eb      	bls.n	8006844 <USBH_Get_CfgDesc+0x1b0>
        status = USBH_NOT_SUPPORTED;
 800686c:	2003      	movs	r0, #3
 800686e:	e7e0      	b.n	8006832 <USBH_Get_CfgDesc+0x19e>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8006870:	2f00      	cmp	r7, #0
 8006872:	d0fb      	beq.n	800686c <USBH_Get_CfgDesc+0x1d8>
        status = USBH_NOT_SUPPORTED;
 8006874:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006878:	e7e5      	b.n	8006846 <USBH_Get_CfgDesc+0x1b2>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800687a:	f1b9 0f02 	cmp.w	r9, #2
 800687e:	d1f5      	bne.n	800686c <USBH_Get_CfgDesc+0x1d8>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006880:	f013 0303 	ands.w	r3, r3, #3
 8006884:	d103      	bne.n	800688e <USBH_Get_CfgDesc+0x1fa>
        status = USBH_NOT_SUPPORTED;
 8006886:	2e08      	cmp	r6, #8
 8006888:	bf18      	it	ne
 800688a:	2003      	movne	r0, #3
 800688c:	e7d1      	b.n	8006832 <USBH_Get_CfgDesc+0x19e>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800688e:	2b03      	cmp	r3, #3
 8006890:	d1ec      	bne.n	800686c <USBH_Get_CfgDesc+0x1d8>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8006892:	b10f      	cbz	r7, 8006898 <USBH_Get_CfgDesc+0x204>
        status = USBH_NOT_SUPPORTED;
 8006894:	2e09      	cmp	r6, #9
 8006896:	e7d6      	b.n	8006846 <USBH_Get_CfgDesc+0x1b2>
 8006898:	4618      	mov	r0, r3
 800689a:	e7ca      	b.n	8006832 <USBH_Get_CfgDesc+0x19e>
        if_ix++;
 800689c:	f10c 0c01 	add.w	ip, ip, #1
 80068a0:	321a      	adds	r2, #26
 80068a2:	e73e      	b.n	8006722 <USBH_Get_CfgDesc+0x8e>
  USBH_StatusTypeDef           status = USBH_OK;
 80068a4:	2000      	movs	r0, #0
 80068a6:	e6fe      	b.n	80066a6 <USBH_Get_CfgDesc+0x12>

080068a8 <USBH_Get_StringDesc>:
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
{
 80068ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	4615      	mov	r5, r2
 80068b2:	461e      	mov	r6, r3
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80068b4:	d823      	bhi.n	80068fe <USBH_Get_StringDesc+0x56>
 80068b6:	b312      	cbz	r2, 80068fe <USBH_Get_StringDesc+0x56>
  status = USBH_GetDescriptor(phost,
 80068b8:	f441 7240 	orr.w	r2, r1, #768	@ 0x300
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2100      	movs	r1, #0
 80068c0:	f500 7307 	add.w	r3, r0, #540	@ 0x21c
 80068c4:	f7ff fe5d 	bl	8006582 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80068c8:	b990      	cbnz	r0, 80068f0 <USBH_Get_StringDesc+0x48>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068ca:	f894 321d 	ldrb.w	r3, [r4, #541]	@ 0x21d
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d10e      	bne.n	80068f0 <USBH_Get_StringDesc+0x48>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068d2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
 80068d6:	4602      	mov	r2, r0
      *pdest =  psrc[idx];
 80068d8:	f204 241e 	addw	r4, r4, #542	@ 0x21e
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068dc:	3b02      	subs	r3, #2
 80068de:	42b3      	cmp	r3, r6
 80068e0:	bf28      	it	cs
 80068e2:	4633      	movcs	r3, r6
 80068e4:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80068e6:	b291      	uxth	r1, r2
 80068e8:	428b      	cmp	r3, r1
 80068ea:	d803      	bhi.n	80068f4 <USBH_Get_StringDesc+0x4c>
    *pdest = 0U; /* mark end of string */
 80068ec:	2300      	movs	r3, #0
 80068ee:	702b      	strb	r3, [r5, #0]
}
 80068f0:	b002      	add	sp, #8
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
      *pdest =  psrc[idx];
 80068f4:	5ca1      	ldrb	r1, [r4, r2]
 80068f6:	3202      	adds	r2, #2
 80068f8:	f805 1b01 	strb.w	r1, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80068fc:	e7f3      	b.n	80068e6 <USBH_Get_StringDesc+0x3e>
    return USBH_NOT_SUPPORTED;
 80068fe:	2003      	movs	r0, #3
 8006900:	e7f6      	b.n	80068f0 <USBH_Get_StringDesc+0x48>

08006902 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8006902:	7883      	ldrb	r3, [r0, #2]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d105      	bne.n	8006914 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006908:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800690c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800690e:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8006914:	2200      	movs	r2, #0
 8006916:	4611      	mov	r1, r2
 8006918:	f7ff bd7b 	b.w	8006412 <USBH_CtlReq>

0800691c <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 800691c:	7883      	ldrb	r3, [r0, #2]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006922:	f44f 6310 	mov.w	r3, #2304	@ 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006926:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006928:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 800692e:	2200      	movs	r2, #0
 8006930:	4611      	mov	r1, r2
 8006932:	f7ff bd6e 	b.w	8006412 <USBH_CtlReq>

08006936 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8006936:	7883      	ldrb	r3, [r0, #2]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800693c:	f44f 7340 	mov.w	r3, #768	@ 0x300
    phost->Control.setup.b.wValue.w = wValue;
 8006940:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006942:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8006948:	2200      	movs	r2, #0
 800694a:	4611      	mov	r1, r2
 800694c:	f7ff bd61 	b.w	8006412 <USBH_CtlReq>

08006950 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8006950:	7883      	ldrb	r3, [r0, #2]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006956:	f44f 7381 	mov.w	r3, #258	@ 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 800695a:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800695c:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 8006962:	2200      	movs	r2, #0
 8006964:	4611      	mov	r1, r2
 8006966:	f7ff bd54 	b.w	8006412 <USBH_CtlReq>

0800696a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800696a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800696c:	2400      	movs	r4, #0
{
 800696e:	460b      	mov	r3, r1
 8006970:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006972:	2208      	movs	r2, #8
 8006974:	e9cd 4300 	strd	r4, r3, [sp]
 8006978:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800697c:	4623      	mov	r3, r4
 800697e:	4622      	mov	r2, r4
 8006980:	f7fa f9f6 	bl	8000d70 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8006984:	4620      	mov	r0, r4
 8006986:	b004      	add	sp, #16
 8006988:	bd10      	pop	{r4, pc}

0800698a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800698a:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800698c:	f890 541d 	ldrb.w	r5, [r0, #1053]	@ 0x41d
{
 8006990:	b085      	sub	sp, #20
 8006992:	460c      	mov	r4, r1
 8006994:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 8006996:	2d00      	cmp	r5, #0
{
 8006998:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800699c:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 800699e:	bf18      	it	ne
 80069a0:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069a6:	2301      	movs	r3, #1
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	461a      	mov	r2, r3
 80069ae:	f7fa f9df 	bl	8000d70 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80069b2:	2000      	movs	r0, #0
 80069b4:	b005      	add	sp, #20
 80069b6:	bd30      	pop	{r4, r5, pc}

080069b8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80069b8:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069ba:	2400      	movs	r4, #0
{
 80069bc:	b085      	sub	sp, #20
 80069be:	460d      	mov	r5, r1
 80069c0:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069c2:	4623      	mov	r3, r4
 80069c4:	9501      	str	r5, [sp, #4]
 80069c6:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80069ca:	2201      	movs	r2, #1
 80069cc:	9200      	str	r2, [sp, #0]
 80069ce:	f7fa f9cf 	bl	8000d70 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80069d2:	4620      	mov	r0, r4
 80069d4:	b005      	add	sp, #20
 80069d6:	bd30      	pop	{r4, r5, pc}

080069d8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80069d8:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 80069da:	f890 541d 	ldrb.w	r5, [r0, #1053]	@ 0x41d
{
 80069de:	b085      	sub	sp, #20
 80069e0:	460c      	mov	r4, r1
 80069e2:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 80069e4:	2d00      	cmp	r5, #0
{
 80069e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069ea:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 80069ec:	bf18      	it	ne
 80069ee:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069f4:	2301      	movs	r3, #1
 80069f6:	2200      	movs	r2, #0
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2302      	movs	r3, #2
 80069fc:	f7fa f9b8 	bl	8000d70 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8006a00:	2000      	movs	r0, #0
 8006a02:	b005      	add	sp, #20
 8006a04:	bd30      	pop	{r4, r5, pc}

08006a06 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006a06:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a08:	2400      	movs	r4, #0
{
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a10:	2302      	movs	r3, #2
 8006a12:	9501      	str	r5, [sp, #4]
 8006a14:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	9200      	str	r2, [sp, #0]
 8006a1c:	f7fa f9a8 	bl	8000d70 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8006a20:	4620      	mov	r0, r4
 8006a22:	b005      	add	sp, #20
 8006a24:	bd30      	pop	{r4, r5, pc}

08006a26 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006a28:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006a2c:	9402      	str	r4, [sp, #8]
 8006a2e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006a32:	9401      	str	r4, [sp, #4]
 8006a34:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006a38:	9400      	str	r4, [sp, #0]
 8006a3a:	f7fa f981 	bl	8000d40 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8006a3e:	2000      	movs	r0, #0
 8006a40:	b004      	add	sp, #16
 8006a42:	bd10      	pop	{r4, pc}

08006a44 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006a44:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006a46:	f7fa f98c 	bl	8000d62 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	bd08      	pop	{r3, pc}

08006a4e <USBH_AllocPipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006a4e:	f500 6290 	add.w	r2, r0, #1152	@ 0x480
{
 8006a52:	2300      	movs	r3, #0
 8006a54:	b510      	push	{r4, lr}
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006a56:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8006a5a:	0424      	lsls	r4, r4, #16
 8006a5c:	d408      	bmi.n	8006a70 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006a5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006a62:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
    {
      return (uint16_t)idx;
 8006a66:	b2da      	uxtb	r2, r3
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006a68:	f8c0 1484 	str.w	r1, [r0, #1156]	@ 0x484
}
 8006a6c:	b2d0      	uxtb	r0, r2
 8006a6e:	bd10      	pop	{r4, pc}
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006a70:	3301      	adds	r3, #1
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d1ef      	bne.n	8006a56 <USBH_AllocPipe+0x8>
 8006a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a7a:	e7f7      	b.n	8006a6c <USBH_AllocPipe+0x1e>

08006a7c <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8006a7c:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 8006a7e:	bf9f      	itttt	ls
 8006a80:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
 8006a84:	f8d0 3484 	ldrls.w	r3, [r0, #1156]	@ 0x484
 8006a88:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8006a8c:	f8c0 3484 	strls.w	r3, [r0, #1156]	@ 0x484
}
 8006a90:	2000      	movs	r0, #0
 8006a92:	4770      	bx	lr

08006a94 <malloc>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	@ (8006aa0 <malloc+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f000 b82d 	b.w	8006af8 <_malloc_r>
 8006a9e:	bf00      	nop
 8006aa0:	20000048 	.word	0x20000048

08006aa4 <free>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	@ (8006ab0 <free+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f000 b923 	b.w	8006cf4 <_free_r>
 8006aae:	bf00      	nop
 8006ab0:	20000048 	.word	0x20000048

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8006af4 <sbrk_aligned+0x40>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f000 f8ce 	bl	8006c60 <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f8c9 	bl	8006c60 <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d103      	bne.n	8006ada <sbrk_aligned+0x26>
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0f8      	beq.n	8006ad6 <sbrk_aligned+0x22>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 f8ba 	bl	8006c60 <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1f2      	bne.n	8006ad6 <sbrk_aligned+0x22>
 8006af0:	e7ef      	b.n	8006ad2 <sbrk_aligned+0x1e>
 8006af2:	bf00      	nop
 8006af4:	20003894 	.word	0x20003894

08006af8 <_malloc_r>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d904      	bls.n	8006b1e <_malloc_r+0x26>
 8006b14:	230c      	movs	r3, #12
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf4 <_malloc_r+0xfc>
 8006b22:	f000 f869 	bl	8006bf8 <__malloc_lock>
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	bb44      	cbnz	r4, 8006b80 <_malloc_r+0x88>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbf 	bl	8006ab4 <sbrk_aligned>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d158      	bne.n	8006bee <_malloc_r+0xf6>
 8006b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b40:	4627      	mov	r7, r4
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d143      	bne.n	8006bce <_malloc_r+0xd6>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d04b      	beq.n	8006be2 <_malloc_r+0xea>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	eb04 0903 	add.w	r9, r4, r3
 8006b54:	f000 f884 	bl	8006c60 <_sbrk_r>
 8006b58:	4581      	cmp	r9, r0
 8006b5a:	d142      	bne.n	8006be2 <_malloc_r+0xea>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	1a6d      	subs	r5, r5, r1
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa6 	bl	8006ab4 <sbrk_aligned>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d03a      	beq.n	8006be2 <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	442b      	add	r3, r5
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	bb62      	cbnz	r2, 8006bd4 <_malloc_r+0xdc>
 8006b7a:	f8c8 7000 	str.w	r7, [r8]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xa8>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d420      	bmi.n	8006bc8 <_malloc_r+0xd0>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xc2>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f82f 	bl	8006c04 <__malloc_unlock>
 8006ba6:	f104 000b 	add.w	r0, r4, #11
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	f020 0007 	bic.w	r0, r0, #7
 8006bb0:	1ac2      	subs	r2, r0, r3
 8006bb2:	bf1c      	itt	ne
 8006bb4:	1a1b      	subne	r3, r3, r0
 8006bb6:	50a3      	strne	r3, [r4, r2]
 8006bb8:	e7af      	b.n	8006b1a <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f8c8 2000 	streq.w	r2, [r8]
 8006bc4:	605a      	strne	r2, [r3, #4]
 8006bc6:	e7eb      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	6864      	ldr	r4, [r4, #4]
 8006bcc:	e7ae      	b.n	8006b2c <_malloc_r+0x34>
 8006bce:	463c      	mov	r4, r7
 8006bd0:	687f      	ldr	r7, [r7, #4]
 8006bd2:	e7b6      	b.n	8006b42 <_malloc_r+0x4a>
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d1fb      	bne.n	8006bd4 <_malloc_r+0xdc>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa8>
 8006be2:	230c      	movs	r3, #12
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f80c 	bl	8006c04 <__malloc_unlock>
 8006bec:	e794      	b.n	8006b18 <_malloc_r+0x20>
 8006bee:	6005      	str	r5, [r0, #0]
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bf2:	bf00      	nop
 8006bf4:	20003898 	.word	0x20003898

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f000 b86b 	b.w	8006cd4 <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	200039d8 	.word	0x200039d8

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f000 b866 	b.w	8006cd6 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	200039d8 	.word	0x200039d8

08006c10 <siprintf>:
 8006c10:	b40e      	push	{r1, r2, r3}
 8006c12:	b500      	push	{lr}
 8006c14:	b09c      	sub	sp, #112	@ 0x70
 8006c16:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c18:	9002      	str	r0, [sp, #8]
 8006c1a:	9006      	str	r0, [sp, #24]
 8006c1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c20:	4809      	ldr	r0, [pc, #36]	@ (8006c48 <siprintf+0x38>)
 8006c22:	9107      	str	r1, [sp, #28]
 8006c24:	9104      	str	r1, [sp, #16]
 8006c26:	4909      	ldr	r1, [pc, #36]	@ (8006c4c <siprintf+0x3c>)
 8006c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c2c:	9105      	str	r1, [sp, #20]
 8006c2e:	6800      	ldr	r0, [r0, #0]
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	a902      	add	r1, sp, #8
 8006c34:	f000 f904 	bl	8006e40 <_svfiprintf_r>
 8006c38:	9b02      	ldr	r3, [sp, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	b01c      	add	sp, #112	@ 0x70
 8006c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c44:	b003      	add	sp, #12
 8006c46:	4770      	bx	lr
 8006c48:	20000048 	.word	0x20000048
 8006c4c:	ffff0208 	.word	0xffff0208

08006c50 <memset>:
 8006c50:	4402      	add	r2, r0
 8006c52:	4603      	mov	r3, r0
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d100      	bne.n	8006c5a <memset+0xa>
 8006c58:	4770      	bx	lr
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	e7f9      	b.n	8006c54 <memset+0x4>

08006c60 <_sbrk_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	@ (8006c7c <_sbrk_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7f9 fce2 	bl	8000634 <_sbrk>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_sbrk_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_sbrk_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200039d4 	.word	0x200039d4

08006c80 <__errno>:
 8006c80:	4b01      	ldr	r3, [pc, #4]	@ (8006c88 <__errno+0x8>)
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000048 	.word	0x20000048

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006cc4 <__libc_init_array+0x38>)
 8006c90:	4c0d      	ldr	r4, [pc, #52]	@ (8006cc8 <__libc_init_array+0x3c>)
 8006c92:	1b64      	subs	r4, r4, r5
 8006c94:	10a4      	asrs	r4, r4, #2
 8006c96:	2600      	movs	r6, #0
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006ccc <__libc_init_array+0x40>)
 8006c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006cd0 <__libc_init_array+0x44>)
 8006ca0:	f000 fba8 	bl	80073f4 <_init>
 8006ca4:	1b64      	subs	r4, r4, r5
 8006ca6:	10a4      	asrs	r4, r4, #2
 8006ca8:	2600      	movs	r6, #0
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	080079e8 	.word	0x080079e8
 8006cc8:	080079e8 	.word	0x080079e8
 8006ccc:	080079e8 	.word	0x080079e8
 8006cd0:	080079ec 	.word	0x080079ec

08006cd4 <__retarget_lock_acquire_recursive>:
 8006cd4:	4770      	bx	lr

08006cd6 <__retarget_lock_release_recursive>:
 8006cd6:	4770      	bx	lr

08006cd8 <memcpy>:
 8006cd8:	440a      	add	r2, r1
 8006cda:	4291      	cmp	r1, r2
 8006cdc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ce0:	d100      	bne.n	8006ce4 <memcpy+0xc>
 8006ce2:	4770      	bx	lr
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cee:	4291      	cmp	r1, r2
 8006cf0:	d1f9      	bne.n	8006ce6 <memcpy+0xe>
 8006cf2:	bd10      	pop	{r4, pc}

08006cf4 <_free_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d041      	beq.n	8006d80 <_free_r+0x8c>
 8006cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d00:	1f0c      	subs	r4, r1, #4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bfb8      	it	lt
 8006d06:	18e4      	addlt	r4, r4, r3
 8006d08:	f7ff ff76 	bl	8006bf8 <__malloc_lock>
 8006d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <_free_r+0x90>)
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	b933      	cbnz	r3, 8006d20 <_free_r+0x2c>
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	6014      	str	r4, [r2, #0]
 8006d16:	4628      	mov	r0, r5
 8006d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d1c:	f7ff bf72 	b.w	8006c04 <__malloc_unlock>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d908      	bls.n	8006d36 <_free_r+0x42>
 8006d24:	6820      	ldr	r0, [r4, #0]
 8006d26:	1821      	adds	r1, r4, r0
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1809      	addeq	r1, r1, r0
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	e7ed      	b.n	8006d12 <_free_r+0x1e>
 8006d36:	461a      	mov	r2, r3
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b10b      	cbz	r3, 8006d40 <_free_r+0x4c>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d9fa      	bls.n	8006d36 <_free_r+0x42>
 8006d40:	6811      	ldr	r1, [r2, #0]
 8006d42:	1850      	adds	r0, r2, r1
 8006d44:	42a0      	cmp	r0, r4
 8006d46:	d10b      	bne.n	8006d60 <_free_r+0x6c>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	4401      	add	r1, r0
 8006d4c:	1850      	adds	r0, r2, r1
 8006d4e:	4283      	cmp	r3, r0
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	d1e0      	bne.n	8006d16 <_free_r+0x22>
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	6053      	str	r3, [r2, #4]
 8006d5a:	4408      	add	r0, r1
 8006d5c:	6010      	str	r0, [r2, #0]
 8006d5e:	e7da      	b.n	8006d16 <_free_r+0x22>
 8006d60:	d902      	bls.n	8006d68 <_free_r+0x74>
 8006d62:	230c      	movs	r3, #12
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	e7d6      	b.n	8006d16 <_free_r+0x22>
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	1821      	adds	r1, r4, r0
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf04      	itt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	bf04      	itt	eq
 8006d78:	1809      	addeq	r1, r1, r0
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6054      	str	r4, [r2, #4]
 8006d7e:	e7ca      	b.n	8006d16 <_free_r+0x22>
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20003898 	.word	0x20003898

08006d88 <__ssputs_r>:
 8006d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	688e      	ldr	r6, [r1, #8]
 8006d8e:	461f      	mov	r7, r3
 8006d90:	42be      	cmp	r6, r7
 8006d92:	680b      	ldr	r3, [r1, #0]
 8006d94:	4682      	mov	sl, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	4690      	mov	r8, r2
 8006d9a:	d82d      	bhi.n	8006df8 <__ssputs_r+0x70>
 8006d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006da4:	d026      	beq.n	8006df4 <__ssputs_r+0x6c>
 8006da6:	6965      	ldr	r5, [r4, #20]
 8006da8:	6909      	ldr	r1, [r1, #16]
 8006daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dae:	eba3 0901 	sub.w	r9, r3, r1
 8006db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006db6:	1c7b      	adds	r3, r7, #1
 8006db8:	444b      	add	r3, r9
 8006dba:	106d      	asrs	r5, r5, #1
 8006dbc:	429d      	cmp	r5, r3
 8006dbe:	bf38      	it	cc
 8006dc0:	461d      	movcc	r5, r3
 8006dc2:	0553      	lsls	r3, r2, #21
 8006dc4:	d527      	bpl.n	8006e16 <__ssputs_r+0x8e>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7ff fe96 	bl	8006af8 <_malloc_r>
 8006dcc:	4606      	mov	r6, r0
 8006dce:	b360      	cbz	r0, 8006e2a <__ssputs_r+0xa2>
 8006dd0:	6921      	ldr	r1, [r4, #16]
 8006dd2:	464a      	mov	r2, r9
 8006dd4:	f7ff ff80 	bl	8006cd8 <memcpy>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	6126      	str	r6, [r4, #16]
 8006de6:	6165      	str	r5, [r4, #20]
 8006de8:	444e      	add	r6, r9
 8006dea:	eba5 0509 	sub.w	r5, r5, r9
 8006dee:	6026      	str	r6, [r4, #0]
 8006df0:	60a5      	str	r5, [r4, #8]
 8006df2:	463e      	mov	r6, r7
 8006df4:	42be      	cmp	r6, r7
 8006df6:	d900      	bls.n	8006dfa <__ssputs_r+0x72>
 8006df8:	463e      	mov	r6, r7
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	4641      	mov	r1, r8
 8006e00:	f000 faa8 	bl	8007354 <memmove>
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	1b9b      	subs	r3, r3, r6
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	4433      	add	r3, r6
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	2000      	movs	r0, #0
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	462a      	mov	r2, r5
 8006e18:	f000 fab6 	bl	8007388 <_realloc_r>
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d1e0      	bne.n	8006de4 <__ssputs_r+0x5c>
 8006e22:	6921      	ldr	r1, [r4, #16]
 8006e24:	4650      	mov	r0, sl
 8006e26:	f7ff ff65 	bl	8006cf4 <_free_r>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	f8ca 3000 	str.w	r3, [sl]
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e3c:	e7e9      	b.n	8006e12 <__ssputs_r+0x8a>
	...

08006e40 <_svfiprintf_r>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	4698      	mov	r8, r3
 8006e46:	898b      	ldrh	r3, [r1, #12]
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	b09d      	sub	sp, #116	@ 0x74
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4614      	mov	r4, r2
 8006e52:	d510      	bpl.n	8006e76 <_svfiprintf_r+0x36>
 8006e54:	690b      	ldr	r3, [r1, #16]
 8006e56:	b973      	cbnz	r3, 8006e76 <_svfiprintf_r+0x36>
 8006e58:	2140      	movs	r1, #64	@ 0x40
 8006e5a:	f7ff fe4d 	bl	8006af8 <_malloc_r>
 8006e5e:	6028      	str	r0, [r5, #0]
 8006e60:	6128      	str	r0, [r5, #16]
 8006e62:	b930      	cbnz	r0, 8006e72 <_svfiprintf_r+0x32>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e6c:	b01d      	add	sp, #116	@ 0x74
 8006e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e72:	2340      	movs	r3, #64	@ 0x40
 8006e74:	616b      	str	r3, [r5, #20]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e84:	2330      	movs	r3, #48	@ 0x30
 8006e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007024 <_svfiprintf_r+0x1e4>
 8006e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e8e:	f04f 0901 	mov.w	r9, #1
 8006e92:	4623      	mov	r3, r4
 8006e94:	469a      	mov	sl, r3
 8006e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9a:	b10a      	cbz	r2, 8006ea0 <_svfiprintf_r+0x60>
 8006e9c:	2a25      	cmp	r2, #37	@ 0x25
 8006e9e:	d1f9      	bne.n	8006e94 <_svfiprintf_r+0x54>
 8006ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea4:	d00b      	beq.n	8006ebe <_svfiprintf_r+0x7e>
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ff6b 	bl	8006d88 <__ssputs_r>
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f000 80a7 	beq.w	8007006 <_svfiprintf_r+0x1c6>
 8006eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eba:	445a      	add	r2, fp
 8006ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 809f 	beq.w	8007006 <_svfiprintf_r+0x1c6>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed2:	f10a 0a01 	add.w	sl, sl, #1
 8006ed6:	9304      	str	r3, [sp, #16]
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ee0:	4654      	mov	r4, sl
 8006ee2:	2205      	movs	r2, #5
 8006ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee8:	484e      	ldr	r0, [pc, #312]	@ (8007024 <_svfiprintf_r+0x1e4>)
 8006eea:	f7f9 f9b1 	bl	8000250 <memchr>
 8006eee:	9a04      	ldr	r2, [sp, #16]
 8006ef0:	b9d8      	cbnz	r0, 8006f2a <_svfiprintf_r+0xea>
 8006ef2:	06d0      	lsls	r0, r2, #27
 8006ef4:	bf44      	itt	mi
 8006ef6:	2320      	movmi	r3, #32
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006efc:	0711      	lsls	r1, r2, #28
 8006efe:	bf44      	itt	mi
 8006f00:	232b      	movmi	r3, #43	@ 0x2b
 8006f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f06:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f0c:	d015      	beq.n	8006f3a <_svfiprintf_r+0xfa>
 8006f0e:	9a07      	ldr	r2, [sp, #28]
 8006f10:	4654      	mov	r4, sl
 8006f12:	2000      	movs	r0, #0
 8006f14:	f04f 0c0a 	mov.w	ip, #10
 8006f18:	4621      	mov	r1, r4
 8006f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1e:	3b30      	subs	r3, #48	@ 0x30
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d94b      	bls.n	8006fbc <_svfiprintf_r+0x17c>
 8006f24:	b1b0      	cbz	r0, 8006f54 <_svfiprintf_r+0x114>
 8006f26:	9207      	str	r2, [sp, #28]
 8006f28:	e014      	b.n	8006f54 <_svfiprintf_r+0x114>
 8006f2a:	eba0 0308 	sub.w	r3, r0, r8
 8006f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	46a2      	mov	sl, r4
 8006f38:	e7d2      	b.n	8006ee0 <_svfiprintf_r+0xa0>
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	1d19      	adds	r1, r3, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	9103      	str	r1, [sp, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bfbb      	ittet	lt
 8006f46:	425b      	neglt	r3, r3
 8006f48:	f042 0202 	orrlt.w	r2, r2, #2
 8006f4c:	9307      	strge	r3, [sp, #28]
 8006f4e:	9307      	strlt	r3, [sp, #28]
 8006f50:	bfb8      	it	lt
 8006f52:	9204      	strlt	r2, [sp, #16]
 8006f54:	7823      	ldrb	r3, [r4, #0]
 8006f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f58:	d10a      	bne.n	8006f70 <_svfiprintf_r+0x130>
 8006f5a:	7863      	ldrb	r3, [r4, #1]
 8006f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f5e:	d132      	bne.n	8006fc6 <_svfiprintf_r+0x186>
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	9203      	str	r2, [sp, #12]
 8006f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f6c:	3402      	adds	r4, #2
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007034 <_svfiprintf_r+0x1f4>
 8006f74:	7821      	ldrb	r1, [r4, #0]
 8006f76:	2203      	movs	r2, #3
 8006f78:	4650      	mov	r0, sl
 8006f7a:	f7f9 f969 	bl	8000250 <memchr>
 8006f7e:	b138      	cbz	r0, 8006f90 <_svfiprintf_r+0x150>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	eba0 000a 	sub.w	r0, r0, sl
 8006f86:	2240      	movs	r2, #64	@ 0x40
 8006f88:	4082      	lsls	r2, r0
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	3401      	adds	r4, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f94:	4824      	ldr	r0, [pc, #144]	@ (8007028 <_svfiprintf_r+0x1e8>)
 8006f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	f7f9 f958 	bl	8000250 <memchr>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d036      	beq.n	8007012 <_svfiprintf_r+0x1d2>
 8006fa4:	4b21      	ldr	r3, [pc, #132]	@ (800702c <_svfiprintf_r+0x1ec>)
 8006fa6:	bb1b      	cbnz	r3, 8006ff0 <_svfiprintf_r+0x1b0>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	3307      	adds	r3, #7
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb6:	4433      	add	r3, r6
 8006fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fba:	e76a      	b.n	8006e92 <_svfiprintf_r+0x52>
 8006fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	e7a8      	b.n	8006f18 <_svfiprintf_r+0xd8>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd8:	3a30      	subs	r2, #48	@ 0x30
 8006fda:	2a09      	cmp	r2, #9
 8006fdc:	d903      	bls.n	8006fe6 <_svfiprintf_r+0x1a6>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c6      	beq.n	8006f70 <_svfiprintf_r+0x130>
 8006fe2:	9105      	str	r1, [sp, #20]
 8006fe4:	e7c4      	b.n	8006f70 <_svfiprintf_r+0x130>
 8006fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fea:	4604      	mov	r4, r0
 8006fec:	2301      	movs	r3, #1
 8006fee:	e7f0      	b.n	8006fd2 <_svfiprintf_r+0x192>
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8007030 <_svfiprintf_r+0x1f0>)
 8006ff8:	a904      	add	r1, sp, #16
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f3af 8000 	nop.w
 8007000:	1c42      	adds	r2, r0, #1
 8007002:	4606      	mov	r6, r0
 8007004:	d1d6      	bne.n	8006fb4 <_svfiprintf_r+0x174>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	065b      	lsls	r3, r3, #25
 800700a:	f53f af2d 	bmi.w	8006e68 <_svfiprintf_r+0x28>
 800700e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007010:	e72c      	b.n	8006e6c <_svfiprintf_r+0x2c>
 8007012:	ab03      	add	r3, sp, #12
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	462a      	mov	r2, r5
 8007018:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <_svfiprintf_r+0x1f0>)
 800701a:	a904      	add	r1, sp, #16
 800701c:	4638      	mov	r0, r7
 800701e:	f000 f879 	bl	8007114 <_printf_i>
 8007022:	e7ed      	b.n	8007000 <_svfiprintf_r+0x1c0>
 8007024:	080079ab 	.word	0x080079ab
 8007028:	080079b5 	.word	0x080079b5
 800702c:	00000000 	.word	0x00000000
 8007030:	08006d89 	.word	0x08006d89
 8007034:	080079b1 	.word	0x080079b1

08007038 <_printf_common>:
 8007038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	4616      	mov	r6, r2
 800703e:	4698      	mov	r8, r3
 8007040:	688a      	ldr	r2, [r1, #8]
 8007042:	690b      	ldr	r3, [r1, #16]
 8007044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007048:	4293      	cmp	r3, r2
 800704a:	bfb8      	it	lt
 800704c:	4613      	movlt	r3, r2
 800704e:	6033      	str	r3, [r6, #0]
 8007050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007054:	4607      	mov	r7, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b10a      	cbz	r2, 800705e <_printf_common+0x26>
 800705a:	3301      	adds	r3, #1
 800705c:	6033      	str	r3, [r6, #0]
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	0699      	lsls	r1, r3, #26
 8007062:	bf42      	ittt	mi
 8007064:	6833      	ldrmi	r3, [r6, #0]
 8007066:	3302      	addmi	r3, #2
 8007068:	6033      	strmi	r3, [r6, #0]
 800706a:	6825      	ldr	r5, [r4, #0]
 800706c:	f015 0506 	ands.w	r5, r5, #6
 8007070:	d106      	bne.n	8007080 <_printf_common+0x48>
 8007072:	f104 0a19 	add.w	sl, r4, #25
 8007076:	68e3      	ldr	r3, [r4, #12]
 8007078:	6832      	ldr	r2, [r6, #0]
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	42ab      	cmp	r3, r5
 800707e:	dc26      	bgt.n	80070ce <_printf_common+0x96>
 8007080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	3b00      	subs	r3, #0
 8007088:	bf18      	it	ne
 800708a:	2301      	movne	r3, #1
 800708c:	0692      	lsls	r2, r2, #26
 800708e:	d42b      	bmi.n	80070e8 <_printf_common+0xb0>
 8007090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007094:	4641      	mov	r1, r8
 8007096:	4638      	mov	r0, r7
 8007098:	47c8      	blx	r9
 800709a:	3001      	adds	r0, #1
 800709c:	d01e      	beq.n	80070dc <_printf_common+0xa4>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	f003 0306 	and.w	r3, r3, #6
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	bf02      	ittt	eq
 80070aa:	68e5      	ldreq	r5, [r4, #12]
 80070ac:	6833      	ldreq	r3, [r6, #0]
 80070ae:	1aed      	subeq	r5, r5, r3
 80070b0:	68a3      	ldr	r3, [r4, #8]
 80070b2:	bf0c      	ite	eq
 80070b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070b8:	2500      	movne	r5, #0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bfc4      	itt	gt
 80070be:	1a9b      	subgt	r3, r3, r2
 80070c0:	18ed      	addgt	r5, r5, r3
 80070c2:	2600      	movs	r6, #0
 80070c4:	341a      	adds	r4, #26
 80070c6:	42b5      	cmp	r5, r6
 80070c8:	d11a      	bne.n	8007100 <_printf_common+0xc8>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e008      	b.n	80070e0 <_printf_common+0xa8>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4652      	mov	r2, sl
 80070d2:	4641      	mov	r1, r8
 80070d4:	4638      	mov	r0, r7
 80070d6:	47c8      	blx	r9
 80070d8:	3001      	adds	r0, #1
 80070da:	d103      	bne.n	80070e4 <_printf_common+0xac>
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e4:	3501      	adds	r5, #1
 80070e6:	e7c6      	b.n	8007076 <_printf_common+0x3e>
 80070e8:	18e1      	adds	r1, r4, r3
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	2030      	movs	r0, #48	@ 0x30
 80070ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070f2:	4422      	add	r2, r4
 80070f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070fc:	3302      	adds	r3, #2
 80070fe:	e7c7      	b.n	8007090 <_printf_common+0x58>
 8007100:	2301      	movs	r3, #1
 8007102:	4622      	mov	r2, r4
 8007104:	4641      	mov	r1, r8
 8007106:	4638      	mov	r0, r7
 8007108:	47c8      	blx	r9
 800710a:	3001      	adds	r0, #1
 800710c:	d0e6      	beq.n	80070dc <_printf_common+0xa4>
 800710e:	3601      	adds	r6, #1
 8007110:	e7d9      	b.n	80070c6 <_printf_common+0x8e>
	...

08007114 <_printf_i>:
 8007114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	7e0f      	ldrb	r7, [r1, #24]
 800711a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800711c:	2f78      	cmp	r7, #120	@ 0x78
 800711e:	4691      	mov	r9, r2
 8007120:	4680      	mov	r8, r0
 8007122:	460c      	mov	r4, r1
 8007124:	469a      	mov	sl, r3
 8007126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800712a:	d807      	bhi.n	800713c <_printf_i+0x28>
 800712c:	2f62      	cmp	r7, #98	@ 0x62
 800712e:	d80a      	bhi.n	8007146 <_printf_i+0x32>
 8007130:	2f00      	cmp	r7, #0
 8007132:	f000 80d2 	beq.w	80072da <_printf_i+0x1c6>
 8007136:	2f58      	cmp	r7, #88	@ 0x58
 8007138:	f000 80b9 	beq.w	80072ae <_printf_i+0x19a>
 800713c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007144:	e03a      	b.n	80071bc <_printf_i+0xa8>
 8007146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800714a:	2b15      	cmp	r3, #21
 800714c:	d8f6      	bhi.n	800713c <_printf_i+0x28>
 800714e:	a101      	add	r1, pc, #4	@ (adr r1, 8007154 <_printf_i+0x40>)
 8007150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071c1 	.word	0x080071c1
 800715c:	0800713d 	.word	0x0800713d
 8007160:	0800713d 	.word	0x0800713d
 8007164:	0800713d 	.word	0x0800713d
 8007168:	0800713d 	.word	0x0800713d
 800716c:	080071c1 	.word	0x080071c1
 8007170:	0800713d 	.word	0x0800713d
 8007174:	0800713d 	.word	0x0800713d
 8007178:	0800713d 	.word	0x0800713d
 800717c:	0800713d 	.word	0x0800713d
 8007180:	080072c1 	.word	0x080072c1
 8007184:	080071eb 	.word	0x080071eb
 8007188:	0800727b 	.word	0x0800727b
 800718c:	0800713d 	.word	0x0800713d
 8007190:	0800713d 	.word	0x0800713d
 8007194:	080072e3 	.word	0x080072e3
 8007198:	0800713d 	.word	0x0800713d
 800719c:	080071eb 	.word	0x080071eb
 80071a0:	0800713d 	.word	0x0800713d
 80071a4:	0800713d 	.word	0x0800713d
 80071a8:	08007283 	.word	0x08007283
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6032      	str	r2, [r6, #0]
 80071b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071bc:	2301      	movs	r3, #1
 80071be:	e09d      	b.n	80072fc <_printf_i+0x1e8>
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	1d19      	adds	r1, r3, #4
 80071c6:	6031      	str	r1, [r6, #0]
 80071c8:	0606      	lsls	r6, r0, #24
 80071ca:	d501      	bpl.n	80071d0 <_printf_i+0xbc>
 80071cc:	681d      	ldr	r5, [r3, #0]
 80071ce:	e003      	b.n	80071d8 <_printf_i+0xc4>
 80071d0:	0645      	lsls	r5, r0, #25
 80071d2:	d5fb      	bpl.n	80071cc <_printf_i+0xb8>
 80071d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071d8:	2d00      	cmp	r5, #0
 80071da:	da03      	bge.n	80071e4 <_printf_i+0xd0>
 80071dc:	232d      	movs	r3, #45	@ 0x2d
 80071de:	426d      	negs	r5, r5
 80071e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e4:	4859      	ldr	r0, [pc, #356]	@ (800734c <_printf_i+0x238>)
 80071e6:	230a      	movs	r3, #10
 80071e8:	e011      	b.n	800720e <_printf_i+0xfa>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	0608      	lsls	r0, r1, #24
 80071f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80071f4:	d402      	bmi.n	80071fc <_printf_i+0xe8>
 80071f6:	0649      	lsls	r1, r1, #25
 80071f8:	bf48      	it	mi
 80071fa:	b2ad      	uxthmi	r5, r5
 80071fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80071fe:	4853      	ldr	r0, [pc, #332]	@ (800734c <_printf_i+0x238>)
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	bf14      	ite	ne
 8007204:	230a      	movne	r3, #10
 8007206:	2308      	moveq	r3, #8
 8007208:	2100      	movs	r1, #0
 800720a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800720e:	6866      	ldr	r6, [r4, #4]
 8007210:	60a6      	str	r6, [r4, #8]
 8007212:	2e00      	cmp	r6, #0
 8007214:	bfa2      	ittt	ge
 8007216:	6821      	ldrge	r1, [r4, #0]
 8007218:	f021 0104 	bicge.w	r1, r1, #4
 800721c:	6021      	strge	r1, [r4, #0]
 800721e:	b90d      	cbnz	r5, 8007224 <_printf_i+0x110>
 8007220:	2e00      	cmp	r6, #0
 8007222:	d04b      	beq.n	80072bc <_printf_i+0x1a8>
 8007224:	4616      	mov	r6, r2
 8007226:	fbb5 f1f3 	udiv	r1, r5, r3
 800722a:	fb03 5711 	mls	r7, r3, r1, r5
 800722e:	5dc7      	ldrb	r7, [r0, r7]
 8007230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007234:	462f      	mov	r7, r5
 8007236:	42bb      	cmp	r3, r7
 8007238:	460d      	mov	r5, r1
 800723a:	d9f4      	bls.n	8007226 <_printf_i+0x112>
 800723c:	2b08      	cmp	r3, #8
 800723e:	d10b      	bne.n	8007258 <_printf_i+0x144>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07df      	lsls	r7, r3, #31
 8007244:	d508      	bpl.n	8007258 <_printf_i+0x144>
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6861      	ldr	r1, [r4, #4]
 800724a:	4299      	cmp	r1, r3
 800724c:	bfde      	ittt	le
 800724e:	2330      	movle	r3, #48	@ 0x30
 8007250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007254:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007258:	1b92      	subs	r2, r2, r6
 800725a:	6122      	str	r2, [r4, #16]
 800725c:	f8cd a000 	str.w	sl, [sp]
 8007260:	464b      	mov	r3, r9
 8007262:	aa03      	add	r2, sp, #12
 8007264:	4621      	mov	r1, r4
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff fee6 	bl	8007038 <_printf_common>
 800726c:	3001      	adds	r0, #1
 800726e:	d14a      	bne.n	8007306 <_printf_i+0x1f2>
 8007270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007274:	b004      	add	sp, #16
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f043 0320 	orr.w	r3, r3, #32
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	4833      	ldr	r0, [pc, #204]	@ (8007350 <_printf_i+0x23c>)
 8007284:	2778      	movs	r7, #120	@ 0x78
 8007286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	6831      	ldr	r1, [r6, #0]
 800728e:	061f      	lsls	r7, r3, #24
 8007290:	f851 5b04 	ldr.w	r5, [r1], #4
 8007294:	d402      	bmi.n	800729c <_printf_i+0x188>
 8007296:	065f      	lsls	r7, r3, #25
 8007298:	bf48      	it	mi
 800729a:	b2ad      	uxthmi	r5, r5
 800729c:	6031      	str	r1, [r6, #0]
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	bf44      	itt	mi
 80072a2:	f043 0320 	orrmi.w	r3, r3, #32
 80072a6:	6023      	strmi	r3, [r4, #0]
 80072a8:	b11d      	cbz	r5, 80072b2 <_printf_i+0x19e>
 80072aa:	2310      	movs	r3, #16
 80072ac:	e7ac      	b.n	8007208 <_printf_i+0xf4>
 80072ae:	4827      	ldr	r0, [pc, #156]	@ (800734c <_printf_i+0x238>)
 80072b0:	e7e9      	b.n	8007286 <_printf_i+0x172>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f023 0320 	bic.w	r3, r3, #32
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	e7f6      	b.n	80072aa <_printf_i+0x196>
 80072bc:	4616      	mov	r6, r2
 80072be:	e7bd      	b.n	800723c <_printf_i+0x128>
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	6825      	ldr	r5, [r4, #0]
 80072c4:	6961      	ldr	r1, [r4, #20]
 80072c6:	1d18      	adds	r0, r3, #4
 80072c8:	6030      	str	r0, [r6, #0]
 80072ca:	062e      	lsls	r6, r5, #24
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	d501      	bpl.n	80072d4 <_printf_i+0x1c0>
 80072d0:	6019      	str	r1, [r3, #0]
 80072d2:	e002      	b.n	80072da <_printf_i+0x1c6>
 80072d4:	0668      	lsls	r0, r5, #25
 80072d6:	d5fb      	bpl.n	80072d0 <_printf_i+0x1bc>
 80072d8:	8019      	strh	r1, [r3, #0]
 80072da:	2300      	movs	r3, #0
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	4616      	mov	r6, r2
 80072e0:	e7bc      	b.n	800725c <_printf_i+0x148>
 80072e2:	6833      	ldr	r3, [r6, #0]
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	6032      	str	r2, [r6, #0]
 80072e8:	681e      	ldr	r6, [r3, #0]
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	2100      	movs	r1, #0
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7f8 ffae 	bl	8000250 <memchr>
 80072f4:	b108      	cbz	r0, 80072fa <_printf_i+0x1e6>
 80072f6:	1b80      	subs	r0, r0, r6
 80072f8:	6060      	str	r0, [r4, #4]
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	2300      	movs	r3, #0
 8007300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007304:	e7aa      	b.n	800725c <_printf_i+0x148>
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	4632      	mov	r2, r6
 800730a:	4649      	mov	r1, r9
 800730c:	4640      	mov	r0, r8
 800730e:	47d0      	blx	sl
 8007310:	3001      	adds	r0, #1
 8007312:	d0ad      	beq.n	8007270 <_printf_i+0x15c>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	079b      	lsls	r3, r3, #30
 8007318:	d413      	bmi.n	8007342 <_printf_i+0x22e>
 800731a:	68e0      	ldr	r0, [r4, #12]
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	4298      	cmp	r0, r3
 8007320:	bfb8      	it	lt
 8007322:	4618      	movlt	r0, r3
 8007324:	e7a6      	b.n	8007274 <_printf_i+0x160>
 8007326:	2301      	movs	r3, #1
 8007328:	4632      	mov	r2, r6
 800732a:	4649      	mov	r1, r9
 800732c:	4640      	mov	r0, r8
 800732e:	47d0      	blx	sl
 8007330:	3001      	adds	r0, #1
 8007332:	d09d      	beq.n	8007270 <_printf_i+0x15c>
 8007334:	3501      	adds	r5, #1
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	9903      	ldr	r1, [sp, #12]
 800733a:	1a5b      	subs	r3, r3, r1
 800733c:	42ab      	cmp	r3, r5
 800733e:	dcf2      	bgt.n	8007326 <_printf_i+0x212>
 8007340:	e7eb      	b.n	800731a <_printf_i+0x206>
 8007342:	2500      	movs	r5, #0
 8007344:	f104 0619 	add.w	r6, r4, #25
 8007348:	e7f5      	b.n	8007336 <_printf_i+0x222>
 800734a:	bf00      	nop
 800734c:	080079bc 	.word	0x080079bc
 8007350:	080079cd 	.word	0x080079cd

08007354 <memmove>:
 8007354:	4288      	cmp	r0, r1
 8007356:	b510      	push	{r4, lr}
 8007358:	eb01 0402 	add.w	r4, r1, r2
 800735c:	d902      	bls.n	8007364 <memmove+0x10>
 800735e:	4284      	cmp	r4, r0
 8007360:	4623      	mov	r3, r4
 8007362:	d807      	bhi.n	8007374 <memmove+0x20>
 8007364:	1e43      	subs	r3, r0, #1
 8007366:	42a1      	cmp	r1, r4
 8007368:	d008      	beq.n	800737c <memmove+0x28>
 800736a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007372:	e7f8      	b.n	8007366 <memmove+0x12>
 8007374:	4402      	add	r2, r0
 8007376:	4601      	mov	r1, r0
 8007378:	428a      	cmp	r2, r1
 800737a:	d100      	bne.n	800737e <memmove+0x2a>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007386:	e7f7      	b.n	8007378 <memmove+0x24>

08007388 <_realloc_r>:
 8007388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	4680      	mov	r8, r0
 800738e:	4615      	mov	r5, r2
 8007390:	460c      	mov	r4, r1
 8007392:	b921      	cbnz	r1, 800739e <_realloc_r+0x16>
 8007394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	4611      	mov	r1, r2
 800739a:	f7ff bbad 	b.w	8006af8 <_malloc_r>
 800739e:	b92a      	cbnz	r2, 80073ac <_realloc_r+0x24>
 80073a0:	f7ff fca8 	bl	8006cf4 <_free_r>
 80073a4:	2400      	movs	r4, #0
 80073a6:	4620      	mov	r0, r4
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	f000 f81a 	bl	80073e4 <_malloc_usable_size_r>
 80073b0:	4285      	cmp	r5, r0
 80073b2:	4606      	mov	r6, r0
 80073b4:	d802      	bhi.n	80073bc <_realloc_r+0x34>
 80073b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073ba:	d8f4      	bhi.n	80073a6 <_realloc_r+0x1e>
 80073bc:	4629      	mov	r1, r5
 80073be:	4640      	mov	r0, r8
 80073c0:	f7ff fb9a 	bl	8006af8 <_malloc_r>
 80073c4:	4607      	mov	r7, r0
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d0ec      	beq.n	80073a4 <_realloc_r+0x1c>
 80073ca:	42b5      	cmp	r5, r6
 80073cc:	462a      	mov	r2, r5
 80073ce:	4621      	mov	r1, r4
 80073d0:	bf28      	it	cs
 80073d2:	4632      	movcs	r2, r6
 80073d4:	f7ff fc80 	bl	8006cd8 <memcpy>
 80073d8:	4621      	mov	r1, r4
 80073da:	4640      	mov	r0, r8
 80073dc:	f7ff fc8a 	bl	8006cf4 <_free_r>
 80073e0:	463c      	mov	r4, r7
 80073e2:	e7e0      	b.n	80073a6 <_realloc_r+0x1e>

080073e4 <_malloc_usable_size_r>:
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f18      	subs	r0, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfbc      	itt	lt
 80073ee:	580b      	ldrlt	r3, [r1, r0]
 80073f0:	18c0      	addlt	r0, r0, r3
 80073f2:	4770      	bx	lr

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
